
> proposal-editor@0.0.0 lint
> eslint . --format json

[{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\.lintstagedrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\.prettierrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\fix-pdf-exporter.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\App.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\common\\SafeHtml.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\common\\TipBox.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\AdvancedColorPicker.vue","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onMounted' is defined but never used. Allowed unused vars must match /^_/u.","line":176,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":252,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":252,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":292,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":292,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":323,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":323,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":355,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":355,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":356,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":356,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":364,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":364,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":380,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":380,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":391,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":391,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":400,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":400,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":408,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":408,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":415,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":415,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":433,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":433,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":439,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":439,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":446,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":446,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":461,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":461,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":467,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":467,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":474,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":474,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":489,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":489,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":496,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":496,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":505,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":505,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":517,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":517,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":523,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":523,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"advanced-color-picker\">\r\n    <div class=\"color-preview-container\">\r\n      <div\r\n        class=\"color-preview\"\r\n        :style=\"previewStyle\"\r\n        @click=\"showPicker = !showPicker\"\r\n      ></div>\r\n      <div class=\"color-value\" @click=\"showPicker = !showPicker\">\r\n        {{ displayValue }}\r\n      </div>\r\n    </div>\r\n\r\n    <v-menu\r\n      v-model=\"showPicker\"\r\n      :close-on-content-click=\"false\"\r\n      location=\"bottom\"\r\n      offset=\"5\"\r\n    >\r\n      <template v-slot:activator=\"{ props }\">\r\n        <v-btn\r\n          icon\r\n          size=\"small\"\r\n          v-bind=\"props\"\r\n          class=\"color-menu-button\"\r\n        >\r\n          <v-icon>mdi-palette</v-icon>\r\n        </v-btn>\r\n      </template>\r\n\r\n      <div class=\"color-picker-panel\">\r\n        <div class=\"panel-header\">\r\n          <div class=\"current-color-preview\" :style=\"previewStyle\"></div>\r\n          <div class=\"color-value-display\">{{ displayValue }}</div>\r\n        </div>\r\n\r\n        <!-- Color saturation/value picker -->\r\n        <div ref=\"saturationValuePicker\" class=\"saturation-value-picker\" @mousedown=\"startPickingSaturationValue\">\r\n          <div\r\n            class=\"saturation-value-background\"\r\n            :style=\"{ backgroundColor: `hsl(${hue}, 100%, 50%)` }\"\r\n          ></div>\r\n          <div class=\"white-gradient\"></div>\r\n          <div class=\"black-gradient\"></div>\r\n          <div\r\n            class=\"saturation-value-cursor\"\r\n            :style=\"{\r\n              left: `${saturation}%`,\r\n              top: `${100 - value}%`,\r\n              borderColor: value > 50 ? 'black' : 'white'\r\n            }\"\r\n          ></div>\r\n        </div>\r\n\r\n        <!-- Hue slider -->\r\n        <div ref=\"hueSlider\" class=\"hue-slider-container\" @mousedown=\"startPickingHue\">\r\n          <div class=\"hue-slider\"></div>\r\n          <div\r\n            class=\"hue-slider-cursor\"\r\n            :style=\"{ left: `${hue / 360 * 100}%` }\"\r\n          ></div>\r\n        </div>\r\n\r\n        <!-- Alpha slider -->\r\n        <div ref=\"alphaSlider\" class=\"alpha-slider-container\" @mousedown=\"startPickingAlpha\">\r\n          <div class=\"alpha-slider-background\">\r\n            <div class=\"alpha-gradient\"\r\n                 :style=\"{\r\n                   backgroundImage: `linear-gradient(to right, transparent, ${rgbColor})`\r\n                 }\"\r\n            ></div>\r\n          </div>\r\n          <div\r\n            class=\"alpha-slider-cursor\"\r\n            :style=\"{ left: `${alpha * 100}%` }\"\r\n          ></div>\r\n        </div>\r\n\r\n        <!-- RGBA inputs -->\r\n        <div class=\"color-inputs\">\r\n          <div class=\"input-group\">\r\n            <label>R</label>\r\n            <v-text-field\r\n              v-model.number=\"red\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"255\"\r\n              density=\"compact\"\r\n              variant=\"outlined\"\r\n              hide-details\r\n              @update:model-value=\"updateFromRgb\"\r\n            ></v-text-field>\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <label>G</label>\r\n            <v-text-field\r\n              v-model.number=\"green\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"255\"\r\n              density=\"compact\"\r\n              variant=\"outlined\"\r\n              hide-details\r\n              @update:model-value=\"updateFromRgb\"\r\n            ></v-text-field>\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <label>B</label>\r\n            <v-text-field\r\n              v-model.number=\"blue\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"255\"\r\n              density=\"compact\"\r\n              variant=\"outlined\"\r\n              hide-details\r\n              @update:model-value=\"updateFromRgb\"\r\n            ></v-text-field>\r\n          </div>\r\n          <div class=\"input-group\">\r\n            <label>A</label>\r\n            <v-text-field\r\n              v-model.number=\"alphaPercent\"\r\n              type=\"number\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              density=\"compact\"\r\n              variant=\"outlined\"\r\n              hide-details\r\n              @update:model-value=\"updateAlphaFromPercent\"\r\n            ></v-text-field>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Hex input -->\r\n        <div class=\"hex-input\">\r\n          <label>Hex</label>\r\n          <v-text-field\r\n            v-model=\"hexValue\"\r\n            density=\"compact\"\r\n            variant=\"outlined\"\r\n            hide-details\r\n            placeholder=\"#RRGGBB\"\r\n            @update:model-value=\"updateFromHex\"\r\n          ></v-text-field>\r\n        </div>\r\n\r\n        <!-- Color presets -->\r\n        <div class=\"color-presets\">\r\n          <div\r\n            v-for=\"(preset, index) in colorPresets\"\r\n            :key=\"index\"\r\n            class=\"color-preset\"\r\n            :style=\"{ backgroundColor: preset }\"\r\n            @click=\"selectPreset(preset)\"\r\n          ></div>\r\n        </div>\r\n\r\n        <!-- Transparent preset -->\r\n        <div class=\"transparent-preset\" @click=\"selectTransparent\">\r\n          <div class=\"transparent-indicator\"></div>\r\n          <span>Transparent</span>\r\n        </div>\r\n\r\n        <!-- Buttons -->\r\n        <div class=\"action-buttons\">\r\n          <v-btn text @click=\"showPicker = false\">Cancel</v-btn>\r\n          <v-btn color=\"primary\" @click=\"applyColor\">Apply</v-btn>\r\n        </div>\r\n      </div>\r\n    </v-menu>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch, onMounted, onBeforeUnmount } from \"vue\";\r\n\r\nconst props = defineProps<{\r\n  modelValue: string;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:modelValue\", value: string): void;\r\n}>();\r\n\r\n// UI state\r\nconst showPicker = ref(false);\r\n\r\n// Color state\r\nconst hue = ref(0);\r\nconst saturation = ref(100);\r\nconst value = ref(100);\r\nconst alpha = ref(1);\r\nconst red = ref(255);\r\nconst green = ref(0);\r\nconst blue = ref(0);\r\nconst hexValue = ref(\"#FF0000\");\r\nconst alphaPercent = ref(100);\r\n\r\n// DOM refs\r\nconst saturationValuePicker = ref<HTMLElement | null>(null);\r\nconst hueSlider = ref<HTMLElement | null>(null);\r\nconst alphaSlider = ref<HTMLElement | null>(null);\r\n\r\n// Mouse tracking for sliders\r\nlet isPickingSaturationValue = false;\r\nlet isPickingHue = false;\r\nlet isPickingAlpha = false;\r\n\r\n// Color presets\r\nconst colorPresets = [\r\n  \"#000000\", \"#FFFFFF\", \"#FF0000\", \"#00FF00\", \"#0000FF\",\r\n  \"#FFFF00\", \"#FF00FF\", \"#00FFFF\", \"#808080\", \"#C0C0C0\",\r\n  \"#FFA500\", \"#800080\", \"#008000\", \"#800000\", \"#000080\",\r\n  \"#FFC0CB\", \"#A52A2A\", \"#FFD700\", \"#ADD8E6\", \"#90EE90\",\r\n];\r\n\r\n// Computed values\r\nconst rgbColor = computed(() => {\r\n  return `rgb(${red.value}, ${green.value}, ${blue.value})`;\r\n});\r\n\r\nconst rgbaColor = computed(() => {\r\n  return `rgba(${red.value}, ${green.value}, ${blue.value}, ${alpha.value})`;\r\n});\r\n\r\nconst displayValue = computed(() => {\r\n  if (alpha.value < 1) {\r\n    return rgbaColor.value;\r\n  } else {\r\n    return hexValue.value.toUpperCase();\r\n  }\r\n});\r\n\r\nconst previewStyle = computed(() => {\r\n  return {\r\n    backgroundColor: rgbaColor.value,\r\n    backgroundImage: alpha.value < 1 ?\r\n      \"linear-gradient(45deg, #ccc 25%, transparent 25%), linear-gradient(-45deg, #ccc 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #ccc 75%), linear-gradient(-45deg, transparent 75%, #ccc 75%)\" :\r\n      \"none\",\r\n    backgroundSize: \"10px 10px\",\r\n    backgroundPosition: \"0 0, 0 5px, 5px -5px, -5px 0px\",\r\n  };\r\n});\r\n\r\n// Initialize from props\r\nwatch(() => props.modelValue, (newValue) => {\r\n  parseColor(newValue);\r\n}, { immediate: true });\r\n\r\n// Parse color from string\r\nfunction parseColor(colorStr: string) {\r\n  if (!colorStr || colorStr === \"transparent\") {\r\n    // Handle transparent\r\n    red.value = 0;\r\n    green.value = 0;\r\n    blue.value = 0;\r\n    alpha.value = 0;\r\n    alphaPercent.value = 0;\r\n    updateHsvFromRgb();\r\n    updateHexFromRgb();\r\n    return;\r\n  }\r\n\r\n  if (colorStr.startsWith(\"#\")) {\r\n    // Handle hex\r\n    hexValue.value = colorStr;\r\n    updateRgbFromHex();\r\n    updateHsvFromRgb();\r\n    alpha.value = 1;\r\n    alphaPercent.value = 100;\r\n    return;\r\n  }\r\n\r\n  if (colorStr.startsWith(\"rgb\")) {\r\n    // Handle rgb/rgba\r\n    const match = colorStr.match(/rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*([0-9.]+))?\\)/);\r\n    if (match) {\r\n      red.value = parseInt(match[1], 10);\r\n      green.value = parseInt(match[2], 10);\r\n      blue.value = parseInt(match[3], 10);\r\n      alpha.value = match[4] ? parseFloat(match[4]) : 1;\r\n      alphaPercent.value = Math.round(alpha.value * 100);\r\n      updateHsvFromRgb();\r\n      updateHexFromRgb();\r\n    }\r\n    return;\r\n  }\r\n}\r\n\r\n// Update functions\r\nfunction updateHsvFromRgb() {\r\n  const r = red.value / 255;\r\n  const g = green.value / 255;\r\n  const b = blue.value / 255;\r\n\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  const delta = max - min;\r\n\r\n  // Calculate value\r\n  value.value = max * 100;\r\n\r\n  // Calculate saturation\r\n  saturation.value = max === 0 ? 0 : (delta / max) * 100;\r\n\r\n  // Calculate hue\r\n  if (delta === 0) {\r\n    hue.value = 0;\r\n  } else if (max === r) {\r\n    hue.value = 60 * (((g - b) / delta) % 6);\r\n  } else if (max === g) {\r\n    hue.value = 60 * ((b - r) / delta + 2);\r\n  } else {\r\n    hue.value = 60 * ((r - g) / delta + 4);\r\n  }\r\n\r\n  if (hue.value < 0) {\r\n    hue.value += 360;\r\n  }\r\n}\r\n\r\nfunction updateRgbFromHsv() {\r\n  const h = hue.value;\r\n  const s = saturation.value / 100;\r\n  const v = value.value / 100;\r\n\r\n  const c = v * s;\r\n  const x = c * (1 - Math.abs((h / 60) % 2 - 1));\r\n  const m = v - c;\r\n\r\n  let r = 0, g = 0, b = 0;\r\n\r\n  if (h >= 0 && h < 60) {\r\n    r = c; g = x; b = 0;\r\n  } else if (h >= 60 && h < 120) {\r\n    r = x; g = c; b = 0;\r\n  } else if (h >= 120 && h < 180) {\r\n    r = 0; g = c; b = x;\r\n  } else if (h >= 180 && h < 240) {\r\n    r = 0; g = x; b = c;\r\n  } else if (h >= 240 && h < 300) {\r\n    r = x; g = 0; b = c;\r\n  } else {\r\n    r = c; g = 0; b = x;\r\n  }\r\n\r\n  red.value = Math.round((r + m) * 255);\r\n  green.value = Math.round((g + m) * 255);\r\n  blue.value = Math.round((b + m) * 255);\r\n\r\n  updateHexFromRgb();\r\n}\r\n\r\nfunction updateHexFromRgb() {\r\n  const toHex = (n: number) => {\r\n    const hex = n.toString(16);\r\n    return hex.length === 1 ? \"0\" + hex : hex;\r\n  };\r\n\r\n  hexValue.value = `#${toHex(red.value)}${toHex(green.value)}${toHex(blue.value)}`;\r\n}\r\n\r\nfunction updateRgbFromHex() {\r\n  const hex = hexValue.value.replace(\"#\", \"\");\r\n\r\n  if (hex.length === 3) {\r\n    // Handle shorthand hex (#RGB)\r\n    red.value = parseInt(hex[0] + hex[0], 16);\r\n    green.value = parseInt(hex[1] + hex[1], 16);\r\n    blue.value = parseInt(hex[2] + hex[2], 16);\r\n  } else if (hex.length === 6) {\r\n    // Handle full hex (#RRGGBB)\r\n    red.value = parseInt(hex.substring(0, 2), 16);\r\n    green.value = parseInt(hex.substring(2, 4), 16);\r\n    blue.value = parseInt(hex.substring(4, 6), 16);\r\n  }\r\n}\r\n\r\nfunction updateFromRgb() {\r\n  // Clamp RGB values\r\n  red.value = Math.max(0, Math.min(255, red.value));\r\n  green.value = Math.max(0, Math.min(255, green.value));\r\n  blue.value = Math.max(0, Math.min(255, blue.value));\r\n\r\n  updateHsvFromRgb();\r\n  updateHexFromRgb();\r\n  emitColorChange();\r\n}\r\n\r\nfunction updateFromHex() {\r\n  // Validate hex format\r\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hexValue.value)) {\r\n    updateRgbFromHex();\r\n    updateHsvFromRgb();\r\n    emitColorChange();\r\n  }\r\n}\r\n\r\nfunction updateAlphaFromPercent() {\r\n  // Clamp alpha percent\r\n  alphaPercent.value = Math.max(0, Math.min(100, alphaPercent.value));\r\n  alpha.value = alphaPercent.value / 100;\r\n  emitColorChange();\r\n}\r\n\r\n// Mouse event handlers\r\nfunction startPickingSaturationValue(event: MouseEvent) {\r\n  isPickingSaturationValue = true;\r\n  document.addEventListener(\"mousemove\", pickSaturationValue);\r\n  document.addEventListener(\"mouseup\", stopPickingSaturationValue);\r\n  pickSaturationValue(event);\r\n}\r\n\r\nfunction pickSaturationValue(event: MouseEvent) {\r\n  if (!isPickingSaturationValue || !saturationValuePicker.value) return;\r\n\r\n  const rect = saturationValuePicker.value.getBoundingClientRect();\r\n  let s = ((event.clientX - rect.left) / rect.width) * 100;\r\n  let v = 100 - ((event.clientY - rect.top) / rect.height) * 100;\r\n\r\n  // Clamp values\r\n  s = Math.max(0, Math.min(100, s));\r\n  v = Math.max(0, Math.min(100, v));\r\n\r\n  saturation.value = s;\r\n  value.value = v;\r\n\r\n  updateRgbFromHsv();\r\n  emitColorChange();\r\n}\r\n\r\nfunction stopPickingSaturationValue() {\r\n  isPickingSaturationValue = false;\r\n  document.removeEventListener(\"mousemove\", pickSaturationValue);\r\n  document.removeEventListener(\"mouseup\", stopPickingSaturationValue);\r\n}\r\n\r\nfunction startPickingHue(event: MouseEvent) {\r\n  isPickingHue = true;\r\n  document.addEventListener(\"mousemove\", pickHue);\r\n  document.addEventListener(\"mouseup\", stopPickingHue);\r\n  pickHue(event);\r\n}\r\n\r\nfunction pickHue(event: MouseEvent) {\r\n  if (!isPickingHue || !hueSlider.value) return;\r\n\r\n  const rect = hueSlider.value.getBoundingClientRect();\r\n  let h = ((event.clientX - rect.left) / rect.width) * 360;\r\n\r\n  // Clamp value\r\n  h = Math.max(0, Math.min(360, h));\r\n\r\n  hue.value = h;\r\n\r\n  updateRgbFromHsv();\r\n  emitColorChange();\r\n}\r\n\r\nfunction stopPickingHue() {\r\n  isPickingHue = false;\r\n  document.removeEventListener(\"mousemove\", pickHue);\r\n  document.removeEventListener(\"mouseup\", stopPickingHue);\r\n}\r\n\r\nfunction startPickingAlpha(event: MouseEvent) {\r\n  isPickingAlpha = true;\r\n  document.addEventListener(\"mousemove\", pickAlpha);\r\n  document.addEventListener(\"mouseup\", stopPickingAlpha);\r\n  pickAlpha(event);\r\n}\r\n\r\nfunction pickAlpha(event: MouseEvent) {\r\n  if (!isPickingAlpha || !alphaSlider.value) return;\r\n\r\n  const rect = alphaSlider.value.getBoundingClientRect();\r\n  let a = (event.clientX - rect.left) / rect.width;\r\n\r\n  // Clamp value\r\n  a = Math.max(0, Math.min(1, a));\r\n\r\n  alpha.value = a;\r\n  alphaPercent.value = Math.round(a * 100);\r\n\r\n  emitColorChange();\r\n}\r\n\r\nfunction stopPickingAlpha() {\r\n  isPickingAlpha = false;\r\n  document.removeEventListener(\"mousemove\", pickAlpha);\r\n  document.removeEventListener(\"mouseup\", stopPickingAlpha);\r\n}\r\n\r\n// Preset selection\r\nfunction selectPreset(color: string) {\r\n  hexValue.value = color;\r\n  updateRgbFromHex();\r\n  updateHsvFromRgb();\r\n  alpha.value = 1;\r\n  alphaPercent.value = 100;\r\n  emitColorChange();\r\n}\r\n\r\nfunction selectTransparent() {\r\n  red.value = 0;\r\n  green.value = 0;\r\n  blue.value = 0;\r\n  alpha.value = 0;\r\n  alphaPercent.value = 0;\r\n  updateHsvFromRgb();\r\n  updateHexFromRgb();\r\n  emitColorChange();\r\n}\r\n\r\n// Apply color\r\nfunction applyColor() {\r\n  emitColorChange();\r\n  showPicker.value = false;\r\n}\r\n\r\n// Emit color change\r\nfunction emitColorChange() {\r\n  if (alpha.value < 1) {\r\n    emit(\"update:modelValue\", rgbaColor.value);\r\n  } else {\r\n    emit(\"update:modelValue\", hexValue.value);\r\n  }\r\n}\r\n\r\n// Clean up event listeners\r\nonBeforeUnmount(() => {\r\n  document.removeEventListener(\"mousemove\", pickSaturationValue);\r\n  document.removeEventListener(\"mouseup\", stopPickingSaturationValue);\r\n  document.removeEventListener(\"mousemove\", pickHue);\r\n  document.removeEventListener(\"mouseup\", stopPickingHue);\r\n  document.removeEventListener(\"mousemove\", pickAlpha);\r\n  document.removeEventListener(\"mouseup\", stopPickingAlpha);\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.advanced-color-picker {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.color-preview-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n.color-preview {\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n  border: 1px solid var(--border, #ccc);\r\n}\r\n\r\n.color-value {\r\n  font-size: 12px;\r\n  color: var(--text-secondary, #666);\r\n}\r\n\r\n.color-menu-button {\r\n  margin-left: 4px;\r\n}\r\n\r\n.color-picker-panel {\r\n  width: 280px;\r\n  padding: 16px;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.panel-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.current-color-preview {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 4px;\r\n  border: 1px solid var(--border, #ccc);\r\n}\r\n\r\n.color-value-display {\r\n  font-size: 14px;\r\n  font-family: monospace;\r\n}\r\n\r\n.saturation-value-picker {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 150px;\r\n  border-radius: 4px;\r\n  margin-bottom: 16px;\r\n  cursor: crosshair;\r\n}\r\n\r\n.saturation-value-background,\r\n.white-gradient,\r\n.black-gradient {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  border-radius: 4px;\r\n}\r\n\r\n.white-gradient {\r\n  background: linear-gradient(to right, white, rgba(255, 255, 255, 0));\r\n}\r\n\r\n.black-gradient {\r\n  background: linear-gradient(to bottom, transparent, black);\r\n}\r\n\r\n.saturation-value-cursor {\r\n  position: absolute;\r\n  width: 12px;\r\n  height: 12px;\r\n  border: 2px solid white;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, -50%);\r\n  pointer-events: none;\r\n}\r\n\r\n.hue-slider-container,\r\n.alpha-slider-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 16px;\r\n  margin-bottom: 16px;\r\n  cursor: pointer;\r\n}\r\n\r\n.hue-slider {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  border-radius: 4px;\r\n  background: linear-gradient(\r\n    to right,\r\n    #ff0000, #ffff00, #00ff00, #00ffff, #0000ff, #ff00ff, #ff0000\r\n  );\r\n}\r\n\r\n.alpha-slider-background {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  border-radius: 4px;\r\n  background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),\r\n                    linear-gradient(-45deg, #ccc 25%, transparent 25%),\r\n                    linear-gradient(45deg, transparent 75%, #ccc 75%),\r\n                    linear-gradient(-45deg, transparent 75%, #ccc 75%);\r\n  background-size: 8px 8px;\r\n  background-position: 0 0, 0 4px, 4px -4px, -4px 0px;\r\n}\r\n\r\n.alpha-gradient {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  border-radius: 4px;\r\n}\r\n\r\n.hue-slider-cursor,\r\n.alpha-slider-cursor {\r\n  position: absolute;\r\n  width: 16px;\r\n  height: 16px;\r\n  background-color: white;\r\n  border: 2px solid #333;\r\n  border-radius: 50%;\r\n  transform: translateX(-50%);\r\n  pointer-events: none;\r\n}\r\n\r\n.color-inputs {\r\n  display: flex;\r\n  gap: 8px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.input-group {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  label {\r\n    font-size: 12px;\r\n    margin-bottom: 4px;\r\n    color: var(--text-secondary, #666);\r\n  }\r\n}\r\n\r\n.hex-input {\r\n  margin-bottom: 16px;\r\n\r\n  label {\r\n    font-size: 12px;\r\n    margin-bottom: 4px;\r\n    color: var(--text-secondary, #666);\r\n  }\r\n}\r\n\r\n.color-presets {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  gap: 8px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.color-preset {\r\n  aspect-ratio: 1;\r\n  border-radius: 4px;\r\n  border: 1px solid var(--border, #ccc);\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n}\r\n\r\n.transparent-preset {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  border: 1px solid var(--border, #ccc);\r\n  cursor: pointer;\r\n  margin-bottom: 16px;\r\n\r\n  .transparent-indicator {\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 4px;\r\n    background-image: linear-gradient(45deg, #ccc 25%, transparent 25%),\r\n                      linear-gradient(-45deg, #ccc 25%, transparent 25%),\r\n                      linear-gradient(45deg, transparent 75%, #ccc 75%),\r\n                      linear-gradient(-45deg, transparent 75%, #ccc 75%);\r\n    background-size: 10px 10px;\r\n    background-position: 0 0, 0 5px, 5px -5px, -5px 0px;\r\n  }\r\n\r\n  span {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 8px;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\DocumentPage.vue","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":166,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5336,5339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5336,5339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"document-page-container\">\r\n    <!-- Actual document page -->\r\n    <div class=\"document-page\" :class=\"{ active: isActive }\" :style=\"pageStyle\">\r\n      <div ref=\"pageContent\" class=\"page-content\">\r\n        <!-- Element toolbar positioned at the top of the page content -->\r\n        <ElementToolbar\r\n          v-if=\"selectedElement && selectedElementPosition\"\r\n          :element=\"selectedElement\"\r\n          :elements=\"section?.elements || []\"\r\n          :layer-index=\"getElementIndex(selectedElement)\"\r\n          :total-layers=\"sortedElements.length\"\r\n          :element-position=\"selectedElementPosition\"\r\n          @move-up=\"moveElementUp\"\r\n          @move-down=\"moveElementDown\"\r\n          @move-to-top=\"moveElementToTop\"\r\n          @move-to-bottom=\"moveElementToBottom\"\r\n        />\r\n\r\n        <Suspense v-if=\"section?.elements && Array.isArray(section.elements)\">\r\n          <template #default>\r\n            <div class=\"elements-container\">\r\n              <div\r\n                v-for=\"(element, index) in sortedElements\"\r\n                :key=\"element.id\"\r\n                class=\"element-wrapper\"\r\n                :style=\"{ zIndex: element.zIndex || 0 }\"\r\n                @mouseenter=\"hoveredElement = element\"\r\n                @mouseleave=\"hoveredElement = null\"\r\n              >\r\n                <component\r\n                  :is=\"getElementComponent(element.type)\"\r\n                  ref=\"elementRefs\"\r\n                  :element=\"element\"\r\n                  :isSelected=\"selectedElement?.id === element.id\"\r\n                  :data-element-id=\"element.id\"\r\n                  :class=\"`element-${element.id}`\"\r\n                  @click.stop=\"selectElement(element)\"\r\n                  @update:element=\"updateElement\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </template>\r\n          <template #fallback>\r\n            <div class=\"loading\">Loading elements...</div>\r\n          </template>\r\n        </Suspense>\r\n\r\n        <div\r\n          v-if=\"\r\n            !section ||\r\n              !section?.elements ||\r\n              !Array.isArray(section.elements) ||\r\n              !section.elements?.length\r\n          \"\r\n          class=\"empty-page\"\r\n        >\r\n          <p>This section is empty. Add elements from the toolbar above.</p>\r\n        </div>\r\n\r\n        <!-- Drawing rectangle for creating elements -->\r\n        <div\r\n          v-if=\"isDrawing\"\r\n          class=\"drawing-rectangle\"\r\n          :style=\"{\r\n            left: drawingRectStyle?.left,\r\n            top: drawingRectStyle?.top,\r\n            width: drawingRectStyle?.width,\r\n            height: drawingRectStyle?.height,\r\n          }\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n// 1. Imports\r\nimport {\r\n  ref,\r\n  computed,\r\n  watch,\r\n  nextTick,\r\n  onMounted,\r\n  onBeforeUnmount,\r\n  onErrorCaptured,\r\n  type CSSProperties,\r\n} from \"vue\";\r\nimport { Section, DocumentElement } from \"../../types/document\";\r\nimport ElementToolbar from \"./ElementToolbar.vue\";\r\nimport { getPaperSizeByName, getLandscapeSize } from \"../../utils/paperSizes\";\r\nimport { getElementComponent } from \"../../utils/elementComponentLoader\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/documentPage.scss\";\r\n\r\n// 2. Types\r\n/**\r\n * Element position information for toolbar positioning\r\n */\r\ninterface ElementPosition {\r\n  top: number;\r\n  left: number;\r\n  width: number;\r\n}\r\n\r\n/**\r\n * Drawing rectangle style\r\n */\r\ninterface DrawingRectStyle {\r\n  left: string;\r\n  top: string;\r\n  width: string;\r\n  height: string;\r\n}\r\n\r\n// 3. Props and Emits\r\n/**\r\n * Component props\r\n */\r\nconst props = defineProps<{\r\n  /** The section data to display */\r\n  section: Section;\r\n  /** Whether this section is currently active */\r\n  isActive: boolean;\r\n  /** Whether to show the grid */\r\n  showGrid?: boolean;\r\n  /** Whether the user is currently drawing a selection rectangle */\r\n  isDrawing?: boolean;\r\n  /** The paper size for the document */\r\n  paperSize?: string;\r\n  /** The orientation of the document */\r\n  orientation?: \"portrait\" | \"landscape\";\r\n  /** Style for the drawing rectangle */\r\n  drawingRectStyle?: DrawingRectStyle;\r\n}>();\r\n\r\nconst { section, isActive } = props;\r\n\r\n/**\r\n * Component events\r\n */\r\nconst emit = defineEmits<{\r\n  /** Emitted when an element is selected */\r\n  (e: \"element-selected\", element: DocumentElement | null): void;\r\n  /** Emitted when an element is updated */\r\n  (e: \"element-updated\", element: DocumentElement): void;\r\n  /** Move the element up one layer */\r\n  (e: \"move-element-up\", element: DocumentElement): void;\r\n  /** Move the element down one layer */\r\n  (e: \"move-element-down\", element: DocumentElement): void;\r\n  /** Move the element to the top of all layers */\r\n  (e: \"move-element-to-top\", element: DocumentElement): void;\r\n  /** Move the element to the bottom of all layers */\r\n  (e: \"move-element-to-bottom\", element: DocumentElement): void;\r\n}>();\r\n\r\n// 4. Reactive State\r\n/** Reference to the page content element */\r\nconst pageContent = ref<HTMLElement | null>(null);\r\n/** The currently selected element */\r\nconst selectedElement = ref<DocumentElement | null>(null);\r\n/** The element currently being hovered over */\r\nconst hoveredElement = ref<DocumentElement | null>(null);\r\n/** References to element components */\r\nconst elementRefs = ref<any[]>([]);\r\n/** Whether to show the grid */\r\nconst showGrid = ref(true); // Default to true, will be updated when props change\r\n/** Position information for the selected element */\r\nconst selectedElementPosition = ref<ElementPosition | null>(null);\r\n\r\n// 5. Computed Properties\r\n/**\r\n * Calculate the page width based on paper size and orientation\r\n */\r\nconst pageWidth = computed((): number => {\r\n  const paperSizeName = props.paperSize || \"Letter\";\r\n  const orientation = props.orientation || \"portrait\";\r\n\r\n  let paperSize = getPaperSizeByName(paperSizeName);\r\n\r\n  // Apply orientation\r\n  if (orientation === \"landscape\") {\r\n    paperSize = getLandscapeSize(paperSize);\r\n  }\r\n\r\n  return paperSize.width;\r\n});\r\n\r\n/**\r\n * Calculate the page height based on paper size and orientation\r\n */\r\nconst pageHeight = computed((): number => {\r\n  const paperSizeName = props.paperSize || \"Letter\";\r\n  const orientation = props.orientation || \"portrait\";\r\n\r\n  let paperSize = getPaperSizeByName(paperSizeName);\r\n\r\n  // Apply orientation\r\n  if (orientation === \"landscape\") {\r\n    paperSize = getLandscapeSize(paperSize);\r\n  }\r\n\r\n  return paperSize.height;\r\n});\r\n\r\n/**\r\n * Calculate the style for the page element\r\n */\r\nconst pageStyle = computed((): CSSProperties => {\r\n  return {\r\n    width: `${pageWidth.value}px`,\r\n    height: `${pageHeight.value}px`,\r\n    position: \"relative\",\r\n    overflow: \"hidden\", // Hide content that goes outside the document boundaries\r\n  };\r\n});\r\n\r\n/**\r\n * Sort elements by zIndex for proper layering\r\n */\r\nconst sortedElements = computed((): DocumentElement[] => {\r\n  if (!section?.elements) return [];\r\n\r\n  // Make a copy of the elements array to avoid modifying the original\r\n  return [...section.elements].sort((a, b) => {\r\n    // Default zIndex to 0 if not set\r\n    const zIndexA = a.zIndex ?? 0;\r\n    const zIndexB = b.zIndex ?? 0;\r\n    return zIndexA - zIndexB;\r\n  });\r\n});\r\n\r\n// 6. Watch Effects\r\n/**\r\n * Watch for changes to the showGrid prop\r\n */\r\nwatch(\r\n  () => props.showGrid,\r\n  (newValue) => {\r\n    if (newValue !== undefined) {\r\n      showGrid.value = newValue;\r\n    }\r\n  },\r\n  { immediate: true },\r\n);\r\n\r\n/**\r\n * Watch for changes to the selected element to update its position\r\n */\r\nwatch(\r\n  () => selectedElement.value,\r\n  () => {\r\n    // Use nextTick to ensure the DOM has updated\r\n    nextTick(() => {\r\n      calculateSelectedElementPosition();\r\n    });\r\n  },\r\n);\r\n\r\n// 7. Methods\r\n/**\r\n * Handle element selection\r\n * @param element The element to select\r\n */\r\nfunction selectElement(element: DocumentElement): void {\r\n  selectedElement.value = element;\r\n\r\n  // Calculate the element position for the toolbar\r\n  calculateSelectedElementPosition();\r\n\r\n  emit(\"element-selected\", element);\r\n}\r\n\r\n/**\r\n * Calculate the position of the selected element for the toolbar\r\n */\r\nfunction calculateSelectedElementPosition(): void {\r\n  if (!selectedElement.value || !pageContent.value) return;\r\n\r\n  // Find the element in the DOM\r\n  const elementId = selectedElement.value.id;\r\n\r\n  // Try to find the element by data-element-id attribute first\r\n  let elementDom = pageContent.value.querySelector(\r\n    `[data-element-id=\"${elementId}\"]`,\r\n  );\r\n\r\n  // If not found, try to find the element wrapper that contains this element\r\n  if (!elementDom) {\r\n    // Find all element wrappers\r\n    const elementWrappers =\r\n      pageContent.value.querySelectorAll(\".element-wrapper\");\r\n\r\n    // Loop through wrappers to find the one with our element\r\n    for (const wrapper of elementWrappers) {\r\n      // Check if this wrapper contains our element\r\n      const component = wrapper.querySelector(\".element\");\r\n      if (\r\n        component &&\r\n        component.classList.contains(`element-${selectedElement.value.id}`)\r\n      ) {\r\n        elementDom = component;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If still not found, use the element's position directly\r\n    if (!elementDom && selectedElement.value) {\r\n      selectedElementPosition.value = {\r\n        top: selectedElement.value.position.y,\r\n        left: selectedElement.value.position.x,\r\n        width: selectedElement.value.size.width,\r\n      };\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (elementDom) {\r\n    const rect = elementDom.getBoundingClientRect();\r\n    const pageRect = pageContent.value.getBoundingClientRect();\r\n\r\n    // Calculate position relative to the page content\r\n    selectedElementPosition.value = {\r\n      top: rect.top - pageRect.top,\r\n      left: rect.left - pageRect.left,\r\n      width: rect.width,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Get the index of an element in the sortedElements array\r\n * @param element The element to find\r\n * @returns The index of the element\r\n */\r\nfunction getElementIndex(element: DocumentElement): number {\r\n  if (!element || !sortedElements.value) return 0;\r\n\r\n  return sortedElements.value.findIndex((el) => el.id === element.id);\r\n}\r\n\r\n/**\r\n * Update an element\r\n * @param element The updated element\r\n */\r\nfunction updateElement(element: DocumentElement): void {\r\n  emit(\"element-updated\", element);\r\n}\r\n\r\n/**\r\n * Move an element up one layer\r\n * @param element The element to move\r\n */\r\nfunction moveElementUp(element: DocumentElement): void {\r\n  emit(\"move-element-up\", element);\r\n}\r\n\r\n/**\r\n * Move an element down one layer\r\n * @param element The element to move\r\n */\r\nfunction moveElementDown(element: DocumentElement): void {\r\n  emit(\"move-element-down\", element);\r\n}\r\n\r\n/**\r\n * Move an element to the top of all layers\r\n * @param element The element to move\r\n */\r\nfunction moveElementToTop(element: DocumentElement): void {\r\n  emit(\"move-element-to-top\", element);\r\n}\r\n\r\n/**\r\n * Move an element to the bottom of all layers\r\n * @param element The element to move\r\n */\r\nfunction moveElementToBottom(element: DocumentElement): void {\r\n  emit(\"move-element-to-bottom\", element);\r\n}\r\n\r\n// 8. Lifecycle Hooks\r\n/**\r\n * Handle window resize\r\n */\r\nconst handleResize = (): void => {\r\n  if (selectedElement.value) {\r\n    calculateSelectedElementPosition();\r\n  }\r\n};\r\n\r\n/**\r\n * Add window resize listener to recalculate element position\r\n */\r\nonMounted(() => {\r\n  window.addEventListener(\"resize\", handleResize);\r\n});\r\n\r\n/**\r\n * Clean up event listeners\r\n */\r\nonBeforeUnmount(() => {\r\n  window.removeEventListener(\"resize\", handleResize);\r\n});\r\n\r\n/**\r\n * Global error handler for async components\r\n */\r\nonErrorCaptured((error, instance, info) => {\r\n  console.error(\"Component error:\", error, instance, info);\r\n  return false; // prevent error from propagating\r\n});\r\n</script>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\DocumentSizeDialog.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":140,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":140,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":144,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":144,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":148,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":148,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":156,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":156,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":182,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":182,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":222,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":222,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <v-dialog v-model=\"dialog\" max-width=\"800\">\r\n    <v-card>\r\n      <v-card-title class=\"dialog-title\">\r\n        <v-icon class=\"mr-2\">mdi-file-document-outline</v-icon>\r\n        Document Size\r\n      </v-card-title>\r\n\r\n      <v-card-text>\r\n        <div class=\"document-size-container\">\r\n          <!-- Left side: Paper size selection -->\r\n          <div class=\"paper-size-column\">\r\n            <div class=\"section-title\">Paper Size</div>\r\n            <v-list density=\"compact\" class=\"paper-size-list\">\r\n              <v-list-item\r\n                v-for=\"size in paperSizes\"\r\n                :key=\"size.name\"\r\n                :value=\"size.name\"\r\n                :active=\"selectedPaperSize.name === size.name\"\r\n                class=\"paper-size-list-item\"\r\n                @click=\"selectPaperSize(size)\"\r\n              >\r\n                <template v-slot:prepend>\r\n                  <div class=\"paper-size-icon\" :style=\"getIconStyle(size)\"></div>\r\n                </template>\r\n                <v-list-item-title>{{ size.name }}</v-list-item-title>\r\n                <v-list-item-subtitle>{{ size.description }}</v-list-item-subtitle>\r\n                <template v-slot:append>\r\n                  <v-icon v-if=\"selectedPaperSize.name === size.name\" color=\"primary\">\r\n                    mdi-check\r\n                  </v-icon>\r\n                </template>\r\n              </v-list-item>\r\n            </v-list>\r\n          </div>\r\n\r\n          <!-- Right side: Preview and orientation -->\r\n          <div class=\"preview-column\">\r\n            <div class=\"section-title\">Preview</div>\r\n            <div class=\"paper-preview-container\">\r\n              <div\r\n                class=\"paper-preview-large\"\r\n                :style=\"getLargePreviewStyle(selectedPaperSize, selectedOrientation)\"\r\n              >\r\n                <div class=\"preview-content\">\r\n                  <div class=\"preview-text-line\"></div>\r\n                  <div class=\"preview-text-line\" style=\"width: 80%\"></div>\r\n                  <div class=\"preview-text-line\" style=\"width: 90%\"></div>\r\n                  <div class=\"preview-text-line\" style=\"width: 70%\"></div>\r\n                </div>\r\n                <div class=\"paper-dimensions\">\r\n                  {{ getDimensionsText(selectedPaperSize, selectedOrientation) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"orientation-selector\">\r\n              <div class=\"section-title mt-4\">Orientation</div>\r\n              <v-btn-toggle\r\n                v-model=\"selectedOrientation\"\r\n                mandatory\r\n                class=\"mt-2 orientation-toggle\"\r\n              >\r\n                <v-btn value=\"portrait\" class=\"orientation-btn\">\r\n                  <v-icon>mdi-page-layout-header</v-icon>\r\n                  <span class=\"ml-2\">Portrait</span>\r\n                </v-btn>\r\n                <v-btn value=\"landscape\" class=\"orientation-btn\">\r\n                  <v-icon>mdi-page-layout-sidebar-right</v-icon>\r\n                  <span class=\"ml-2\">Landscape</span>\r\n                </v-btn>\r\n              </v-btn-toggle>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </v-card-text>\r\n\r\n      <v-card-actions>\r\n        <v-spacer></v-spacer>\r\n        <v-btn text @click=\"cancel\">Cancel</v-btn>\r\n        <v-btn color=\"primary\" @click=\"apply\">Apply</v-btn>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch } from \"vue\";\r\nimport { PAPER_SIZES, PaperSize } from \"../../utils/paperSizes\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/documentSizeDialog.scss\";\r\n\r\nconst props = defineProps<{\r\n  modelValue: boolean;\r\n  paperSize?: string;\r\n  orientation?: \"portrait\" | \"landscape\";\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:modelValue\", value: boolean): void;\r\n  (e: \"update:paperSize\", value: string): void;\r\n  (e: \"update:orientation\", value: \"portrait\" | \"landscape\"): void;\r\n  (e: \"apply\", paperSize: string, orientation: \"portrait\" | \"landscape\"): void;\r\n}>();\r\n\r\nconst dialog = computed({\r\n  get: () => props.modelValue,\r\n  set: (value) => emit(\"update:modelValue\", value),\r\n});\r\n\r\nconst paperSizes = PAPER_SIZES;\r\n\r\n// Initialize with current paper size or default to A4\r\nconst selectedPaperSize = ref(\r\n  paperSizes.find((size) => size.name === props.paperSize) ||\r\n  paperSizes.find((size) => size.name === \"A4\") ||\r\n  paperSizes[0],\r\n);\r\n\r\nconst selectedOrientation = ref(props.orientation || \"portrait\");\r\n\r\n// Watch for changes in props\r\nwatch(() => props.paperSize, (newValue) => {\r\n  if (newValue) {\r\n    const paperSize = paperSizes.find((size) => size.name === newValue);\r\n    if (paperSize) {\r\n      selectedPaperSize.value = paperSize;\r\n    }\r\n  }\r\n}, { immediate: true });\r\n\r\nwatch(() => props.orientation, (newValue) => {\r\n  if (newValue) {\r\n    selectedOrientation.value = newValue;\r\n  }\r\n}, { immediate: true });\r\n\r\n// Functions\r\nfunction selectPaperSize(size: PaperSize) {\r\n  selectedPaperSize.value = size;\r\n}\r\n\r\nfunction cancel() {\r\n  dialog.value = false;\r\n}\r\n\r\nfunction apply() {\r\n  emit(\"update:paperSize\", selectedPaperSize.value.name);\r\n  emit(\"update:orientation\", selectedOrientation.value);\r\n  emit(\"apply\", selectedPaperSize.value.name, selectedOrientation.value);\r\n  dialog.value = false;\r\n}\r\n\r\n// Function to get the style for the paper size icon\r\nfunction getIconStyle(size: PaperSize) {\r\n  const aspectRatio = size.width / size.height;\r\n  const maxWidth = 24; // Maximum width in pixels\r\n  const maxHeight = 32; // Maximum height in pixels\r\n\r\n  let width, height;\r\n\r\n  if (aspectRatio > 1) {\r\n    // Landscape or wider paper\r\n    width = maxWidth;\r\n    height = width / aspectRatio;\r\n  } else {\r\n    // Portrait or taller paper\r\n    height = maxHeight;\r\n    width = height * aspectRatio;\r\n  }\r\n\r\n  return {\r\n    width: `${width}px`,\r\n    height: `${height}px`,\r\n    border: \"1px solid var(--v-border-color)\",\r\n    backgroundColor: \"white\",\r\n  };\r\n}\r\n\r\n// Function to get the style for the large paper preview\r\nfunction getLargePreviewStyle(size: PaperSize, orientation: \"portrait\" | \"landscape\") {\r\n  const aspectRatio = size.width / size.height;\r\n  const maxWidth = 250; // Maximum width in pixels\r\n  const maxHeight = 350; // Maximum height in pixels\r\n\r\n  let width, height;\r\n\r\n  if (orientation === \"landscape\") {\r\n    // Swap width and height for landscape\r\n    if (1/aspectRatio > 1) {\r\n      // Wider paper in landscape\r\n      width = maxWidth;\r\n      height = width * (1/aspectRatio);\r\n    } else {\r\n      // Taller paper in landscape\r\n      height = maxHeight;\r\n      width = height / (1/aspectRatio);\r\n    }\r\n  } else {\r\n    // Portrait\r\n    if (aspectRatio > 1) {\r\n      // Wider paper\r\n      width = maxWidth;\r\n      height = width / aspectRatio;\r\n    } else {\r\n      // Taller paper\r\n      height = maxHeight;\r\n      width = height * aspectRatio;\r\n    }\r\n  }\r\n\r\n  return {\r\n    width: `${width}px`,\r\n    height: `${height}px`,\r\n    border: \"1px solid var(--v-border-color)\",\r\n    backgroundColor: \"white\",\r\n  };\r\n}\r\n\r\n// Function to get the dimensions text\r\nfunction getDimensionsText(size: PaperSize, orientation: \"portrait\" | \"landscape\") {\r\n  if (orientation === \"landscape\") {\r\n    return `${size.height}px × ${size.width}px`;\r\n  } else {\r\n    return `${size.width}px × ${size.height}px`;\r\n  }\r\n}\r\n</script>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\EditorRuler.vue","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'name' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":17,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\n  <div v-show=\"visible\" class=\"ruler-container\">\n    <div ref=\"horizontalRuler\" class=\"ruler horizontal\">\n      <canvas ref=\"horizontalCanvas\"></canvas>\n    </div>\n    <div ref=\"verticalRuler\" class=\"ruler vertical\">\n      <canvas ref=\"verticalCanvas\"></canvas>\n    </div>\n    <div class=\"ruler-corner\"></div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, watch, onUnmounted } from \"vue\";\n\n// Define component name\nconst name = \"EditorRuler\";\n\n// Import styles\nimport \"../../assets/styles/components/ruler.scss\";\n\nconst props = defineProps<{\n  visible: boolean\n  zoom: number\n}>();\n\nconst horizontalRuler = ref<HTMLElement | null>(null);\nconst verticalRuler = ref<HTMLElement | null>(null);\nconst horizontalCanvas = ref<HTMLCanvasElement | null>(null);\nconst verticalCanvas = ref<HTMLCanvasElement | null>(null);\n\nconst RULER_SIZE = 20;\nconst MAJOR_TICK_INTERVAL = 100;\nconst MINOR_TICK_INTERVAL = 10;\n\nfunction drawRuler(canvas: HTMLCanvasElement, length: number, isVertical: boolean): void {\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) return;\n\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = \"#f5f5f5\";\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  ctx.beginPath();\n  ctx.strokeStyle = \"#999\";\n  ctx.lineWidth = 1;\n\n  const scale = props.zoom;\n\n  for (let i = 0; i < length; i += MINOR_TICK_INTERVAL) {\n    const pos = i * scale;\n    const isMajor = i % MAJOR_TICK_INTERVAL === 0;\n\n    if (isVertical) {\n      ctx.moveTo(RULER_SIZE - (isMajor ? 10 : 5), pos);\n      ctx.lineTo(RULER_SIZE, pos);\n\n      if (isMajor) {\n        ctx.save();\n        ctx.translate(10, pos + 4);\n        ctx.rotate(-Math.PI / 2);\n        ctx.fillStyle = \"#666\";\n        ctx.font = \"10px Arial\";\n        ctx.fillText(i.toString(), 0, 0);\n        ctx.restore();\n      }\n    } else {\n      ctx.moveTo(pos, RULER_SIZE - (isMajor ? 10 : 5));\n      ctx.lineTo(pos, RULER_SIZE);\n\n      if (isMajor) {\n        ctx.fillStyle = \"#666\";\n        ctx.font = \"10px Arial\";\n        ctx.fillText(i.toString(), pos - 10, 12);\n      }\n    }\n  }\n\n  ctx.stroke();\n}\n\nfunction updateRulers(): void {\n  if (horizontalCanvas.value && verticalCanvas.value) {\n    const parentWidth = horizontalRuler.value?.parentElement?.clientWidth || 1000;\n    const parentHeight = verticalRuler.value?.parentElement?.clientHeight || 1000;\n\n    horizontalCanvas.value.width = parentWidth;\n    horizontalCanvas.value.height = RULER_SIZE;\n    verticalCanvas.value.width = RULER_SIZE;\n    verticalCanvas.value.height = parentHeight;\n\n    drawRuler(horizontalCanvas.value, parentWidth, false);\n    drawRuler(verticalCanvas.value, parentHeight, true);\n  }\n}\n\nwatch(() => props.visible, (newValue) => {\n  if (newValue) {\n    updateRulers();\n  }\n});\n\nwatch(() => props.zoom, () => {\n  if (props.visible) {\n    updateRulers();\n  }\n});\n\nonMounted(() => {\n  if (props.visible) {\n    updateRulers();\n  }\n\n  window.addEventListener(\"resize\", updateRulers);\n});\n\nonUnmounted(() => {\n  window.removeEventListener(\"resize\", updateRulers);\n});\n</script>\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\EditorToolbar.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[861,864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[861,864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script setup lang=\"ts\">\r\n// 1. Imports\r\nimport { ref, watch } from \"vue\";\r\nimport { PAPER_SIZES } from \"../../utils/paperSizes\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/editorToolbar.scss\";\r\n\r\n// 2. Functions\r\nfunction isActive(tool: string) {\r\n  return props.activeTools.includes(tool);\r\n}\r\n\r\n// Paper size functions\r\nfunction openDocumentSizeDialog() {\r\n  emit(\"tool-clicked\", \"document-size\");\r\n}\r\n\r\n// 3. Hooks and Reactive State\r\n\r\nconst props = defineProps<{\r\n  activeTools: string[];\r\n  showGrid?: boolean;\r\n  isSaving?: boolean;\r\n  saveSuccess?: boolean;\r\n  saveError?: boolean;\r\n  saveMessage?: string;\r\n  documentTitle?: string;\r\n  documentId?: string;\r\n  paperSize?: string;\r\n  orientation?: \"portrait\" | \"landscape\";\r\n  isExportingPdf?: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"tool-clicked\", tool: string, value?: any): void;\r\n  (e: \"save\"): void;\r\n  (e: \"navigate-to-dashboard\"): void;\r\n  (e: \"delete-document\"): void;\r\n}>();\r\n\r\n// UI state\r\nconst showGrid = ref(true); // Default to true\r\n\r\n// Paper size state\r\nconst paperSizes = PAPER_SIZES;\r\nconst selectedPaperSize = ref(\r\n  paperSizes.find((size) => size.name === props.paperSize) ||\r\n    paperSizes.find((size) => size.name === \"Letter\") ||\r\n    paperSizes[0],\r\n);\r\nconst selectedOrientation = ref(props.orientation || \"portrait\");\r\n\r\n// Watch for changes to the paperSize prop\r\nwatch(\r\n  () => props.paperSize,\r\n  (newValue) => {\r\n    if (newValue) {\r\n      const paperSize = paperSizes.find((size) => size.name === newValue);\r\n      if (paperSize) {\r\n        selectedPaperSize.value = paperSize;\r\n      }\r\n    }\r\n  },\r\n  { immediate: true },\r\n);\r\n\r\n// Watch for changes to the orientation prop\r\nwatch(\r\n  () => props.orientation,\r\n  (newValue) => {\r\n    if (newValue) {\r\n      selectedOrientation.value = newValue;\r\n    }\r\n  },\r\n  { immediate: true },\r\n);\r\n\r\n// Watch for changes to the showGrid prop\r\nwatch(\r\n  () => props.showGrid,\r\n  (newValue) => {\r\n    if (newValue !== undefined) {\r\n      showGrid.value = newValue;\r\n      console.log(\"Grid visibility updated in toolbar:\", showGrid.value);\r\n    }\r\n  },\r\n  { immediate: true },\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"editor-toolbar\">\r\n    <div class=\"toolbar-group\">\r\n      <v-btn class=\"mr-2\" @click=\"$emit('navigate-to-dashboard')\">\r\n        <v-icon left>mdi-arrow-left</v-icon>\r\n        Dashboard\r\n      </v-btn>\r\n\r\n      <div class=\"document-title\">\r\n        {{ documentTitle || \"Untitled Document\" }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"toolbar-divider\"></div>\r\n\r\n    <div class=\"toolbar-group\">\r\n      <v-btn icon size=\"small\" @click=\"$emit('tool-clicked', 'add-page')\">\r\n        <v-icon>mdi-file-plus</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Add Page</v-tooltip>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"toolbar-divider\"></div>\r\n\r\n    <div class=\"toolbar-group\">\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        :color=\"isActive('text') ? 'primary' : ''\"\r\n        @click=\"$emit('tool-clicked', 'text')\"\r\n      >\r\n        <v-icon>mdi-format-text</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Add Text</v-tooltip>\r\n      </v-btn>\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        :color=\"isActive('image') ? 'primary' : ''\"\r\n        @click=\"$emit('tool-clicked', 'image')\"\r\n      >\r\n        <v-icon>mdi-image</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Add Image</v-tooltip>\r\n      </v-btn>\r\n      <v-menu>\r\n        <template v-slot:activator=\"{ props: menuProps }\">\r\n          <v-btn\r\n            icon\r\n            v-bind=\"menuProps\"\r\n            size=\"small\"\r\n            :color=\"isActive('shape') ? 'primary' : ''\"\r\n          >\r\n            <v-icon>mdi-shape</v-icon>\r\n            <v-tooltip activator=\"parent\"\n                       location=\"bottom\"\n            >Add Shape</v-tooltip>\r\n          </v-btn>\r\n        </template>\r\n        <v-list>\r\n          <v-list-item @click=\"$emit('tool-clicked', 'shape', 'rectangle')\">\r\n            <v-list-item-title>Rectangle</v-list-item-title>\r\n            <template v-slot:prepend>\r\n              <v-icon>mdi-rectangle</v-icon>\r\n            </template>\r\n          </v-list-item>\r\n          <v-list-item @click=\"$emit('tool-clicked', 'shape', 'circle')\">\r\n            <v-list-item-title>Circle</v-list-item-title>\r\n            <template v-slot:prepend>\r\n              <v-icon>mdi-circle</v-icon>\r\n            </template>\r\n          </v-list-item>\r\n          <v-list-item @click=\"$emit('tool-clicked', 'shape', 'triangle')\">\r\n            <v-list-item-title>Triangle</v-list-item-title>\r\n            <template v-slot:prepend>\r\n              <v-icon>mdi-triangle</v-icon>\r\n            </template>\r\n          </v-list-item>\r\n          <v-list-item @click=\"$emit('tool-clicked', 'shape', 'arrow')\">\r\n            <v-list-item-title>Arrow</v-list-item-title>\r\n            <template v-slot:prepend>\r\n              <v-icon>mdi-arrow-right</v-icon>\r\n            </template>\r\n          </v-list-item>\r\n        </v-list>\r\n      </v-menu>\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        :color=\"isActive('line') ? 'primary' : ''\"\r\n        @click=\"$emit('tool-clicked', 'line')\"\r\n      >\r\n        <v-icon>mdi-minus</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Add Line</v-tooltip>\r\n      </v-btn>\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        :color=\"isActive('table') ? 'primary' : ''\"\r\n        @click=\"$emit('tool-clicked', 'table')\"\r\n      >\r\n        <v-icon>mdi-table</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Add Table</v-tooltip>\r\n      </v-btn>\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        :color=\"isActive('signature') ? 'primary' : ''\"\r\n        @click=\"$emit('tool-clicked', 'signature')\"\r\n      >\r\n        <v-icon>mdi-draw</v-icon>\r\n        <v-tooltip activator=\"parent\"\n                   location=\"bottom\"\n        >Add Signature</v-tooltip>\r\n      </v-btn>\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        :color=\"isActive('form') ? 'primary' : ''\"\r\n        @click=\"$emit('tool-clicked', 'form')\"\r\n      >\r\n        <v-icon>mdi-form-select</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Add Form</v-tooltip>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"toolbar-divider\"></div>\r\n\r\n    <div class=\"toolbar-group\">\r\n      <!-- Document size button -->\r\n      <v-btn\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        class=\"document-size-btn\"\r\n        @click=\"openDocumentSizeDialog\"\r\n      >\r\n        <v-icon class=\"mr-1\">mdi-file-document-outline</v-icon>\r\n        <span>{{ selectedPaperSize.name }} ({{ selectedOrientation }})</span>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"toolbar-divider\"></div>\r\n\r\n    <v-spacer></v-spacer>\r\n\r\n    <div class=\"toolbar-group\">\r\n      <v-btn icon size=\"small\" @click=\"$emit('tool-clicked', 'zoom-in')\">\r\n        <v-icon>mdi-magnify-plus</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Zoom In</v-tooltip>\r\n      </v-btn>\r\n      <v-btn icon size=\"small\" @click=\"$emit('tool-clicked', 'zoom-out')\">\r\n        <v-icon>mdi-magnify-minus</v-icon>\r\n        <v-tooltip activator=\"parent\" location=\"bottom\">Zoom Out</v-tooltip>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"toolbar-divider\"></div>\r\n\r\n    <div class=\"toolbar-group\">\r\n      <v-btn\r\n        color=\"primary\"\r\n        :loading=\"isSaving\"\r\n        :disabled=\"isSaving\"\r\n        @click=\"$emit('save')\"\r\n      >\r\n        <v-icon left>mdi-content-save</v-icon>\r\n        Save\r\n      </v-btn>\r\n\r\n      <!-- Save status indicator -->\r\n      <div v-if=\"saveMessage\" class=\"save-status\">\r\n        <v-icon v-if=\"saveSuccess\" color=\"success\" size=\"small\">\r\n          mdi-check-circle\r\n        </v-icon>\r\n        <v-icon v-if=\"saveError\" color=\"error\" size=\"small\">\r\n          mdi-alert-circle\r\n        </v-icon>\r\n        <span\r\n          :class=\"{\r\n            'text-success': saveSuccess,\r\n            'text-error': saveError,\r\n          }\"\r\n        >\r\n          {{ saveMessage }}\r\n        </span>\r\n      </div>\r\n\r\n      <v-btn @click=\"$emit('tool-clicked', 'preview')\">\r\n        <v-icon left>mdi-eye</v-icon>\r\n        Preview\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        color=\"success\"\r\n        :loading=\"isExportingPdf\"\r\n        :disabled=\"isExportingPdf\"\r\n        @click=\"$emit('tool-clicked', 'export-pdf')\"\r\n      >\r\n        <v-icon left>mdi-file-pdf-box</v-icon>\r\n        Export PDF\r\n      </v-btn>\r\n\r\n      <!-- Only show delete button if this is an existing document (has an ID that doesn't start with 'new-doc') -->\r\n      <v-btn\r\n        v-if=\"documentId && !documentId.startsWith('new-doc')\"\r\n        color=\"error\"\r\n        class=\"ml-2\"\r\n        @click=\"$emit('delete-document')\"\r\n      >\r\n        <v-icon left>mdi-delete</v-icon>\r\n        Delete\r\n      </v-btn>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\EditorView.vue","messages":[{"ruleId":"vue/no-unused-refs","severity":1,"message":"'editorContainer' is defined as ref, but never used.","line":18,"column":16,"nodeType":"VLiteral","messageId":"unused","endLine":18,"endColumn":33},{"ruleId":"vue/no-unused-refs","severity":1,"message":"'gridLayout' is defined as ref, but never used.","line":21,"column":29,"nodeType":"VLiteral","messageId":"unused","endLine":21,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ref' is defined but never used. Allowed unused vars must match /^_/u.","line":49,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2093,2096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2093,2096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2209,2212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2209,2212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2271,2274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2271,2274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":86,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":86,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2767,2770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2767,2770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":90,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":90,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":94,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":94,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":98,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":98,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2978,2981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2978,2981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":102,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":102,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3073,3076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3073,3076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":106,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":106,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":110,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":110,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":114,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":114,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":118,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":118,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"document-editor\">\r\n    <EditorToolbar\r\n      :activeTools=\"activeTools\"\r\n      @tool-clicked=\"handleToolClick\"\r\n      @save=\"saveDocument\"\r\n    />\r\n\r\n    <div class=\"editor-container\">\r\n      <SidebarNavigation\r\n        :sections=\"document.sections\"\r\n        :currentSection=\"currentSection\"\r\n        @section-selected=\"selectSection\"\r\n        @section-added=\"addSection\"\r\n        @section-updated=\"updateSection\"\r\n      />\r\n\r\n      <div ref=\"editorContainer\" class=\"main-editor\">\r\n        <div class=\"editor-content\" :style=\"editorContentStyle\">\r\n          <template v-if=\"showGrid\">\r\n            <GridLayout ref=\"gridLayout\" />\r\n          </template>\r\n          <template v-else>\r\n            <DocumentPage\r\n              v-for=\"(section, index) in document.sections\"\r\n              :key=\"section.id\"\r\n              :section=\"section\"\r\n              :isActive=\"currentSection === index\"\r\n              @element-selected=\"selectElement\"\r\n              @element-updated=\"updateElement\"\r\n            />\r\n          </template>\r\n        </div>\r\n      </div>\r\n\r\n      <PropertiesPanel\r\n        v-if=\"selectedElement\"\r\n        :selectedElement=\"selectedElement\"\r\n        @update:element=\"updateElement\"\r\n        @delete-element=\"deleteElement\"\r\n        @duplicate-element=\"duplicateElement\"\r\n        @close=\"$emit('element-selected', null)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from \"vue\";\r\nimport EditorToolbar from \"./EditorToolbar.vue\";\r\nimport SidebarNavigation from \"./SidebarNavigation.vue\";\r\nimport DocumentPage from \"./DocumentPage.vue\";\r\nimport PropertiesPanel from \"./PropertiesPanel.vue\";\r\nimport GridLayout from \"./GridLayout.vue\";\r\nimport { Document, DocumentElement } from \"../../types/document\";\r\n\r\n// Define props and emits\r\nconst props = defineProps<{\r\n  document: Document;\r\n  currentSection: number;\r\n  selectedElement: DocumentElement | null;\r\n  activeTools: string[];\r\n  showGrid: boolean;\r\n  zoom: number;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"tool-clicked\", tool: string, value?: any): void;\r\n  (e: \"save\"): void;\r\n  (e: \"section-selected\", index: number): void;\r\n  (e: \"section-added\", section: any): void;\r\n  (e: \"section-updated\", index: number, section: any): void;\r\n  (e: \"element-selected\", element: DocumentElement | null): void;\r\n  (e: \"element-updated\", element: DocumentElement): void;\r\n  (e: \"element-deleted\", element: DocumentElement): void;\r\n  (e: \"element-duplicated\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Computed style for the editor content\r\nconst editorContentStyle = computed(() => ({\r\n  transform: `scale(${props.zoom})`,\r\n  transformOrigin: \"0 0\",\r\n}));\r\n\r\n// Event handlers\r\nfunction handleToolClick(tool: string, value?: any) {\r\n  emit(\"tool-clicked\", tool, value);\r\n}\r\n\r\nfunction saveDocument() {\r\n  emit(\"save\");\r\n}\r\n\r\nfunction selectSection(index: number) {\r\n  emit(\"section-selected\", index);\r\n}\r\n\r\nfunction addSection(section: any) {\r\n  emit(\"section-added\", section);\r\n}\r\n\r\nfunction updateSection(index: number, section: any) {\r\n  emit(\"section-updated\", index, section);\r\n}\r\n\r\nfunction selectElement(element: DocumentElement | null) {\r\n  emit(\"element-selected\", element);\r\n}\r\n\r\nfunction updateElement(element: DocumentElement) {\r\n  emit(\"element-updated\", element);\r\n}\r\n\r\nfunction deleteElement(element: DocumentElement) {\r\n  emit(\"element-deleted\", element);\r\n}\r\n\r\nfunction duplicateElement(element: DocumentElement) {\r\n  emit(\"element-duplicated\", element);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n// ... existing styles remain unchanged ...\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\ElementLayerControls.vue","messages":[{"ruleId":"vue/no-unused-properties","severity":1,"message":"'elements' of property found, but never used.","line":91,"column":3,"nodeType":"Identifier","messageId":"unused","endLine":91,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"element-layer-controls\">\r\n    <div class=\"layer-info\">\r\n      <!-- Hidden in this layout -->\r\n    </div>\r\n\r\n    <div class=\"layer-actions\">\r\n      <v-tooltip location=\"left\" content-class=\"layer-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"action-btn\"\r\n            :class=\"{ disabled: isTopLayer }\"\r\n            :disabled=\"isTopLayer\"\r\n            aria-label=\"Bring to Front\"\r\n            @click.stop=\"$emit('move-to-top', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-collapse-up</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Bring to Front</span>\r\n      </v-tooltip>\r\n\r\n      <v-tooltip location=\"left\" content-class=\"layer-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"action-btn\"\r\n            :class=\"{ disabled: isTopLayer }\"\r\n            :disabled=\"isTopLayer\"\r\n            aria-label=\"Move Up\"\r\n            @click.stop=\"$emit('move-up', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-up</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Move Up</span>\r\n      </v-tooltip>\r\n\r\n      <v-tooltip location=\"left\" content-class=\"layer-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"action-btn\"\r\n            :class=\"{ disabled: isBottomLayer }\"\r\n            :disabled=\"isBottomLayer\"\r\n            aria-label=\"Move Down\"\r\n            @click.stop=\"$emit('move-down', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-down</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Move Down</span>\r\n      </v-tooltip>\r\n\r\n      <v-tooltip location=\"left\" content-class=\"layer-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"action-btn\"\r\n            :class=\"{ disabled: isBottomLayer }\"\r\n            :disabled=\"isBottomLayer\"\r\n            aria-label=\"Send to Back\"\r\n            @click.stop=\"$emit('move-to-bottom', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-collapse-down</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Send to Back</span>\r\n      </v-tooltip>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n// 1. Imports\r\nimport { computed } from \"vue\";\r\nimport type { DocumentElement } from \"../../types/document\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/elementLayerControls.scss\";\r\n\r\n// 2. Props and Emits\r\n/**\r\n * Component props\r\n */\r\nconst props = defineProps<{\r\n  /** The currently selected element */\r\n  element: DocumentElement;\r\n  /** All elements in the current section */\r\n  elements: DocumentElement[];\r\n  /** The index of the element in the z-order stack */\r\n  layerIndex: number;\r\n  /** The total number of elements/layers */\r\n  totalLayers: number;\r\n}>();\r\n\r\n/**\r\n * Component events\r\n */\r\ndefineEmits<{\r\n  /** Move the element up one layer */\r\n  (e: \"move-up\", element: DocumentElement): void;\r\n  /** Move the element down one layer */\r\n  (e: \"move-down\", element: DocumentElement): void;\r\n  /** Move the element to the top of all layers */\r\n  (e: \"move-to-top\", element: DocumentElement): void;\r\n  /** Move the element to the bottom of all layers */\r\n  (e: \"move-to-bottom\", element: DocumentElement): void;\r\n}>();\r\n\r\n// 3. Computed Properties\r\n/**\r\n * Determines if the element is at the top of the layer stack\r\n */\r\nconst isTopLayer = computed((): boolean => props.layerIndex === props.totalLayers - 1);\r\n\r\n/**\r\n * Determines if the element is at the bottom of the layer stack\r\n */\r\nconst isBottomLayer = computed((): boolean => props.layerIndex === 0);\r\n</script>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\ElementToolbar.vue","messages":[{"ruleId":"vue/no-unused-properties","severity":1,"message":"'elements' of property found, but never used.","line":110,"column":3,"nodeType":"Identifier","messageId":"unused","endLine":110,"endColumn":11},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":186,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":186,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"element-toolbar\" :style=\"toolbarStyle\">\r\n    <div class=\"toolbar-section element-info\">\r\n      <div class=\"element-type\">\r\n        <v-icon\r\n          size=\"small\"\r\n          :icon=\"getElementIcon(element.type)\"\r\n          class=\"mr-1\"\r\n        ></v-icon>\r\n        <span>{{ getElementName(element) }}</span>\r\n      </div>\r\n      <div class=\"layer-number\">Layer {{ layerIndex + 1 }}</div>\r\n    </div>\r\n\r\n    <div class=\"toolbar-divider\"></div>\r\n\r\n    <div class=\"toolbar-section layer-controls\">\r\n      <v-tooltip location=\"bottom\" content-class=\"toolbar-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"toolbar-btn\"\r\n            :class=\"{ disabled: isBottomLayer }\"\r\n            :disabled=\"isBottomLayer\"\r\n            aria-label=\"Send to Back\"\r\n            @click.stop=\"$emit('move-to-bottom', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-collapse-down</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Send to Back</span>\r\n      </v-tooltip>\r\n\r\n      <v-tooltip location=\"bottom\" content-class=\"toolbar-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"toolbar-btn\"\r\n            :class=\"{ disabled: isBottomLayer }\"\r\n            :disabled=\"isBottomLayer\"\r\n            aria-label=\"Move Down\"\r\n            @click.stop=\"$emit('move-down', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-down</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Move Down</span>\r\n      </v-tooltip>\r\n\r\n      <v-tooltip location=\"bottom\" content-class=\"toolbar-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"toolbar-btn\"\r\n            :class=\"{ disabled: isTopLayer }\"\r\n            :disabled=\"isTopLayer\"\r\n            aria-label=\"Move Up\"\r\n            @click.stop=\"$emit('move-up', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-up</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Move Up</span>\r\n      </v-tooltip>\r\n\r\n      <v-tooltip location=\"bottom\" content-class=\"toolbar-tooltip\">\r\n        <template v-slot:activator=\"{ props }\">\r\n          <button\r\n            v-bind=\"props\"\r\n            class=\"toolbar-btn\"\r\n            :class=\"{ disabled: isTopLayer }\"\r\n            :disabled=\"isTopLayer\"\r\n            aria-label=\"Bring to Front\"\r\n            @click.stop=\"$emit('move-to-top', element)\"\r\n          >\r\n            <v-icon>mdi-arrow-collapse-up</v-icon>\r\n          </button>\r\n        </template>\r\n        <span>Bring to Front</span>\r\n      </v-tooltip>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n// 1. Imports\r\nimport { computed, ref, onMounted, onUnmounted } from \"vue\";\r\nimport type { DocumentElement } from \"../../types/document\";\r\nimport type { CSSProperties } from \"vue\";\r\nimport { getElementIcon, getElementName } from \"../../utils/elementUtils\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/elementToolbar.scss\";\r\n\r\n// 2. Types\r\n/**\r\n * Element position information for toolbar positioning\r\n */\r\ninterface ElementPosition {\r\n  top: number;\r\n  left: number;\r\n  width: number;\r\n}\r\n\r\n// 3. Props and Emits\r\nconst props = defineProps<{\r\n  /** The currently selected element */\r\n  element: DocumentElement;\r\n  /** All elements in the current section */\r\n  elements: DocumentElement[];\r\n  /** The index of the element in the z-order stack */\r\n  layerIndex: number;\r\n  /** The total number of elements/layers */\r\n  totalLayers: number;\r\n  /** Position information for the selected element */\r\n  elementPosition?: ElementPosition;\r\n}>();\r\n\r\ndefineEmits<{\r\n  /** Move the element up one layer */\r\n  (e: \"move-up\", element: DocumentElement): void;\r\n  /** Move the element down one layer */\r\n  (e: \"move-down\", element: DocumentElement): void;\r\n  /** Move the element to the top of all layers */\r\n  (e: \"move-to-top\", element: DocumentElement): void;\r\n  /** Move the element to the bottom of all layers */\r\n  (e: \"move-to-bottom\", element: DocumentElement): void;\r\n}>();\r\n\r\n// 4. Computed Properties\r\n/**\r\n * Determines if the element is at the top of the layer stack\r\n */\r\nconst isTopLayer = computed(\r\n  (): boolean => props.layerIndex === props.totalLayers - 1,\r\n);\r\n\r\n/**\r\n * Determines if the element is at the bottom of the layer stack\r\n */\r\nconst isBottomLayer = computed((): boolean => props.layerIndex === 0);\r\n\r\n/**\r\n * Calculates the toolbar position based on the element position\r\n */\r\nconst toolbarStyle = computed((): CSSProperties => {\r\n  if (!props.elementPosition) return {};\r\n\r\n  // Calculate width with min/max constraints - smaller width\r\n  const width = Math.min(Math.max(props.elementPosition.width, 220), 320);\r\n\r\n  // Calculate left position to center the toolbar\r\n  const left = Math.max(\r\n    0,\r\n    props.elementPosition.left + (props.elementPosition.width - width) / 2,\r\n  );\r\n\r\n  // Calculate top position, ensuring it's not negative\r\n  const top = Math.max(10, props.elementPosition.top - 50);\r\n\r\n  // Check if we're on a mobile device using reactive windowWidth\r\n  const isMobile = windowWidth.value <= 480;\r\n\r\n  // For mobile, we might want to position differently\r\n  if (isMobile) {\r\n    return {\r\n      left: `${Math.max(5, left)}px`,\r\n      top: `${top}px`,\r\n      width: `${Math.min(width, windowWidth.value - 20)}px`, // Ensure it fits on screen\r\n      maxWidth: \"calc(100vw - 20px)\", // Prevent overflow\r\n    };\r\n  }\r\n\r\n  return {\r\n    left: `${left}px`,\r\n    top: `${top}px`,\r\n    width: `${width}px`, // Min width 220px, max 320px\r\n  };\r\n});\r\n\r\n// 5. Reactive Window Width\r\n// Track window width for responsive adjustments\r\nconst windowWidth = ref(window.innerWidth);\r\n\r\n// Update window width on resize\r\nconst updateWindowWidth = () => {\r\n  windowWidth.value = window.innerWidth;\r\n};\r\n\r\n// Add and remove event listeners\r\nonMounted(() => {\r\n  window.addEventListener(\"resize\", updateWindowWidth);\r\n});\r\n\r\nonUnmounted(() => {\r\n  window.removeEventListener(\"resize\", updateWindowWidth);\r\n});\r\n\r\n// 6. Methods\r\n// Element icon and name functions are now imported from elementUtils.ts\r\n</script>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\GridLayout.vue","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[545,548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[545,548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":37,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":37,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":46,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":52,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":52,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":85,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'contentContainers' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":117,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":24},{"ruleId":"vue/no-unused-refs","severity":1,"message":"'contentContainer' is defined as ref, but never used.","line":215,"column":57,"nodeType":"VLiteral","messageId":"unused","endLine":215,"endColumn":75}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script setup lang=\"ts\">\r\n// 1. Imports\r\nimport { ref, onMounted, onUnmounted, watch } from \"vue\";\r\nimport { GridStack } from \"gridstack\";\r\nimport \"gridstack/dist/gridstack.min.css\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/gridLayout.scss\";\r\n\r\n// Type definitions\r\ninterface GridItem {\r\n  x: number\r\n  y: number\r\n  w: number\r\n  h: number\r\n  title: string\r\n  content: string\r\n}\r\n\r\n// 2. Functions\r\nfunction updateItemsPositions(gridItems: unknown[]): void {\r\n  gridItems.forEach((gridItem: any) => {\r\n    const index = parseInt(gridItem.el.getAttribute(\"gs-id\"), 10);\r\n    if (!isNaN(index) && items.value[index]) {\r\n      items.value[index] = {\r\n        ...items.value[index],\r\n        x: gridItem.x,\r\n        y: gridItem.y,\r\n        w: gridItem.w,\r\n        h: gridItem.h,\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction addItem() {\r\n  editingIndex.value = null;\r\n  editingItem.value = {\r\n    title: \"\",\r\n    content: \"\",\r\n  };\r\n  showAddDialog.value = true;\r\n}\r\n\r\nfunction editItem(index: number) {\r\n  editingIndex.value = index;\r\n  editingItem.value = { ...items.value[index] };\r\n  showAddDialog.value = true;\r\n}\r\n\r\nfunction saveItem() {\r\n  if (!grid) return;\r\n\r\n  const newItem: GridItem = {\r\n    x: 0,\r\n    y: 0,\r\n    w: 6,\r\n    h: 4,\r\n    title: editingItem.value.title || \"Untitled Block\",\r\n    content: editingItem.value.content || \"\",\r\n  };\r\n\r\n  if (editingIndex.value !== null) {\r\n    // Update existing item\r\n    items.value[editingIndex.value] = {\r\n      ...items.value[editingIndex.value],\r\n      ...newItem,\r\n    };\r\n    grid.update(grid.getGridItems()[editingIndex.value], newItem);\r\n  } else {\r\n    // Add new item\r\n    items.value.push(newItem);\r\n    grid.addWidget(newItem);\r\n  }\r\n\r\n  showAddDialog.value = false;\r\n  editingIndex.value = null;\r\n  editingItem.value = {\r\n    title: \"\",\r\n    content: \"\",\r\n  };\r\n}\r\n\r\nfunction removeItem(index: number) {\r\n  if (grid) {\r\n    const gridItems = grid.getGridItems();\r\n    if (gridItems[index]) {\r\n      grid.removeWidget(gridItems[index]);\r\n      items.value.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\n// Function to check if content is HTML\r\nfunction isHtmlContent(content: string): boolean {\r\n  // Simple check for HTML tags\r\n  return /<[a-z][\\s\\S]*>/i.test(content);\r\n}\r\n\r\n// Function to safely render HTML content\r\nfunction renderSafeHtml(content: string, element: HTMLElement): void {\r\n  if (!element) return;\r\n\r\n  // Sanitize HTML content using DOMPurify\r\n  const sanitizedHtml = DOMPurify.sanitize(content, {\r\n    ALLOWED_TAGS: [\"p\", \"br\", \"b\", \"i\", \"em\", \"strong\", \"a\", \"ul\", \"ol\", \"li\", \"span\", \"div\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"],\r\n    ALLOWED_ATTR: [\"href\", \"target\", \"class\", \"style\"],\r\n  });\r\n\r\n  // Set the sanitized HTML\r\n  element.innerHTML = sanitizedHtml;\r\n}\r\n\r\n// 3. Hooks and Reactive State\r\nconst gridContainer = ref<HTMLElement | null>(null);\r\nconst contentContainers = ref<HTMLElement[]>([]);\r\nconst items = ref<GridItem[]>([]);\r\nlet grid: GridStack | null = null;\r\n\r\nconst showAddDialog = ref(false);\r\nconst editingIndex = ref<number | null>(null);\r\nconst editingItem = ref<Partial<GridItem>>({\r\n  title: \"\",\r\n  content: \"\",\r\n});\r\n\r\n// Watch for changes in items to update HTML content\r\nwatch(items, () => {\r\n  // Use nextTick to ensure DOM is updated\r\n  setTimeout(() => {\r\n    const htmlContainers = document.querySelectorAll(\".html-content\");\r\n    htmlContainers.forEach((container, index) => {\r\n      if (items.value[index] && isHtmlContent(items.value[index].content)) {\r\n        renderSafeHtml(items.value[index].content, container as HTMLElement);\r\n      }\r\n    });\r\n  }, 0);\r\n}, { deep: true });\r\n\r\nonMounted(() => {\r\n  if (gridContainer.value) {\r\n    grid = GridStack.init({\r\n      column: 12,\r\n      cellHeight: 60,\r\n      animate: true,\r\n      float: true,\r\n      resizable: {\r\n        handles: \"all\",\r\n      },\r\n      draggable: {\r\n        handle: \".item-header\",\r\n      },\r\n    }, gridContainer.value.querySelector(\".grid-stack\") as HTMLElement);\r\n\r\n    grid.on(\"change\", (_event: unknown, changedItems: unknown[]) => {\r\n      updateItemsPositions(changedItems);\r\n    });\r\n\r\n    // Initial render of HTML content\r\n    setTimeout(() => {\r\n      const htmlContainers = document.querySelectorAll(\".html-content\");\r\n      htmlContainers.forEach((container, index) => {\r\n        if (items.value[index] && isHtmlContent(items.value[index].content)) {\r\n          renderSafeHtml(items.value[index].content, container as HTMLElement);\r\n        }\r\n      });\r\n    }, 0);\r\n  }\r\n});\r\n\r\nonUnmounted(() => {\r\n  if (grid) {\r\n    grid.destroy();\r\n  }\r\n});\r\n\r\n// Expose public methods\r\ndefineExpose({\r\n  addItem,\r\n  removeItem,\r\n  grid,\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div ref=\"gridContainer\" class=\"grid-layout\">\r\n    <div class=\"grid-stack\">\r\n      <div v-for=\"(item, index) in items\"\r\n           :key=\"index\"\r\n           class=\"grid-stack-item\"\r\n           :gs-x=\"item.x\"\r\n           :gs-y=\"item.y\"\r\n           :gs-w=\"item.w\"\r\n           :gs-h=\"item.h\"\r\n      >\r\n        <div class=\"grid-stack-item-content\">\r\n          <div class=\"item-header\">\r\n            <span class=\"item-title\">{{ item.title }}</span>\r\n            <div class=\"item-actions\">\r\n              <v-btn icon size=\"small\" @click=\"editItem(index)\">\r\n                <v-icon>mdi-pencil</v-icon>\r\n              </v-btn>\r\n              <v-btn icon\r\n                     size=\"small\"\r\n                     color=\"error\"\r\n                     @click=\"removeItem(index)\"\r\n              >\r\n                <v-icon>mdi-delete</v-icon>\r\n              </v-btn>\r\n            </div>\r\n          </div>\r\n          <div class=\"item-content\">\r\n            <!-- Use v-if/v-else to conditionally render HTML content safely -->\r\n            <div v-if=\"isHtmlContent(item.content)\" ref=\"contentContainer\" class=\"html-content\"></div>\r\n            <div v-else>{{ item.content }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <v-btn\r\n      color=\"primary\"\r\n      class=\"add-block-btn\"\r\n      @click=\"showAddDialog = true\"\r\n    >\r\n      <v-icon left>mdi-plus</v-icon>\r\n      Add Block\r\n    </v-btn>\r\n\r\n    <!-- Add/Edit Block Dialog -->\r\n    <v-dialog v-model=\"showAddDialog\" max-width=\"600\">\r\n      <v-card>\r\n        <v-card-title>{{ editingIndex === null ? 'Add Block' : 'Edit Block' }}</v-card-title>\r\n        <v-card-text>\r\n          <v-text-field\r\n            v-model=\"editingItem.title\"\r\n            label=\"Block Title\"\r\n            variant=\"outlined\"\r\n            density=\"comfortable\"\r\n            class=\"mb-4\"\r\n          ></v-text-field>\r\n\r\n          <v-textarea\r\n            v-model=\"editingItem.content\"\r\n            label=\"Block Content\"\r\n            variant=\"outlined\"\r\n            density=\"comfortable\"\r\n            rows=\"5\"\r\n          ></v-textarea>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showAddDialog = false\">Cancel</v-btn>\r\n          <v-btn color=\"primary\" @click=\"saveItem\">Save</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\GridOverlay.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\InlineTextFormatting.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":81,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":109,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":109,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":114,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":114,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":119,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":119,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":124,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":124,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":128,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":128,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":132,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":132,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div v-if=\"visible\" class=\"inline-formatting-toolbar\" :style=\"toolbarStyle\">\r\n    <div class=\"toolbar-buttons\">\r\n      <button \r\n        class=\"format-button\" \r\n        :class=\"{ active: isBold }\"\r\n        title=\"Bold\"\r\n        @mousedown.prevent=\"applyBold\"\r\n      >\r\n        <v-icon>mdi-format-bold</v-icon>\r\n      </button>\r\n      <button \r\n        class=\"format-button\" \r\n        :class=\"{ active: isItalic }\"\r\n        title=\"Italic\"\r\n        @mousedown.prevent=\"applyItalic\"\r\n      >\r\n        <v-icon>mdi-format-italic</v-icon>\r\n      </button>\r\n      <button \r\n        class=\"format-button\" \r\n        :class=\"{ active: isUnderline }\"\r\n        title=\"Underline\"\r\n        @mousedown.prevent=\"applyUnderline\"\r\n      >\r\n        <v-icon>mdi-format-underline</v-icon>\r\n      </button>\r\n      <div class=\"divider\"></div>\r\n      <div class=\"color-picker\">\r\n        <input \r\n          v-model=\"textColor\" \r\n          type=\"color\" \r\n          title=\"Text Color\"\r\n          @change=\"applyTextColor\"\r\n        />\r\n        <v-icon small>mdi-format-color-text</v-icon>\r\n      </div>\r\n      <div class=\"color-picker\">\r\n        <input \r\n          v-model=\"backgroundColor\" \r\n          type=\"color\" \r\n          title=\"Background Color\"\r\n          @change=\"applyBackgroundColor\"\r\n        />\r\n        <v-icon small>mdi-format-color-highlight</v-icon>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onBeforeUnmount } from \"vue\";\r\nimport { \r\n  toggleBold, \r\n  toggleItalic, \r\n  toggleUnderline, \r\n  setTextColor, \r\n  setBackgroundColor,\r\n  hasBold,\r\n  hasItalic,\r\n  hasUnderline,\r\n  getTextColor,\r\n  getBackgroundColor,\r\n} from \"../../utils/textFormatting\";\r\n\r\nconst visible = ref(false);\r\nconst position = ref({ x: 0, y: 0 });\r\nconst isBold = ref(false);\r\nconst isItalic = ref(false);\r\nconst isUnderline = ref(false);\r\nconst textColor = ref(\"#000000\");\r\nconst backgroundColor = ref(\"#ffffff\");\r\n\r\nconst toolbarStyle = computed(() => {\r\n  return {\r\n    left: `${position.value.x}px`,\r\n    top: `${position.value.y}px`,\r\n  };\r\n});\r\n\r\nfunction updateFormattingState() {\r\n  isBold.value = hasBold();\r\n  isItalic.value = hasItalic();\r\n  isUnderline.value = hasUnderline();\r\n  \r\n  const currentTextColor = getTextColor();\r\n  if (currentTextColor && currentTextColor !== \"rgb(0, 0, 0)\") {\r\n    textColor.value = rgbToHex(currentTextColor);\r\n  }\r\n  \r\n  const currentBgColor = getBackgroundColor();\r\n  if (currentBgColor && currentBgColor !== \"rgba(0, 0, 0, 0)\") {\r\n    backgroundColor.value = rgbToHex(currentBgColor);\r\n  }\r\n}\r\n\r\nfunction rgbToHex(rgb: string): string {\r\n  // Convert rgb(r, g, b) to #rrggbb\r\n  const match = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\r\n  if (match) {\r\n    const r = parseInt(match[1], 10).toString(16).padStart(2, \"0\");\r\n    const g = parseInt(match[2], 10).toString(16).padStart(2, \"0\");\r\n    const b = parseInt(match[3], 10).toString(16).padStart(2, \"0\");\r\n    return `#${r}${g}${b}`;\r\n  }\r\n  return rgb;\r\n}\r\n\r\nfunction applyBold() {\r\n  toggleBold();\r\n  isBold.value = hasBold();\r\n}\r\n\r\nfunction applyItalic() {\r\n  toggleItalic();\r\n  isItalic.value = hasItalic();\r\n}\r\n\r\nfunction applyUnderline() {\r\n  toggleUnderline();\r\n  isUnderline.value = hasUnderline();\r\n}\r\n\r\nfunction applyTextColor() {\r\n  setTextColor(textColor.value);\r\n}\r\n\r\nfunction applyBackgroundColor() {\r\n  setBackgroundColor(backgroundColor.value);\r\n}\r\n\r\nfunction handleSelectionChange() {\r\n  const selection = window.getSelection();\r\n  if (!selection || selection.rangeCount === 0 || selection.isCollapsed) {\r\n    visible.value = false;\r\n    return;\r\n  }\r\n  \r\n  // Only show the toolbar if text is selected\r\n  visible.value = true;\r\n  \r\n  // Update the toolbar position\r\n  const range = selection.getRangeAt(0);\r\n  const rect = range.getBoundingClientRect();\r\n  \r\n  position.value = {\r\n    x: rect.left + window.scrollX + (rect.width / 2) - 100, // Center the toolbar\r\n    y: rect.top + window.scrollY - 50, // Position above the selection\r\n  };\r\n  \r\n  // Update the formatting state\r\n  updateFormattingState();\r\n}\r\n\r\n// Set up event listeners\r\nonMounted(() => {\r\n  document.addEventListener(\"selectionchange\", handleSelectionChange);\r\n  document.addEventListener(\"mouseup\", handleSelectionChange);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  document.removeEventListener(\"selectionchange\", handleSelectionChange);\r\n  document.removeEventListener(\"mouseup\", handleSelectionChange);\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.inline-formatting-toolbar {\r\n  position: absolute;\r\n  z-index: 1000;\r\n  background-color: white;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  padding: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  \r\n  .toolbar-buttons {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 4px;\r\n  }\r\n  \r\n  .format-button {\r\n    background: none;\r\n    border: none;\r\n    border-radius: 4px;\r\n    padding: 4px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    \r\n    &:hover {\r\n      background-color: #f0f0f0;\r\n    }\r\n    \r\n    &.active {\r\n      background-color: #e0e0e0;\r\n      color: #1976d2;\r\n    }\r\n  }\r\n  \r\n  .divider {\r\n    width: 1px;\r\n    height: 24px;\r\n    background-color: #ccc;\r\n    margin: 0 4px;\r\n  }\r\n  \r\n  .color-picker {\r\n    position: relative;\r\n    width: 24px;\r\n    height: 24px;\r\n    \r\n    input[type=\"color\"] {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      opacity: 0;\r\n      cursor: pointer;\r\n    }\r\n    \r\n    .v-icon {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      pointer-events: none;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\LayerControlPanel.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\PdfExportDialog.vue","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4237,4240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4237,4240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":185,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":185,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'directExport' is defined but never used. Allowed unused vars must match /^_/u.","line":191,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'document' is defined but never used. Allowed unused args must match /^_/u.","line":192,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'container' is defined but never used. Allowed unused args must match /^_/u.","line":193,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":193,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":194,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":194,"endColumn":10},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":204,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":204,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <v-dialog v-model=\"dialog\" max-width=\"500px\">\r\n    <v-card>\r\n      <v-card-title class=\"text-h5\">Export to PDF</v-card-title>\r\n      <v-card-text>\r\n        <!-- Error alert -->\r\n        <v-alert\r\n          v-if=\"exportError\"\r\n          type=\"error\"\r\n          variant=\"tonal\"\r\n          closable\r\n          class=\"mb-4\"\r\n          @click:close=\"exportError = null\"\r\n        >\r\n          {{ exportError }}\r\n        </v-alert>\r\n\r\n        <v-form ref=\"form\">\r\n          <v-text-field\r\n            v-model=\"filename\"\r\n            label=\"Filename\"\r\n            :rules=\"[(v) => !!v || 'Filename is required']\"\r\n            hint=\"The name of the PDF file\"\r\n            persistent-hint\r\n            class=\"mb-4\"\r\n          ></v-text-field>\r\n\r\n          <v-select\r\n            v-model=\"paperSize\"\r\n            :items=\"paperSizes\"\r\n            label=\"Paper Size\"\r\n            class=\"mb-4\"\r\n          ></v-select>\r\n\r\n          <v-radio-group\r\n            v-model=\"orientation\"\r\n            label=\"Orientation\"\r\n            class=\"mb-4\"\r\n            inline\r\n          >\r\n            <v-radio value=\"portrait\" label=\"Portrait\"></v-radio>\r\n            <v-radio value=\"landscape\" label=\"Landscape\"></v-radio>\r\n          </v-radio-group>\r\n\r\n          <v-slider\r\n            v-model=\"quality\"\r\n            :min=\"1\"\r\n            :max=\"3\"\r\n            :step=\"1\"\r\n            label=\"Quality\"\r\n            thumb-label\r\n            class=\"mb-4\"\r\n          >\r\n            <template v-slot:thumb-label>\r\n              {{ qualityLabels[quality - 1] }}\r\n            </template>\r\n          </v-slider>\r\n\r\n          <v-switch\r\n            v-model=\"includeBackground\"\r\n            label=\"Include Background\"\r\n            class=\"mb-4\"\r\n          ></v-switch>\r\n\r\n          <v-expansion-panels variant=\"accordion\" class=\"mb-4\">\r\n            <v-expansion-panel>\r\n              <v-expansion-panel-title>Advanced Options</v-expansion-panel-title>\r\n              <v-expansion-panel-text>\r\n                <v-text-field\r\n                  v-model.number=\"margins.top\"\r\n                  label=\"Top Margin (pt)\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  class=\"mb-2\"\r\n                ></v-text-field>\r\n                <v-text-field\r\n                  v-model.number=\"margins.right\"\r\n                  label=\"Right Margin (pt)\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  class=\"mb-2\"\r\n                ></v-text-field>\r\n                <v-text-field\r\n                  v-model.number=\"margins.bottom\"\r\n                  label=\"Bottom Margin (pt)\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  class=\"mb-2\"\r\n                ></v-text-field>\r\n                <v-text-field\r\n                  v-model.number=\"margins.left\"\r\n                  label=\"Left Margin (pt)\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  class=\"mb-2\"\r\n                ></v-text-field>\r\n              </v-expansion-panel-text>\r\n            </v-expansion-panel>\r\n          </v-expansion-panels>\r\n        </v-form>\r\n      </v-card-text>\r\n      <v-card-actions>\r\n        <v-spacer></v-spacer>\r\n        <v-btn color=\"primary\"\r\n               variant=\"text\"\r\n               @click=\"closeDialog\"\r\n        >Cancel</v-btn>\r\n        <v-btn\r\n          color=\"primary\"\r\n          variant=\"elevated\"\r\n          :loading=\"isExporting\"\r\n          :disabled=\"isExporting\"\r\n          @click=\"exportPdf\"\r\n        >\r\n          Export\r\n        </v-btn>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch } from \"vue\";\r\nimport type { Document } from \"../../types/document\";\r\nimport {\r\n  exportToPdf,\r\n  type PdfExportOptions,\r\n} from \"../../services/pdfExportService\";\r\nimport { getPaperSizeByName, getLandscapeSize } from \"../../utils/paperSizes\";\r\n\r\nconst props = defineProps<{\r\n  modelValue: boolean;\r\n  document: Document;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:modelValue\", value: boolean): void;\r\n}>();\r\n\r\n// Dialog state\r\nconst dialog = computed({\r\n  get: () => props.modelValue,\r\n  set: (value) => emit(\"update:modelValue\", value),\r\n});\r\n\r\n// Form reference\r\nconst form = ref<any>(null);\r\n\r\n// Export options\r\nconst filename = ref(\r\n  props.document.title ? `${props.document.title}.pdf` : \"document.pdf\",\r\n);\r\nconst paperSize = ref(props.document.paperSize || \"A4\");\r\nconst orientation = ref(props.document.orientation || \"portrait\");\r\nconst quality = ref(2);\r\nconst includeBackground = ref(true);\r\nconst margins = ref({\r\n  top: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  left: 0,\r\n});\r\n\r\n// Available paper sizes\r\nconst paperSizes = [\"A3\", \"A4\", \"A5\", \"Letter\", \"Legal\", \"Tabloid\"];\r\n\r\n// Quality labels\r\nconst qualityLabels = [\"Draft\", \"Normal\", \"High\"];\r\n\r\n// Export state\r\nconst isExporting = ref(false);\r\nconst exportError = ref<string | null>(null);\r\n\r\n// Update filename when document title changes\r\nwatch(\r\n  () => props.document.title,\r\n  (newTitle) => {\r\n    if (newTitle) {\r\n      filename.value = `${newTitle}.pdf`;\r\n    }\r\n  },\r\n);\r\n\r\n// Close the dialog\r\nfunction closeDialog() {\r\n  dialog.value = false;\r\n}\r\n\r\n// This function is no longer needed as we're using the new PDF export service\r\n// that directly uses the preview content\r\nasync function directExport(\r\n  document: Document,\r\n  container: HTMLElement,\r\n  options: PdfExportOptions,\r\n): Promise<void> {\r\n  console.log(\"Using direct export method\");\r\n  // This is just a stub - we're not using this function anymore\r\n  throw new Error(\r\n    \"Direct export is no longer supported. Use the new PDF export service instead.\",\r\n  );\r\n}\r\n\r\n// Export the document to PDF\r\nasync function exportPdf() {\r\n  // Check if form exists before validating\r\n  if (form.value && typeof form.value.validate === \"function\") {\r\n    try {\r\n      const { valid } = await form.value.validate();\r\n      if (!valid) return;\r\n    } catch (error) {\r\n      console.error(\"Form validation error:\", error);\r\n      // Continue anyway since this isn't critical\r\n    }\r\n  }\r\n\r\n  isExporting.value = true;\r\n  exportError.value = null; // Clear any previous error\r\n\r\n  try {\r\n    // First, we need to create a preview of the document\r\n    // We'll create a temporary dialog that contains the preview\r\n    const previewDialog = window.document.createElement(\"div\");\r\n    previewDialog.style.position = \"fixed\";\r\n    previewDialog.style.top = \"-9999px\";\r\n    previewDialog.style.left = \"-9999px\";\r\n    previewDialog.style.width = \"100%\";\r\n    previewDialog.style.height = \"100%\";\r\n    previewDialog.style.zIndex = \"-1\";\r\n    previewDialog.style.opacity = \"0\";\r\n    window.document.body.appendChild(previewDialog);\r\n\r\n    // Create the preview content container\r\n    const previewContent = window.document.createElement(\"div\");\r\n    previewContent.className = \"preview-pages\";\r\n    previewContent.style.display = \"flex\";\r\n    previewContent.style.flexDirection = \"column\";\r\n    previewContent.style.alignItems = \"center\";\r\n    previewContent.style.gap = \"24px\";\r\n    previewContent.style.padding = \"24px\";\r\n    previewContent.style.backgroundColor = \"var(--surface, #f5f5f5)\";\r\n    previewDialog.appendChild(previewContent);\r\n\r\n    // Use the selected paper size and orientation\r\n    // These will be passed to the export function via options\r\n    const paperSizeName = paperSize.value;\r\n    const orientationValue = orientation.value;\r\n\r\n    // Get the paper size dimensions for preview rendering\r\n    let paperSizeObj = getPaperSizeByName(paperSizeName);\r\n    if (orientationValue === \"landscape\") {\r\n      paperSizeObj = getLandscapeSize(paperSizeObj);\r\n    }\r\n\r\n    // Create a preview page for each section\r\n    for (const section of props.document.sections) {\r\n      // Create the page container\r\n      const pageDiv = window.document.createElement(\"div\");\r\n      pageDiv.className = \"preview-page\";\r\n      pageDiv.style.width = `${paperSizeObj.width}px`;\r\n      pageDiv.style.minHeight = `${paperSizeObj.height}px`;\r\n      pageDiv.style.backgroundColor = \"white\";\r\n      pageDiv.style.position = \"relative\";\r\n      pageDiv.style.boxSizing = \"border-box\";\r\n      pageDiv.style.margin = \"16px auto\";\r\n      pageDiv.style.boxShadow = \"0 4px 6px rgba(0, 0, 0, 0.1)\";\r\n\r\n      // Create the page content container\r\n      const contentDiv = window.document.createElement(\"div\");\r\n      contentDiv.className = \"page-content\";\r\n      contentDiv.style.position = \"relative\";\r\n      contentDiv.style.minHeight = \"100%\";\r\n      contentDiv.style.padding = \"24px\";\r\n      contentDiv.style.backgroundColor = \"white\";\r\n      contentDiv.style.boxSizing = \"border-box\";\r\n\r\n      // Create the elements container\r\n      const elementsDiv = window.document.createElement(\"div\");\r\n      elementsDiv.className = \"elements-container\";\r\n      elementsDiv.style.position = \"relative\";\r\n      elementsDiv.style.minHeight = \"inherit\";\r\n\r\n      // Sort elements by zIndex\r\n      const sortedElements = [...section.elements].sort((a, b) => {\r\n        const zIndexA = a.zIndex ?? 0;\r\n        const zIndexB = b.zIndex ?? 0;\r\n        return zIndexA - zIndexB;\r\n      });\r\n\r\n      // Add each element to the page\r\n      for (const element of sortedElements) {\r\n        // Create a container for the element - adjust positions to remove ruler space\r\n        const elementContainer = window.document.createElement(\"div\");\r\n        elementContainer.style.position = \"absolute\";\r\n\r\n        // Explicitly subtract 30px from both x and y to remove ruler space\r\n        elementContainer.style.left = `${Math.max(\r\n          0,\r\n          element.position.x - 30,\r\n        )}px`;\r\n        elementContainer.style.top = `${Math.max(\r\n          0,\r\n          element.position.y - 30,\r\n        )}px`;\r\n        elementContainer.style.width = `${element.size.width}px`;\r\n        elementContainer.style.height = `${element.size.height}px`;\r\n        elementContainer.style.zIndex = `${element.zIndex || 0}`;\r\n\r\n        // Add content based on element type\r\n        if (element.type === \"text\") {\r\n          elementContainer.innerHTML = element.content || \"\";\r\n\r\n          // Apply text styles\r\n          if (element.style) {\r\n            Object.entries(element.style).forEach(([key, value]) => {\r\n              if (value !== undefined && value !== null) {\r\n                switch (key) {\r\n                case \"fontFamily\":\r\n                  elementContainer.style.fontFamily = value as string;\r\n                  break;\r\n                case \"fontSize\":\r\n                  elementContainer.style.fontSize = `${value}px`;\r\n                  break;\r\n                case \"bold\":\r\n                  if (value) elementContainer.style.fontWeight = \"bold\";\r\n                  break;\r\n                case \"italic\":\r\n                  if (value) elementContainer.style.fontStyle = \"italic\";\r\n                  break;\r\n                case \"underline\":\r\n                  if (value)\r\n                    elementContainer.style.textDecoration = \"underline\";\r\n                  break;\r\n                case \"color\":\r\n                  elementContainer.style.color = value as string;\r\n                  break;\r\n                case \"backgroundColor\":\r\n                  elementContainer.style.backgroundColor = value as string;\r\n                  break;\r\n                case \"textAlign\":\r\n                  elementContainer.style.textAlign = value as string;\r\n                  break;\r\n                case \"lineHeight\":\r\n                  elementContainer.style.lineHeight = value as string;\r\n                  break;\r\n                case \"letterSpacing\":\r\n                  elementContainer.style.letterSpacing = `${value}px`;\r\n                  break;\r\n                case \"textIndent\":\r\n                  elementContainer.style.textIndent = `${value}px`;\r\n                  break;\r\n                case \"paragraphIndent\":\r\n                  elementContainer.style.marginLeft = `${value}px`;\r\n                  break;\r\n                case \"listType\":\r\n                  if (value === \"bullet\") {\r\n                    elementContainer.style.listStyleType = \"disc\";\r\n                    elementContainer.style.listStylePosition = \"inside\";\r\n                    elementContainer.style.display = \"list-item\";\r\n                    elementContainer.style.paddingLeft = \"20px\";\r\n                  } else if (value === \"number\") {\r\n                    elementContainer.style.listStyleType = \"decimal\";\r\n                    elementContainer.style.listStylePosition = \"inside\";\r\n                    elementContainer.style.display = \"list-item\";\r\n                    elementContainer.style.paddingLeft = \"20px\";\r\n                  }\r\n                  break;\r\n                }\r\n              }\r\n            });\r\n          }\r\n        } else if (element.type === \"image\") {\r\n          // Create a container for the image to handle background color and borders\r\n          const imgContainer = window.document.createElement(\"div\");\r\n          imgContainer.style.width = \"100%\";\r\n          imgContainer.style.height = \"100%\";\r\n          imgContainer.style.overflow = \"hidden\";\r\n          imgContainer.style.position = \"relative\"; // Important for absolute positioning of the image\r\n\r\n          // Apply background color if specified\r\n          if (element.style?.backgroundColor) {\r\n            imgContainer.style.backgroundColor = element.style.backgroundColor;\r\n          }\r\n\r\n          // Apply border if specified\r\n          if (element.style?.borderWidth) {\r\n            imgContainer.style.border = `${element.style.borderWidth}px solid ${\r\n              element.style.borderColor || \"#000000\"\r\n            }`;\r\n            imgContainer.style.boxSizing = \"border-box\";\r\n          }\r\n\r\n          // Apply border radius if specified\r\n          if (element.style?.borderRadius) {\r\n            imgContainer.style.borderRadius = `${element.style.borderRadius}px`;\r\n          }\r\n\r\n          // Create the image element\r\n          const img = window.document.createElement(\"img\");\r\n          img.src = element.content || \"\";\r\n          img.crossOrigin = \"anonymous\"; // Add CORS support\r\n\r\n          // Set image styles based on object-fit property\r\n          const objectFit = element.style?.objectFit || \"contain\";\r\n\r\n          // Special handling for maintaining aspect ratio while fitting height\r\n          if (objectFit === \"contain\") {\r\n            // For contain, we want to maintain aspect ratio while ensuring the image fits within the container\r\n            img.style.objectFit = \"contain\";\r\n            img.style.height = \"100%\"; // Always fit the height\r\n            img.style.width = \"auto\"; // Let width adjust to maintain aspect ratio\r\n            img.style.maxWidth = \"none\"; // Allow width to exceed container if needed\r\n            img.style.position = \"absolute\";\r\n            img.style.top = \"0\";\r\n            img.style.left = \"50%\";\r\n            img.style.transform = \"translateX(-50%)\"; // Center horizontally\r\n          } else if (objectFit === \"cover\") {\r\n            // For cover, we want to fill the container while maintaining aspect ratio\r\n            img.style.objectFit = \"cover\";\r\n            img.style.width = \"100%\";\r\n            img.style.height = \"100%\";\r\n            img.style.position = \"absolute\";\r\n            img.style.top = \"0\";\r\n            img.style.left = \"0\";\r\n          } else if (objectFit === \"fill\") {\r\n            // For fill, we want to stretch the image to fill the container\r\n            img.style.width = \"100%\";\r\n            img.style.height = \"100%\";\r\n            img.style.objectFit = \"fill\";\r\n          } else if (objectFit === \"none\") {\r\n            // For none, we show the image at its natural size\r\n            img.style.maxHeight = \"100%\"; // Limit height to container\r\n            img.style.width = \"auto\"; // Let width adjust to maintain aspect ratio\r\n            img.style.position = \"absolute\";\r\n            img.style.top = \"50%\";\r\n            img.style.left = \"50%\";\r\n            img.style.transform = \"translate(-50%, -50%)\";\r\n          } else if (objectFit === \"scale-down\") {\r\n            // For scale-down, we show the image at its natural size or scaled down if too large\r\n            img.style.maxHeight = \"100%\"; // Limit height to container\r\n            img.style.width = \"auto\"; // Let width adjust to maintain aspect ratio\r\n            img.style.maxWidth = \"none\"; // Allow width to exceed container if needed\r\n            img.style.position = \"absolute\";\r\n            img.style.top = \"50%\";\r\n            img.style.left = \"50%\";\r\n            img.style.transform = \"translate(-50%, -50%)\";\r\n          }\r\n\r\n          // Apply additional image styles\r\n          if (element.style?.borderRadius) {\r\n            img.style.borderRadius = `${element.style.borderRadius}px`;\r\n          }\r\n\r\n          // Ensure image is visible\r\n          img.style.display = \"block\";\r\n          img.style.visibility = \"visible\";\r\n\r\n          // Add the image to the container\r\n          imgContainer.appendChild(img);\r\n\r\n          // Add the container to the element container\r\n          elementContainer.appendChild(imgContainer);\r\n        } else if (element.type === \"shape\") {\r\n          // Create an SVG element for the shape\r\n          const svg = window.document.createElementNS(\r\n            \"http://www.w3.org/2000/svg\",\r\n            \"svg\",\r\n          );\r\n          svg.setAttribute(\"width\", \"100%\");\r\n          svg.setAttribute(\"height\", \"100%\");\r\n          svg.setAttribute(\r\n            \"viewBox\",\r\n            `0 0 ${element.size.width} ${element.size.height}`,\r\n          );\r\n          svg.style.display = \"block\";\r\n\r\n          // Get shape properties\r\n          const width = element.size.width;\r\n          const height = element.size.height;\r\n          const fill = element.style?.fill || \"#E2E8F0\";\r\n          const stroke = element.style?.stroke || \"#CBD5E1\";\r\n          const strokeWidth = element.style?.strokeWidth || 1;\r\n          const shapeType = element.content || \"rectangle\";\r\n          const rotation = element.style?.rotation || 0;\r\n\r\n          // Create the appropriate shape\r\n          let shapeElement;\r\n\r\n          switch (shapeType) {\r\n          case \"rectangle\":\r\n            shapeElement = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"rect\",\r\n            );\r\n            shapeElement.setAttribute(\"x\", \"0\");\r\n            shapeElement.setAttribute(\"y\", \"0\");\r\n            shapeElement.setAttribute(\"width\", width.toString());\r\n            shapeElement.setAttribute(\"height\", height.toString());\r\n            shapeElement.setAttribute(\r\n              \"rx\",\r\n              (element.style?.borderRadius || 0).toString(),\r\n            );\r\n            break;\r\n\r\n          case \"circle\":\r\n            shapeElement = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"ellipse\",\r\n            );\r\n            shapeElement.setAttribute(\"cx\", (width / 2).toString());\r\n            shapeElement.setAttribute(\"cy\", (height / 2).toString());\r\n            shapeElement.setAttribute(\"rx\", (width / 2).toString());\r\n            shapeElement.setAttribute(\"ry\", (height / 2).toString());\r\n            break;\r\n\r\n          case \"triangle\":\r\n            shapeElement = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"polygon\",\r\n            );\r\n            const points = `${width / 2},0 ${width},${height} 0,${height}`;\r\n            shapeElement.setAttribute(\"points\", points);\r\n            break;\r\n\r\n          case \"line\":\r\n            shapeElement = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"line\",\r\n            );\r\n            shapeElement.setAttribute(\"x1\", \"0\");\r\n            shapeElement.setAttribute(\"y1\", (height / 2).toString());\r\n            shapeElement.setAttribute(\"x2\", width.toString());\r\n            shapeElement.setAttribute(\"y2\", (height / 2).toString());\r\n            break;\r\n\r\n          case \"arrow\":\r\n            shapeElement = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"path\",\r\n            );\r\n            const arrowPath = `M0,${height / 2} L${width - 10},${\r\n              height / 2\r\n            } L${width - 15},${height / 4} L${width},${height / 2} L${\r\n              width - 15\r\n            },${(3 * height) / 4} L${width - 10},${height / 2}`;\r\n            shapeElement.setAttribute(\"d\", arrowPath);\r\n            break;\r\n\r\n          default:\r\n            shapeElement = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"rect\",\r\n            );\r\n            shapeElement.setAttribute(\"x\", \"0\");\r\n            shapeElement.setAttribute(\"y\", \"0\");\r\n            shapeElement.setAttribute(\"width\", width.toString());\r\n            shapeElement.setAttribute(\"height\", height.toString());\r\n            break;\r\n          }\r\n\r\n          // Apply styles to the shape\r\n          shapeElement.setAttribute(\"fill\", fill);\r\n          shapeElement.setAttribute(\"stroke\", stroke);\r\n          shapeElement.setAttribute(\"stroke-width\", strokeWidth.toString());\r\n\r\n          // Apply line style if applicable\r\n          if (shapeType === \"line\" && element.style?.lineStyle) {\r\n            switch (element.style.lineStyle) {\r\n            case \"dashed\":\r\n              shapeElement.setAttribute(\"stroke-dasharray\", \"8,4\");\r\n              break;\r\n            case \"dotted\":\r\n              shapeElement.setAttribute(\"stroke-dasharray\", \"2,2\");\r\n              break;\r\n            default:\r\n              shapeElement.setAttribute(\"stroke-dasharray\", \"none\");\r\n            }\r\n          }\r\n\r\n          // Apply rotation if needed\r\n          if (rotation !== 0) {\r\n            const g = window.document.createElementNS(\r\n              \"http://www.w3.org/2000/svg\",\r\n              \"g\",\r\n            );\r\n            g.setAttribute(\r\n              \"transform\",\r\n              `rotate(${rotation} ${width / 2} ${height / 2})`,\r\n            );\r\n            g.appendChild(shapeElement);\r\n            svg.appendChild(g);\r\n          } else {\r\n            svg.appendChild(shapeElement);\r\n          }\r\n\r\n          // Add the SVG to the element container\r\n          elementContainer.appendChild(svg);\r\n        } else if (element.type === \"table\") {\r\n          elementContainer.innerHTML = element.content || \"\";\r\n        } else if (element.type === \"signature\") {\r\n          if (element.content) {\r\n            // Create a container for the signature to handle background color\r\n            const signatureContainer = window.document.createElement(\"div\");\r\n            signatureContainer.style.width = \"100%\";\r\n            signatureContainer.style.height = \"100%\";\r\n            signatureContainer.style.overflow = \"hidden\";\r\n            signatureContainer.style.position = \"relative\"; // Important for absolute positioning\r\n\r\n            // Apply background color if specified\r\n            if (element.style?.backgroundColor) {\r\n              signatureContainer.style.backgroundColor =\r\n                element.style.backgroundColor;\r\n            }\r\n\r\n            // Create the image element\r\n            const img = window.document.createElement(\"img\");\r\n            img.src = element.content;\r\n            img.crossOrigin = \"anonymous\"; // Add CORS support\r\n\r\n            // Set image styles for proper display\r\n            img.style.objectFit = \"contain\";\r\n            img.style.width = \"100%\";\r\n            img.style.height = \"100%\";\r\n            img.style.position = \"absolute\";\r\n            img.style.top = \"0\";\r\n            img.style.left = \"0\";\r\n\r\n            // Ensure image is visible\r\n            img.style.display = \"block\";\r\n            img.style.visibility = \"visible\";\r\n\r\n            signatureContainer.appendChild(img);\r\n            elementContainer.appendChild(signatureContainer);\r\n          } else {\r\n            elementContainer.style.border = \"1px dashed #999\";\r\n          }\r\n        } else if (element.type === \"form\") {\r\n          elementContainer.style.border = \"1px solid #ddd\";\r\n          elementContainer.style.borderRadius = \"4px\";\r\n          elementContainer.style.backgroundColor = \"#f9f9f9\";\r\n\r\n          if (element.formType === \"textfield\") {\r\n            const input = window.document.createElement(\"input\");\r\n            input.type = \"text\";\r\n            input.style.width = \"100%\";\r\n            input.style.height = \"100%\";\r\n            input.style.boxSizing = \"border-box\";\r\n            input.style.border = \"none\";\r\n            input.style.backgroundColor = \"transparent\";\r\n            input.value = element.value || \"\";\r\n            input.disabled = true;\r\n            elementContainer.appendChild(input);\r\n          } else if (element.formType === \"checkbox\") {\r\n            const checkbox = window.document.createElement(\"input\");\r\n            checkbox.type = \"checkbox\";\r\n            checkbox.style.width = \"20px\";\r\n            checkbox.style.height = \"20px\";\r\n            checkbox.style.margin = \"auto\";\r\n            checkbox.style.position = \"absolute\";\r\n            checkbox.style.top = \"50%\";\r\n            checkbox.style.left = \"50%\";\r\n            checkbox.style.transform = \"translate(-50%, -50%)\";\r\n            checkbox.checked = element.checked || false;\r\n            checkbox.disabled = true;\r\n            elementContainer.appendChild(checkbox);\r\n          }\r\n        }\r\n\r\n        // Add the element to the page\r\n        elementsDiv.appendChild(elementContainer);\r\n      }\r\n\r\n      // Add the elements container to the page content\r\n      contentDiv.appendChild(elementsDiv);\r\n\r\n      // Add the page content to the page\r\n      pageDiv.appendChild(contentDiv);\r\n\r\n      // Add the page to the preview content\r\n      previewContent.appendChild(pageDiv);\r\n    }\r\n\r\n    // Prepare export options\r\n    const options: PdfExportOptions = {\r\n      filename: filename.value.endsWith(\".pdf\")\r\n        ? filename.value\r\n        : `${filename.value}.pdf`,\r\n      includeBackground: includeBackground.value,\r\n      quality: quality.value,\r\n      margins: margins.value,\r\n      // Use the already selected paper size and orientation\r\n      paperSize: paperSize.value,\r\n      orientation: orientation.value,\r\n    };\r\n\r\n    // Export the document to PDF\r\n    await exportToPdf(props.document, previewContent, options);\r\n\r\n    // Clean up the temporary preview dialog\r\n    window.document.body.removeChild(previewDialog);\r\n\r\n    // Close the dialog\r\n    closeDialog();\r\n  } catch (error) {\r\n    console.error(\"Error exporting PDF:\", error);\r\n\r\n    // Get more detailed error information\r\n    let errorMessage = \"Failed to export PDF. \";\r\n\r\n    if (error instanceof Error) {\r\n      console.error(\"Error details:\", error.message);\r\n      console.error(\"Error stack:\", error.stack);\r\n      errorMessage += error.message;\r\n    }\r\n\r\n    // Check for specific error types\r\n    if (error instanceof TypeError) {\r\n      console.error(\r\n        \"Type error detected. This might be related to missing properties or methods.\",\r\n      );\r\n    } else if (error instanceof ReferenceError) {\r\n      console.error(\r\n        \"Reference error detected. This might be related to undefined variables.\",\r\n      );\r\n    }\r\n\r\n    // Set error message to be displayed in the UI\r\n    exportError.value = errorMessage;\r\n  } finally {\r\n    isExporting.value = false;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.v-card-text {\r\n  padding-top: 20px;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\PreviewDialog.vue","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'html2canvas' is defined but never used. Allowed unused vars must match /^_/u.","line":54,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'jsPDF' is defined but never used. Allowed unused vars must match /^_/u.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":142,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":142,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":162,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":162,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4532,4535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4532,4535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":174,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":174,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <v-dialog\r\n    v-model=\"dialog\"\r\n    fullscreen\r\n    hide-overlay\r\n    transition=\"dialog-bottom-transition\"\r\n  >\r\n    <v-card>\r\n      <v-toolbar dark color=\"primary\">\r\n        <v-btn icon dark @click=\"closePreview\">\r\n          <v-icon>mdi-close</v-icon>\r\n        </v-btn>\r\n        <v-toolbar-title>Preview</v-toolbar-title>\r\n        <v-spacer></v-spacer>\r\n      </v-toolbar>\r\n\r\n      <v-container fluid>\r\n        <div ref=\"previewContent\" class=\"preview-pages\">\r\n          <div\r\n            v-for=\"(section, index) in document.sections\"\r\n            :key=\"section.id\"\r\n            class=\"preview-page\"\r\n            :style=\"pageStyle\"\r\n          >\r\n            <!-- Page content without rulers -->\r\n            <div class=\"page-content\">\r\n              <div class=\"elements-container\">\r\n                <component\r\n                  :is=\"getElementComponent(element.type)\"\r\n                  v-for=\"element in getSortedElements(section.elements)\"\r\n                  :key=\"element.id\"\r\n                  :element=\"{\r\n                    ...element,\r\n                    position: {\r\n                      x: Math.max(0, element.position.x - 30),\r\n                      y: Math.max(0, element.position.y - 30)\r\n                    }\r\n                  }\"\r\n                  :isSelected=\"false\"\r\n                  :isPreview=\"true\"\r\n                  :style=\"{ zIndex: element.zIndex || 0 }\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </v-container>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, defineAsyncComponent, watch, computed } from \"vue\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport type { Document } from \"../../types/document\";\r\nimport { getPaperSizeByName, getLandscapeSize } from \"../../utils/paperSizes\";\r\n\r\nconst props = defineProps<{\r\n  modelValue: boolean;\r\n  document: Document;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:modelValue\", value: boolean): void;\r\n}>();\r\n\r\nconst dialog = ref(props.modelValue);\r\nconst previewContent = ref<HTMLElement | null>(null);\r\n\r\n// Page dimensions based on paper size\r\nconst pageWidth = computed(() => {\r\n  const paperSizeName = props.document.paperSize || \"Letter\";\r\n  const orientation = props.document.orientation || \"portrait\";\r\n\r\n  let paperSize = getPaperSizeByName(paperSizeName);\r\n\r\n  // Apply orientation\r\n  if (orientation === \"landscape\") {\r\n    paperSize = getLandscapeSize(paperSize);\r\n  }\r\n\r\n  return paperSize.width; // Return raw pixel value\r\n});\r\n\r\nconst pageHeight = computed(() => {\r\n  const paperSizeName = props.document.paperSize || \"Letter\";\r\n  const orientation = props.document.orientation || \"portrait\";\r\n\r\n  let paperSize = getPaperSizeByName(paperSizeName);\r\n\r\n  // Apply orientation\r\n  if (orientation === \"landscape\") {\r\n    paperSize = getLandscapeSize(paperSize);\r\n  }\r\n\r\n  return paperSize.height; // Return raw pixel value\r\n});\r\n\r\n// Computed style for the page\r\nconst pageStyle = computed(() => {\r\n  return {\r\n    width: `${pageWidth.value - 30}px`, // Subtract ruler width\r\n    height: `${pageHeight.value - 30}px`, // Subtract ruler height instead of minHeight\r\n    overflow: \"hidden\", // Hide content that goes outside the document boundaries\r\n  };\r\n});\r\n\r\nwatch(\r\n  () => props.modelValue,\r\n  (value) => {\r\n    dialog.value = value;\r\n  },\r\n);\r\n\r\nwatch(\r\n  () => dialog.value,\r\n  (value) => {\r\n    emit(\"update:modelValue\", value);\r\n  },\r\n);\r\n\r\nconst TextElement = defineAsyncComponent(\r\n  () => import(\"./elements/TextElement.vue\"),\r\n);\r\nconst ImageElement = defineAsyncComponent(\r\n  () => import(\"./elements/ImageElement.vue\"),\r\n);\r\nconst ShapeElement = defineAsyncComponent(\r\n  () => import(\"./elements/ShapeElement.vue\"),\r\n);\r\nconst TableElement = defineAsyncComponent(\r\n  () => import(\"./elements/SimpleTableElement.vue\"),\r\n);\r\nconst SignatureElement = defineAsyncComponent(\r\n  () => import(\"./elements/SignatureElement.vue\"),\r\n);\r\nconst FormElement = defineAsyncComponent(\r\n  () => import(\"./elements/FormElement.vue\"),\r\n);\r\n\r\nfunction getElementComponent(type: string) {\r\n  switch (type) {\r\n  case \"text\":\r\n    return TextElement;\r\n  case \"image\":\r\n    return ImageElement;\r\n  case \"shape\":\r\n    return ShapeElement;\r\n  case \"table\":\r\n    return TableElement;\r\n  case \"signature\":\r\n    return SignatureElement;\r\n  case \"form\":\r\n    return FormElement;\r\n  default:\r\n    return null;\r\n  }\r\n}\r\n\r\n// Sort elements by zIndex for proper layering\r\nfunction getSortedElements(elements: any[]) {\r\n  if (!elements || !Array.isArray(elements)) return [];\r\n\r\n  // Make a copy of the elements array to avoid modifying the original\r\n  return [...elements].sort((a, b) => {\r\n    // Default zIndex to 0 if not set\r\n    const zIndexA = a.zIndex ?? 0;\r\n    const zIndexB = b.zIndex ?? 0;\r\n    return zIndexA - zIndexB;\r\n  });\r\n}\r\n\r\nfunction closePreview() {\r\n  dialog.value = false;\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.preview-pages {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 24px;\r\n  padding: 24px;\r\n  background-color: var(--surface);\r\n}\r\n\r\n.preview-page {\r\n  background-color: var(--background);\r\n  box-shadow: var(--shadow-md);\r\n  margin: 16px auto;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  padding: 0; /* No padding for rulers */\r\n  overflow: hidden; /* Hide content that goes outside the document boundaries */\r\n\r\n  .page-content {\r\n    position: relative;\r\n    height: 100%; /* Use fixed height instead of min-height */\r\n    width: 100%;\r\n    padding: 0; /* No padding for rulers */\r\n    margin: 0; /* No margin for rulers */\r\n    background-color: white;\r\n    box-sizing: border-box;\r\n    overflow: hidden; /* Hide content that goes outside the document boundaries */\r\n  }\r\n\r\n  .elements-container {\r\n    position: relative;\r\n    height: 100%; /* Use fixed height instead of min-height */\r\n    width: 100%;\r\n    padding: 0; /* No padding for rulers */\r\n    margin: 0; /* No margin for rulers */\r\n    overflow: hidden; /* Hide content that goes outside the document boundaries */\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\PropertiesPanel.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":62,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":62,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":70,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":70,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":78,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":78,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":82,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":82,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":87,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":87,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script setup lang=\"ts\">\r\n// 1. Imports\r\nimport { ref, watch } from \"vue\";\r\nimport { DocumentElement } from \"../../types/document\";\r\nimport TextProperties from \"./properties/TextProperties.vue\";\r\nimport ImageProperties from \"./properties/ImageProperties.vue\";\r\nimport ShapeProperties from \"./properties/ShapeProperties.vue\";\r\nimport TableProperties from \"./properties/TableProperties.vue\";\r\nimport FormProperties from \"./properties/FormProperties.vue\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/propertiesPanel.scss\";\r\n\r\n// 2. Functions\r\nfunction getPropertiesComponent(type: string) {\r\n  switch (type) {\r\n  case \"text\":\r\n    return TextProperties;\r\n  case \"image\":\r\n    return ImageProperties;\r\n  case \"shape\":\r\n    return ShapeProperties;\r\n  case \"table\":\r\n    return TableProperties;\r\n  case \"form\":\r\n    return FormProperties;\r\n  default:\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction formatElementType(type: string): string {\r\n  return type.charAt(0).toUpperCase() + type.slice(1) + \" Element\";\r\n}\r\n\r\n// 3. Hooks and Reactive State\r\nconst props = defineProps<{\r\n  selectedElement: DocumentElement | null;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n  (e: \"delete-element\", element: DocumentElement): void;\r\n  (e: \"duplicate-element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst position = ref({ x: 0, y: 0 });\r\nconst size = ref({ width: 0, height: 0 });\r\n\r\nwatch(\r\n  () => props.selectedElement,\r\n  (newValue) => {\r\n    if (newValue) {\r\n      position.value = { ...newValue.position };\r\n      size.value = { ...newValue.size };\r\n    }\r\n  },\r\n  { immediate: true, deep: true },\r\n);\r\n\r\n// Simplified update functions\r\nfunction updatePosition() {\r\n  if (!props.selectedElement) return;\r\n  emit(\"update:element\", {\r\n    ...props.selectedElement,\r\n    position: { ...position.value },\r\n  });\r\n}\r\n\r\nfunction updateSize() {\r\n  if (!props.selectedElement) return;\r\n  emit(\"update:element\", {\r\n    ...props.selectedElement,\r\n    size: { ...size.value },\r\n  });\r\n}\r\n\r\nfunction updateElement(element: DocumentElement) {\r\n  emit(\"update:element\", element);\r\n}\r\n\r\nfunction deleteElement() {\r\n  if (!props.selectedElement) return;\r\n  emit(\"delete-element\", props.selectedElement);\r\n}\r\n\r\nfunction duplicateElement() {\r\n  if (!props.selectedElement) return;\r\n  emit(\"duplicate-element\", props.selectedElement);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"selectedElement\" class=\"properties-panel\">\r\n    <div class=\"panel-header\">\r\n      <h3 class=\"panel-title\">Properties</h3>\r\n    </div>\r\n\r\n    <div class=\"panel-content\">\r\n      <div class=\"element-type\">\r\n        {{ formatElementType(selectedElement.type) }}\r\n      </div>\r\n\r\n      <v-divider class=\"my-4\"></v-divider>\r\n\r\n      <!-- Position and size controls -->\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">Position & Size</div>\r\n        <div class=\"property-row\">\r\n          <v-text-field\r\n            v-model.number=\"position.x\"\r\n            label=\"X\"\r\n            type=\"number\"\r\n            density=\"compact\"\r\n            variant=\"outlined\"\r\n            hide-details\r\n            class=\"position-input\"\r\n            @update:model-value=\"updatePosition\"\r\n          ></v-text-field>\r\n          <v-text-field\r\n            v-model.number=\"position.y\"\r\n            label=\"Y\"\r\n            type=\"number\"\r\n            density=\"compact\"\r\n            variant=\"outlined\"\r\n            hide-details\r\n            class=\"position-input\"\r\n            @update:model-value=\"updatePosition\"\r\n          ></v-text-field>\r\n        </div>\r\n        <div class=\"property-row\">\r\n          <v-text-field\r\n            v-model.number=\"size.width\"\r\n            label=\"Width\"\r\n            type=\"number\"\r\n            density=\"compact\"\r\n            variant=\"outlined\"\r\n            hide-details\r\n            class=\"position-input\"\r\n            @update:model-value=\"updateSize\"\r\n          ></v-text-field>\r\n          <v-text-field\r\n            v-model.number=\"size.height\"\r\n            label=\"Height\"\r\n            type=\"number\"\r\n            density=\"compact\"\r\n            variant=\"outlined\"\r\n            hide-details\r\n            class=\"position-input\"\r\n            @update:model-value=\"updateSize\"\r\n          ></v-text-field>\r\n        </div>\r\n      </div>\r\n\r\n      <v-divider class=\"my-4\"></v-divider>\r\n\r\n      <!-- Element-specific properties -->\r\n      <component\r\n        :is=\"getPropertiesComponent(selectedElement.type)\"\r\n        :element=\"selectedElement\"\r\n        @update:element=\"updateElement\"\r\n      />\r\n\r\n      <v-divider class=\"my-4\"></v-divider>\r\n\r\n      <!-- Actions -->\r\n      <div class=\"property-group\">\r\n        <div class=\"property-group-title\">Actions</div>\r\n        <div class=\"actions-row\">\r\n          <v-btn color=\"primary\" block @click=\"duplicateElement\">\r\n            <v-icon left>mdi-content-duplicate</v-icon>\r\n            Duplicate\r\n          </v-btn>\r\n        </div>\r\n        <div class=\"actions-row\">\r\n          <v-btn color=\"error\" block @click=\"deleteElement\">\r\n            <v-icon left>mdi-delete</v-icon>\r\n            Delete\r\n          </v-btn>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\ResizeHandles.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":78,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":78,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":92,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":92,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":183,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":183,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"resize-handles\">\r\n    <!-- Corner handles -->\r\n    <div\r\n      class=\"resize-handle corner top-left\"\r\n      @mousedown.stop=\"startResize('top-left', $event)\"\r\n    ></div>\r\n    <div\r\n      class=\"resize-handle corner top-right\"\r\n      @mousedown.stop=\"startResize('top-right', $event)\"\r\n    ></div>\r\n    <div\r\n      class=\"resize-handle corner bottom-left\"\r\n      @mousedown.stop=\"startResize('bottom-left', $event)\"\r\n    ></div>\r\n    <div\r\n      class=\"resize-handle corner bottom-right\"\r\n      @mousedown.stop=\"startResize('bottom-right', $event)\"\r\n    ></div>\r\n\r\n    <!-- Edge handles -->\r\n    <div\r\n      class=\"resize-handle edge top\"\r\n      @mousedown.stop=\"startResize('top', $event)\"\r\n    ></div>\r\n    <div\r\n      class=\"resize-handle edge right\"\r\n      @mousedown.stop=\"startResize('right', $event)\"\r\n    ></div>\r\n    <div\r\n      class=\"resize-handle edge bottom\"\r\n      @mousedown.stop=\"startResize('bottom', $event)\"\r\n    ></div>\r\n    <div\r\n      class=\"resize-handle edge left\"\r\n      @mousedown.stop=\"startResize('left', $event)\"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n\r\nimport { Size, Position } from \"../../types/document\";\r\n\r\n// Import styles\r\nimport \"../../assets/styles/components/elements.scss\";\r\n\r\ntype ResizeDirection = \"top-left\" | \"top\" | \"top-right\" | \"right\" | \"bottom-right\" | \"bottom\" | \"bottom-left\" | \"left\";\r\n\r\nconst props = defineProps<{\r\n  elementSize: Size;\r\n  elementPosition: Position;\r\n  aspectRatio?: number; // Optional aspect ratio constraint\r\n  minWidth?: number;\r\n  minHeight?: number;\r\n  gridSize?: number;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"resize\", newSize: Size, newPosition: Position): void;\r\n}>();\r\n\r\n// Default values\r\nconst minWidth = props.minWidth || 20;\r\nconst minHeight = props.minHeight || 20;\r\nconst gridSize = props.gridSize || 10;\r\n\r\n// Resize state\r\nlet isResizing = false;\r\nlet resizeDirection: ResizeDirection | null = null;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\nfunction startResize(direction: ResizeDirection, event: MouseEvent) {\r\n  isResizing = true;\r\n  resizeDirection = direction;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.elementSize.width;\r\n  startHeight = props.elementSize.height;\r\n  startLeft = props.elementPosition.x;\r\n  startTop = props.elementPosition.y;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing || !resizeDirection) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  let newWidth = startWidth;\r\n  let newHeight = startHeight;\r\n  let newLeft = startLeft;\r\n  let newTop = startTop;\r\n\r\n  // Handle resize based on direction\r\n  switch (resizeDirection) {\r\n  case \"top-left\":\r\n    newWidth = Math.max(minWidth, startWidth - deltaX);\r\n    newHeight = Math.max(minHeight, startHeight - deltaY);\r\n    newLeft = startLeft + startWidth - newWidth;\r\n    newTop = startTop + startHeight - newHeight;\r\n    break;\r\n  case \"top\":\r\n    newHeight = Math.max(minHeight, startHeight - deltaY);\r\n    newTop = startTop + startHeight - newHeight;\r\n    break;\r\n  case \"top-right\":\r\n    newWidth = Math.max(minWidth, startWidth + deltaX);\r\n    newHeight = Math.max(minHeight, startHeight - deltaY);\r\n    newTop = startTop + startHeight - newHeight;\r\n    break;\r\n  case \"right\":\r\n    newWidth = Math.max(minWidth, startWidth + deltaX);\r\n    break;\r\n  case \"bottom-right\":\r\n    newWidth = Math.max(minWidth, startWidth + deltaX);\r\n    newHeight = Math.max(minHeight, startHeight + deltaY);\r\n    break;\r\n  case \"bottom\":\r\n    newHeight = Math.max(minHeight, startHeight + deltaY);\r\n    break;\r\n  case \"bottom-left\":\r\n    newWidth = Math.max(minWidth, startWidth - deltaX);\r\n    newHeight = Math.max(minHeight, startHeight + deltaY);\r\n    newLeft = startLeft + startWidth - newWidth;\r\n    break;\r\n  case \"left\":\r\n    newWidth = Math.max(minWidth, startWidth - deltaX);\r\n    newLeft = startLeft + startWidth - newWidth;\r\n    break;\r\n  }\r\n\r\n  // Apply aspect ratio constraint if needed\r\n  if (props.aspectRatio) {\r\n    const ratio = props.aspectRatio;\r\n\r\n    // Determine which dimension to adjust based on resize direction\r\n    if ([\"left\", \"right\"].includes(resizeDirection)) {\r\n      // Adjusting width, calculate height based on aspect ratio\r\n      newHeight = newWidth / ratio;\r\n    } else if ([\"top\", \"bottom\"].includes(resizeDirection)) {\r\n      // Adjusting height, calculate width based on aspect ratio\r\n      newWidth = newHeight * ratio;\r\n    } else {\r\n      // Corner resize - use the larger dimension change to determine constraint\r\n      const widthChange = Math.abs(newWidth - startWidth);\r\n      const heightChange = Math.abs(newHeight - startHeight);\r\n\r\n      if (widthChange >= heightChange) {\r\n        newHeight = newWidth / ratio;\r\n      } else {\r\n        newWidth = newHeight * ratio;\r\n      }\r\n\r\n      // Adjust position for top and left edges\r\n      if ([\"top-left\", \"top-right\"].includes(resizeDirection)) {\r\n        newTop = startTop + startHeight - newHeight;\r\n      }\r\n      if ([\"top-left\", \"bottom-left\"].includes(resizeDirection)) {\r\n        newLeft = startLeft + startWidth - newWidth;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Snap to grid\r\n  newWidth = Math.round(newWidth / gridSize) * gridSize;\r\n  newHeight = Math.round(newHeight / gridSize) * gridSize;\r\n  newLeft = Math.round(newLeft / gridSize) * gridSize;\r\n  newTop = Math.round(newTop / gridSize) * gridSize;\r\n\r\n  // Emit resize event with new size and position\r\n  emit(\"resize\", { width: newWidth, height: newHeight }, { x: newLeft, y: newTop });\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  resizeDirection = null;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n</script>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\SidebarNavigation.vue","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'computed' is defined but never used. Allowed unused vars must match /^_/u.","line":90,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":112,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":112,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":116,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":116,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":124,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":124,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":130,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":130,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":136,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":136,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":141,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":141,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":149,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":149,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"sidebar\" :class=\"{ collapsed: isCollapsed }\">\r\n    <div class=\"sidebar-header\">\r\n      <h3 v-if=\"!isCollapsed\" class=\"sidebar-title\">Document Sections</h3>\r\n      <v-btn icon size=\"small\" @click=\"toggleSidebar\">\r\n        <v-icon>{{ isCollapsed ? 'mdi-chevron-right' : 'mdi-chevron-left' }}</v-icon>\r\n      </v-btn>\r\n    </div>\r\n    \r\n    <div class=\"sidebar-content\">\r\n      <transition-group name=\"list\">\r\n        <div \r\n          v-for=\"(section, index) in sections\" \r\n          :key=\"section.id\"\r\n          class=\"section-item\"\r\n          :class=\"{ active: currentSection === index }\"\r\n          @click=\"selectSection(index)\"\r\n        >\r\n          <div class=\"section-icon\">\r\n            <v-icon size=\"small\">mdi-file-document-outline</v-icon>\r\n          </div>\r\n          <div v-if=\"!isCollapsed\" class=\"section-details\">\r\n            <div class=\"section-title\">{{ section.title }}</div>\r\n            <div class=\"section-meta\">{{ getSectionElementsCount(section) }} elements</div>\r\n          </div>\r\n          <div v-if=\"!isCollapsed\" class=\"section-actions\">\r\n            <v-btn icon size=\"x-small\" @click.stop=\"editSection(index)\">\r\n              <v-icon size=\"small\">mdi-pencil</v-icon>\r\n            </v-btn>\r\n            <v-btn icon\n                   size=\"x-small\"\n                   color=\"error\"\n                   @click.stop=\"confirmDeleteSection(index)\"\n            >\r\n              <v-icon size=\"small\">mdi-delete</v-icon>\r\n            </v-btn>\r\n          </div>\r\n        </div>\r\n      </transition-group>\r\n      \r\n      <div v-if=\"!isCollapsed\" class=\"add-section\">\r\n        <v-btn block @click=\"addSection\">\r\n          <v-icon left>mdi-plus</v-icon>\r\n          Add Section\r\n        </v-btn>\r\n      </div>\r\n      <div v-else class=\"add-section-icon\">\r\n        <v-btn icon size=\"small\" @click=\"addSection\">\r\n          <v-icon>mdi-plus</v-icon>\r\n        </v-btn>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <v-dialog v-model=\"sectionDialog\" max-width=\"500\">\r\n    <v-card>\r\n      <v-card-title>{{ editingSection === null ? 'Add New Section' : 'Edit Section' }}</v-card-title>\r\n      <v-card-text>\r\n        <v-text-field\r\n          v-model=\"sectionTitle\"\r\n          label=\"Section Title\"\r\n          variant=\"outlined\"\r\n          density=\"comfortable\"\r\n        ></v-text-field>\r\n      </v-card-text>\r\n      <v-card-actions>\r\n        <v-spacer></v-spacer>\r\n        <v-btn text @click=\"sectionDialog = false\">Cancel</v-btn>\r\n        <v-btn color=\"primary\" @click=\"saveSection\">Save</v-btn>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n\r\n  <v-dialog v-model=\"deleteDialog\" max-width=\"400\">\r\n    <v-card>\r\n      <v-card-title>Delete Section</v-card-title>\r\n      <v-card-text>\r\n        Are you sure you want to delete this section? This action cannot be undone.\r\n      </v-card-text>\r\n      <v-card-actions>\r\n        <v-spacer></v-spacer>\r\n        <v-btn text @click=\"deleteDialog = false\">Cancel</v-btn>\r\n        <v-btn color=\"error\" @click=\"deleteSection\">Delete</v-btn>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from \"vue\";\r\nimport { Section } from \"../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  sections: Section[]\r\n  currentSection: number\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"section-selected\", index: number): void\r\n  (e: \"section-added\", section: Section): void\r\n  (e: \"section-updated\", index: number, section: Section): void\r\n  (e: \"section-deleted\", index: number): void\r\n}>();\r\n\r\nconst isCollapsed = ref(false);\r\nconst sectionDialog = ref(false);\r\nconst deleteDialog = ref(false);\r\nconst sectionTitle = ref(\"\");\r\nconst editingSection = ref<number | null>(null);\r\nconst sectionToDelete = ref<number | null>(null);\r\n\r\nfunction toggleSidebar() {\r\n  isCollapsed.value = !isCollapsed.value;\r\n}\r\n\r\nfunction selectSection(index: number) {\r\n  emit(\"section-selected\", index);\r\n}\r\n\r\nfunction getSectionElementsCount(section: Section): number {\r\n  return section.elements?.length || 0;\r\n}\r\n\r\nfunction addSection() {\r\n  editingSection.value = null;\r\n  sectionTitle.value = \"New Section\";\r\n  sectionDialog.value = true;\r\n}\r\n\r\nfunction editSection(index: number) {\r\n  editingSection.value = index;\r\n  sectionTitle.value = props.sections[index].title;\r\n  sectionDialog.value = true;\r\n}\r\n\r\nfunction confirmDeleteSection(index: number) {\r\n  sectionToDelete.value = index;\r\n  deleteDialog.value = true;\r\n}\r\n\r\nfunction deleteSection() {\r\n  if (sectionToDelete.value !== null) {\r\n    emit(\"section-deleted\", sectionToDelete.value);\r\n    deleteDialog.value = false;\r\n    sectionToDelete.value = null;\r\n  }\r\n}\r\n\r\nfunction saveSection() {\r\n  if (editingSection.value !== null) {\r\n    // Update existing section\r\n    const updatedSection = {\r\n      ...props.sections[editingSection.value],\r\n      title: sectionTitle.value,\r\n    };\r\n    emit(\"section-updated\", editingSection.value, updatedSection);\r\n  } else {\r\n    // Create new section\r\n    const newSection: Section = {\r\n      id: \"section-\" + Date.now(),\r\n      title: sectionTitle.value,\r\n      elements: [],\r\n    };\r\n    emit(\"section-added\", newSection);\r\n  }\r\n  \r\n  sectionDialog.value = false;\r\n  sectionTitle.value = \"\";\r\n  editingSection.value = null;\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.sidebar {\r\n  background-color: var(--background);\r\n  border-right: 1px solid var(--border);\r\n  width: 250px;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  transition: width 0.3s ease, padding 0.3s ease;\r\n  overflow: hidden;\r\n  \r\n  &.collapsed {\r\n    width: 60px;\r\n  }\r\n}\r\n\r\n.sidebar-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 12px 16px;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.sidebar-title {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  margin: 0;\r\n}\r\n\r\n.sidebar-content {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 8px 0;\r\n}\r\n\r\n.section-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.15s ease;\r\n  \r\n  &:hover {\r\n    background-color: rgba(12, 132, 254, 0.05);\r\n  }\r\n  \r\n  &.active {\r\n    background-color: rgba(12, 132, 254, 0.1);\r\n    border-left: 3px solid var(--primary);\r\n  }\r\n}\r\n\r\n.section-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 12px;\r\n}\r\n\r\n.section-details {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.section-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.section-meta {\r\n  font-size: 12px;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.section-actions {\r\n  opacity: 0;\r\n  transition: opacity 0.15s ease;\r\n  display: flex;\r\n  gap: 4px;\r\n  \r\n  .section-item:hover & {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.add-section {\r\n  padding: 12px 16px;\r\n  border-top: 1px solid var(--border);\r\n  margin-top: 8px;\r\n}\r\n\r\n.add-section-icon {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 12px 0;\r\n  border-top: 1px solid var(--border);\r\n  margin-top: 8px;\r\n}\r\n\r\n// Animation\r\n.list-move,\r\n.list-enter-active,\r\n.list-leave-active {\r\n  transition: all 0.5s ease;\r\n}\r\n\r\n.list-enter-from,\r\n.list-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(-30px);\r\n}\r\n\r\n.list-leave-active {\r\n  position: absolute;\r\n}\r\n</style>","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\BaseElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":88,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":88,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2120,2123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2120,2123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2167,2170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2167,2170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"base-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n    @click=\"handleClick\"\r\n  >\r\n    <slot></slot>\r\n\r\n    <!-- Resize handles -->\r\n    <ResizeHandles\r\n      v-if=\"isSelected && !isPreview\"\r\n      :elementSize=\"element.size\"\r\n      :elementPosition=\"element.position\"\r\n      :minWidth=\"minWidth\"\r\n      :minHeight=\"minHeight\"\r\n      :gridSize=\"10\"\r\n      :aspectRatio=\"aspectRatio\"\r\n      @resize=\"handleResize\"\r\n    />\r\n\r\n    <!-- Rotation handle -->\r\n    <div\r\n      v-if=\"isSelected && !isPreview && showRotateHandle\"\r\n      class=\"rotate-handle\"\r\n      @mousedown.stop=\"startRotate\"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n\r\nimport type { DocumentElement, Size, Position } from \"../../../types/document\";\r\nimport ResizeHandles from \"../ResizeHandles.vue\";\r\nimport { useElement } from \"../../../composables/useElement\";\r\n\r\n// Import styles\r\nimport \"../../../assets/styles/components/elements.scss\";\r\n\r\nconst props = defineProps({\r\n  element: {\r\n    type: Object as () => DocumentElement,\r\n    required: true,\r\n  },\r\n  isSelected: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  isPreview: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  minWidth: {\r\n    type: Number,\r\n    default: 20,\r\n  },\r\n  minHeight: {\r\n    type: Number,\r\n    default: 20,\r\n  },\r\n  aspectRatio: {\r\n    type: Number,\r\n    default: undefined,\r\n  },\r\n  showRotateHandle: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n});\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n  (e: \"click\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Use the element composable for common functionality\r\nconst {\r\n  elementStyle,\r\n  contentElement,\r\n  handleClick,\r\n  startDrag,\r\n  handleResize: baseHandleResize,\r\n  startRotate,\r\n} = useElement(props, emit);\r\n\r\n// Custom resize handler that checks if the component has its own resize handler\r\nfunction handleResize(newSize: Size, newPosition: Position) {\r\n  // If the component has its own resize handler, use that\r\n  if (typeof (props as any).onResize === \"function\") {\r\n    (props as any).onResize(newSize, newPosition);\r\n  } else {\r\n    // Otherwise use the base handler\r\n    baseHandleResize(newSize, newPosition);\r\n  }\r\n}\r\n\r\n// Expose to child components\r\ndefineExpose({\r\n  contentElement,\r\n});\r\n</script>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\DataGridElement.vue","messages":[{"ruleId":"vue/component-name-in-template-casing","severity":1,"message":"Component name \"ag-grid-vue\" is not PascalCase.","line":9,"column":7,"nodeType":"HTMLTagOpen","messageId":"incorrectCase","endLine":9,"endColumn":19,"fix":{"range":[203,215],"text":"<AgGridVue"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":113,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":113,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":119,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":119,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":141,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":141,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":158,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":158,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":177,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":177,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":183,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":183,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":194,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":194,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":219,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":219,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"<template>\r\n  <div\r\n    class=\"data-grid-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div class=\"grid-container\">\r\n      <ag-grid-vue\r\n        class=\"ag-theme-alpine\"\r\n        :columnDefs=\"columnDefs\"\r\n        :rowData=\"rowData\"\r\n        :defaultColDef=\"defaultColDef\"\r\n        :style=\"gridStyle\"\r\n        @grid-ready=\"onGridReady\"\r\n        @cell-value-changed=\"onCellValueChanged\"\r\n      />\r\n    </div>\r\n    <div v-if=\"isSelected\" class=\"resize-handle\" @mousedown.stop=\"startResize\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted } from \"vue\";\r\nimport { AgGridVue } from \"ag-grid-vue3\";\r\nimport \"ag-grid-community/styles/ag-grid.css\";\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\r\nimport type { DocumentElement, ElementContent } from \"../../../types/document\";\r\nimport type { GridApi, ColumnApi } from \"ag-grid-community\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement\r\n  isSelected: boolean\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void\r\n}>();\r\n\r\n// Grid state\r\nconst gridApi = ref<GridApi | null>(null);\r\nconst columnApi = ref<ColumnApi | null>(null);\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    height: `${props.element.size.height}px`,\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"4px\",\r\n    border: props.isSelected ? \"2px solid var(--primary)\" : \"1px solid var(--border)\",\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nconst gridStyle = computed(() => {\r\n  return {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n});\r\n\r\nconst defaultColDef = {\r\n  flex: 1,\r\n  minWidth: 100,\r\n  editable: true,\r\n  resizable: true,\r\n  sortable: true,\r\n  filter: true,\r\n};\r\n\r\ninterface ColumnDefinition {\r\n  field: string;\r\n  headerName: string;\r\n}\r\n\r\nconst columnDefs = computed(() => {\r\n  return (props.element.content as ElementContent).columns.map((col: ColumnDefinition) => ({\r\n    field: col.field,\r\n    headerName: col.headerName,\r\n  }));\r\n});\r\n\r\nconst rowData = computed(() => (props.element.content as ElementContent).rows);\r\n\r\ninterface GridReadyEvent {\r\n  api: GridApi;\r\n  columnApi: ColumnApi;\r\n}\r\n\r\ninterface CellValueChangedEvent {\r\n  data: Record<string, unknown>;\r\n  rowIndex: number;\r\n  column: {\r\n    colId: string;\r\n  };\r\n  newValue: unknown;\r\n}\r\n\r\nfunction onGridReady(params: GridReadyEvent) {\r\n  gridApi.value = params.api;\r\n  columnApi.value = params.columnApi;\r\n  params.api.sizeColumnsToFit();\r\n}\r\n\r\nfunction onCellValueChanged(_params: CellValueChangedEvent) {\r\n  // Instead of using deprecated getModel().getRowData()\r\n  // Get all row data directly from the API\r\n  if (gridApi.value) {\r\n    const updatedRows: Record<string, unknown>[] = [];\r\n    gridApi.value.forEachNode((node) => {\r\n      if (node.data) {\r\n        updatedRows.push(node.data);\r\n      }\r\n    });\r\n\r\n    const updatedElement = {\r\n      ...props.element,\r\n      content: {\r\n        ...(props.element.content as ElementContent),\r\n        rows: updatedRows,\r\n      },\r\n    };\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n}\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  if (event.target instanceof HTMLElement &&\r\n      (event.target.classList.contains(\"ag-cell\") ||\r\n       event.target.classList.contains(\"ag-header-cell\"))) {\r\n    return;\r\n  }\r\n\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newPosition = {\r\n    x: startLeft + deltaX,\r\n    y: startTop + deltaY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newSize = {\r\n    width: Math.max(400, startWidth + deltaX),\r\n    height: Math.max(200, startHeight + deltaY),\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  if (gridApi.value) {\r\n    setTimeout(() => {\r\n      gridApi.value?.sizeColumnsToFit();\r\n    }, 0);\r\n  }\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nonMounted(() => {\r\n  if (gridApi.value) {\r\n    gridApi.value.sizeColumnsToFit();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.data-grid-element {\r\n  position: absolute;\r\n  cursor: move;\r\n  overflow: hidden;\r\n\r\n  &.selected {\r\n    outline: none;\r\n  }\r\n}\r\n\r\n.grid-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n  border-radius: 2px;\r\n}\r\n\r\n:deep(.ag-theme-alpine) {\r\n  --ag-header-height: 40px;\r\n  --ag-header-foreground-color: var(--text-primary);\r\n  --ag-header-background-color: var(--surface);\r\n  --ag-header-cell-hover-background-color: var(--surface);\r\n  --ag-header-cell-moving-background-color: var(--surface);\r\n\r\n  .ag-header-cell {\r\n    font-weight: 500;\r\n  }\r\n\r\n  .ag-cell {\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style>","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\ElementRegistry.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorComponent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineAsyncComponent } from \"vue\";\r\nimport type { Component } from \"vue\";\r\n\r\n// Error component for async loading failures\r\nconst ErrorComponent = {\r\n  template: '<div class=\"error-loading\">Error loading component</div>',\r\n  props: [\"error\"],\r\n};\r\n\r\n// Loading component for async loading\r\nconst LoadingComponent = {\r\n  template: '<div class=\"loading-component\">Loading...</div>',\r\n};\r\n\r\n// Define async components with error handling\r\nconst TextElement = defineAsyncComponent({\r\n  loader: () => import(\"./TextElementNew.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading text element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst ImageElement = defineAsyncComponent({\r\n  loader: () => import(\"./ImageElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading image element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst ShapeElement = defineAsyncComponent({\r\n  loader: () => import(\"./ShapeElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading shape element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst TableElement = defineAsyncComponent({\r\n  loader: () => import(\"./SimpleTableElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading table element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst SignatureElement = defineAsyncComponent({\r\n  loader: () => import(\"./SignatureElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading signature element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst FormElement = defineAsyncComponent({\r\n  loader: () => import(\"./FormElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading form element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst GroupElement = defineAsyncComponent({\r\n  loader: () => import(\"./GroupElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading group element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst GridBlockElement = defineAsyncComponent({\r\n  loader: () => import(\"./GridBlockElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading grid element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\n// Element registry for component lookup\r\nexport const elementComponentRegistry: Record<string, Component> = {\r\n  text: TextElement,\r\n  image: ImageElement,\r\n  shape: ShapeElement,\r\n  table: TableElement,\r\n  signature: SignatureElement,\r\n  form: FormElement,\r\n  group: GroupElement,\r\n  grid: GridBlockElement,\r\n};\r\n\r\n/**\r\n * Get the appropriate component for an element type\r\n * @param type Element type\r\n * @returns Vue component for the element type\r\n */\r\nexport function getElementComponent(type: string): Component | null {\r\n  return elementComponentRegistry[type] || null;\r\n}\r\n\r\nexport default {\r\n  elementComponentRegistry,\r\n  getElementComponent,\r\n};\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\FormElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":139,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":139,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":150,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":150,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":169,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":169,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":175,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":175,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":186,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":186,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":205,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":205,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"form-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div class=\"form-content\" :style=\"contentStyle\">\r\n      <template v-if=\"element.content.type === 'checkbox'\">\r\n        <div\r\n          v-for=\"(option, index) in element.content.options\"\r\n          :key=\"index\"\r\n          class=\"checkbox-option\"\r\n        >\r\n          <v-checkbox\r\n            v-model=\"selectedOptions\"\r\n            :label=\"option\"\r\n            :value=\"option\"\r\n            density=\"compact\"\r\n            hide-details\r\n          ></v-checkbox>\r\n        </div>\r\n      </template>\r\n\r\n      <template v-else-if=\"element.content.type === 'radio'\">\r\n        <v-radio-group\r\n          v-model=\"selectedOption\"\r\n          :inline=\"element.content.inline\"\r\n          density=\"compact\"\r\n          hide-details\r\n        >\r\n          <v-radio\r\n            v-for=\"(option, index) in element.content.options\"\r\n            :key=\"index\"\r\n            :label=\"option\"\r\n            :value=\"option\"\r\n          ></v-radio>\r\n        </v-radio-group>\r\n      </template>\r\n\r\n      <template v-else-if=\"element.content.type === 'select'\">\r\n        <v-select\r\n          v-model=\"selectedOption\"\r\n          :items=\"element.content.options\"\r\n          :label=\"element.content.label\"\r\n          density=\"compact\"\r\n          variant=\"outlined\"\r\n          hide-details\r\n        ></v-select>\r\n      </template>\r\n\r\n      <template v-else-if=\"element.content.type === 'textfield'\">\r\n        <v-text-field\r\n          v-model=\"textValue\"\r\n          :label=\"element.content.label\"\r\n          :type=\"element.content.inputType || 'text'\"\r\n          density=\"compact\"\r\n          variant=\"outlined\"\r\n          hide-details\r\n        ></v-text-field>\r\n      </template>\r\n\r\n      <template v-else-if=\"element.content.type === 'textarea'\">\r\n        <v-textarea\r\n          v-model=\"textValue\"\r\n          :label=\"element.content.label\"\r\n          density=\"compact\"\r\n          variant=\"outlined\"\r\n          hide-details\r\n          auto-grow\r\n        ></v-textarea>\r\n      </template>\r\n    </div>\r\n\r\n    <div v-if=\"isSelected\" class=\"resize-handle\" @mousedown.stop=\"startResize\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, watch } from \"vue\";\r\nimport { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement\r\n  isSelected: boolean\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void\r\n}>();\r\n\r\n// Form state\r\nconst selectedOptions = ref<string[]>([]);\r\nconst selectedOption = ref<string>(\"\");\r\nconst textValue = ref(\"\");\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    minHeight: `${props.element.size.height}px`,\r\n    backgroundColor: props.element.style?.backgroundColor || \"white\",\r\n    borderRadius: \"4px\",\r\n    border: props.isSelected ? \"2px solid var(--primary)\" : \"1px solid var(--border)\",\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nconst contentStyle = computed(() => {\r\n  return {\r\n    padding: \"16px\",\r\n    height: \"100%\",\r\n  };\r\n});\r\n\r\nwatch(() => props.element.content, (newContent) => {\r\n  if (newContent.type === \"checkbox\") {\r\n    selectedOptions.value = [];\r\n  } else if (newContent.type === \"radio\" || newContent.type === \"select\") {\r\n    selectedOption.value = newContent.options[0] || \"\";\r\n  } else {\r\n    textValue.value = \"\";\r\n  }\r\n}, { deep: true });\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newPosition = {\r\n    x: startLeft + deltaX,\r\n    y: startTop + deltaY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newSize = {\r\n    width: Math.max(200, startWidth + deltaX),\r\n    height: Math.max(50, startHeight + deltaY),\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.form-element {\r\n  position: absolute;\r\n  cursor: move;\r\n\r\n  &.selected {\r\n    outline: none;\r\n  }\r\n}\r\n\r\n.form-content {\r\n  height: 100%;\r\n\r\n  .checkbox-option {\r\n    margin-bottom: 8px;\r\n\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n  border-radius: 2px;\r\n}\r\n</style>","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\GridBlockElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":140,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":140,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":157,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":157,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":178,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":178,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":186,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":186,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":191,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":191,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":219,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":219,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":238,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":238,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":243,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":243,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":254,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":254,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":269,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":269,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":275,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":275,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":286,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":286,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":301,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":301,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":307,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":307,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":317,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":317,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":346,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":346,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"grid-block-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div class=\"grid-content\" :style=\"gridContentStyle\">\r\n      <div\r\n        v-for=\"(cell, index) in element?.content?.cells || []\"\r\n        :key=\"cell.id\"\r\n        class=\"grid-cell\"\r\n        :style=\"getCellStyle(cell)\"\r\n      >\r\n        <div class=\"cell-content\">\r\n          <component\r\n            :is=\"getElementComponent(element.type)\"\r\n            v-for=\"element in cell?.elements || []\"\r\n            :key=\"element.id\"\r\n            :element=\"element\"\r\n            :isSelected=\"selectedElement?.id === element.id\"\r\n            @click.stop=\"selectElement(element)\"\r\n            @update:element=\"updateCellElement(index, element)\"\r\n          />\r\n\r\n          <div\r\n            v-if=\"cell.elements.length === 0\"\r\n            class=\"empty-cell\"\r\n            @click=\"openAddElementDialog(index)\"\r\n          >\r\n            <v-icon size=\"32\" color=\"grey\">mdi-plus</v-icon>\r\n            <span>Add Element</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          v-if=\"index < element.content.cells.length - 1\"\r\n          class=\"resize-divider\"\r\n          @mousedown.stop=\"startCellResize(index)\"\r\n        ></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle\"\r\n      @mousedown.stop=\"startResize\"\r\n    ></div>\r\n\r\n    <!-- Add Element Dialog -->\r\n    <v-dialog v-model=\"addElementDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>Add Element</v-card-title>\r\n        <v-card-text>\r\n          <v-list>\r\n            <v-list-item\r\n              v-for=\"type in elementTypes || []\"\r\n              :key=\"type\"\r\n              class=\"element-type-item\"\r\n              @click=\"addElement(type)\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <v-icon :icon=\"getElementIcon(type)\"></v-icon>\r\n              </template>\r\n              <v-list-item-title>{{\r\n                formatElementType(type)\r\n              }}</v-list-item-title>\r\n            </v-list-item>\r\n          </v-list>\r\n        </v-card-text>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, defineAsyncComponent } from \"vue\";\r\nimport type { DocumentElement, GridCell } from \"../../../types/document\";\r\n\r\n// Import element components\r\nconst TextElement = defineAsyncComponent(() => import(\"./TextElement.vue\"));\r\nconst ImageElement = defineAsyncComponent(() => import(\"./ImageElement.vue\"));\r\nconst ShapeElement = defineAsyncComponent(() => import(\"./ShapeElement.vue\"));\r\nconst TableElement = defineAsyncComponent(\r\n  () => import(\"./SimpleTableElement.vue\"),\r\n);\r\nconst SignatureElement = defineAsyncComponent(\r\n  () => import(\"./SignatureElement.vue\"),\r\n);\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\n// State\r\nconst selectedElement = ref<DocumentElement | null>(null);\r\nconst addElementDialog = ref(false);\r\nconst editingCellIndex = ref(-1);\r\n\r\n// Available element types\r\nconst elementTypes = [\"text\", \"image\", \"shape\", \"table\", \"signature\"];\r\n\r\n// Styles\r\nconst elementStyle = computed(() => ({\r\n  left: `${props.element.position.x}px`,\r\n  top: `${props.element.position.y}px`,\r\n  width: `${props.element.size.width}px`,\r\n  height: `${props.element.size.height}px`,\r\n  backgroundColor: props.element.style?.backgroundColor || \"white\",\r\n  borderRadius: \"4px\",\r\n  border: props.isSelected\r\n    ? \"2px solid var(--primary)\"\r\n    : \"1px solid var(--border)\",\r\n  zIndex: props.element.zIndex ?? 0,\r\n}));\r\n\r\nconst gridContentStyle = computed(() => ({\r\n  gap: `${props.element.style?.gap || 8}px`,\r\n}));\r\n\r\n// Drag & resize state\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\nlet isResizingCell = false;\r\nlet resizingCellIndex = -1;\r\nlet startCellSizes: number[] = [];\r\nlet startClientX = 0;\r\n\r\nfunction getElementComponent(type: string) {\r\n  switch (type) {\r\n  case \"text\":\r\n    return TextElement;\r\n  case \"image\":\r\n    return ImageElement;\r\n  case \"shape\":\r\n    return ShapeElement;\r\n  case \"table\":\r\n    return TableElement;\r\n  case \"signature\":\r\n    return SignatureElement;\r\n  default:\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction getElementIcon(type: string) {\r\n  switch (type) {\r\n  case \"text\":\r\n    return \"mdi-format-text\";\r\n  case \"image\":\r\n    return \"mdi-image\";\r\n  case \"shape\":\r\n    return \"mdi-shape\";\r\n  case \"table\":\r\n    return \"mdi-table\";\r\n  case \"signature\":\r\n    return \"mdi-draw\";\r\n  default:\r\n    return \"mdi-help\";\r\n  }\r\n}\r\n\r\nfunction formatElementType(type: string): string {\r\n  return type.charAt(0).toUpperCase() + type.slice(1);\r\n}\r\n\r\nfunction getCellStyle(cell: GridCell) {\r\n  return {\r\n    flex: cell.size,\r\n    minHeight: \"100px\",\r\n    position: \"relative\",\r\n  };\r\n}\r\n\r\nfunction openAddElementDialog(index: number) {\r\n  editingCellIndex.value = index;\r\n  addElementDialog.value = true;\r\n}\r\n\r\nfunction addElement(type: string) {\r\n  if (editingCellIndex.value === -1) return;\r\n\r\n  const newElement: DocumentElement = {\r\n    id: `${type}-${Date.now()}`,\r\n    type,\r\n    content: type === \"text\" ? \"New text\" : \"\",\r\n    position: { x: 0, y: 0 },\r\n    size: { width: \"100%\", height: type === \"text\" ? 100 : 200 },\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      cells: [...props.element.content.cells],\r\n    },\r\n  };\r\n\r\n  updatedElement.content.cells[editingCellIndex.value].elements.push(\r\n    newElement,\r\n  );\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  addElementDialog.value = false;\r\n  editingCellIndex.value = -1;\r\n}\r\n\r\nfunction updateCellElement(cellIndex: number, element: DocumentElement) {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      cells: [...props.element.content.cells],\r\n    },\r\n  };\r\n\r\n  const elementIndex = updatedElement.content.cells[\r\n    cellIndex\r\n  ].elements.findIndex((e) => e.id === element.id);\r\n\r\n  if (elementIndex >= 0) {\r\n    updatedElement.content.cells[cellIndex].elements[elementIndex] = element;\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n}\r\n\r\nfunction selectElement(element: DocumentElement) {\r\n  selectedElement.value = element;\r\n}\r\n\r\n// Drag & resize handlers\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    position: {\r\n      x: startLeft + deltaX,\r\n      y: startTop + deltaY,\r\n    },\r\n  });\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    size: {\r\n      width: Math.max(300, startWidth + deltaX),\r\n      height: Math.max(200, startHeight + deltaY),\r\n    },\r\n  });\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction startCellResize(index: number) {\r\n  isResizingCell = true;\r\n  resizingCellIndex = index;\r\n  startClientX = event?.clientX || 0;\r\n  startCellSizes = props.element.content.cells.map((cell) => cell.size);\r\n\r\n  document.addEventListener(\"mousemove\", onCellResize);\r\n  document.addEventListener(\"mouseup\", stopCellResize);\r\n}\r\n\r\nfunction onCellResize(event: MouseEvent) {\r\n  if (!isResizingCell || resizingCellIndex === -1) return;\r\n\r\n  const deltaX = event.clientX - startClientX;\r\n  const containerWidth = props.element.size.width;\r\n  const sizeDelta = (deltaX / containerWidth) * 2;\r\n\r\n  const updatedCells = [...props.element.content.cells];\r\n  const currentCell = updatedCells[resizingCellIndex];\r\n  const nextCell = updatedCells[resizingCellIndex + 1];\r\n\r\n  currentCell.size = Math.max(\r\n    0.1,\r\n    startCellSizes[resizingCellIndex] + sizeDelta,\r\n  );\r\n  nextCell.size = Math.max(\r\n    0.1,\r\n    startCellSizes[resizingCellIndex + 1] - sizeDelta,\r\n  );\r\n\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      cells: updatedCells,\r\n    },\r\n  });\r\n}\r\n\r\nfunction stopCellResize() {\r\n  isResizingCell = false;\r\n  resizingCellIndex = -1;\r\n  document.removeEventListener(\"mousemove\", onCellResize);\r\n  document.removeEventListener(\"mouseup\", stopCellResize);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.grid-block-element {\r\n  position: absolute;\r\n  cursor: move;\r\n  overflow: hidden;\r\n\r\n  &.selected {\r\n    outline: none;\r\n  }\r\n}\r\n\r\n.grid-content {\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.grid-cell {\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  border-right: 1px solid var(--border);\r\n\r\n  &:last-child {\r\n    border-right: none;\r\n  }\r\n}\r\n\r\n.cell-content {\r\n  flex: 1;\r\n  min-height: 100px;\r\n  position: relative;\r\n}\r\n\r\n.empty-cell {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  background-color: #f5f5f5;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #eee;\r\n  }\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n  border-radius: 2px;\r\n}\r\n\r\n.resize-divider {\r\n  position: absolute;\r\n  top: 0;\r\n  right: -3px;\r\n  width: 6px;\r\n  height: 100%;\r\n  cursor: col-resize;\r\n  background-color: transparent;\r\n  transition: background-color 0.2s;\r\n  z-index: 2;\r\n\r\n  &:hover {\r\n    background-color: var(--primary);\r\n  }\r\n\r\n  &:active {\r\n    background-color: var(--primary);\r\n  }\r\n}\r\n\r\n.element-type-item {\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: var(--surface);\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\GroupElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":82,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":82,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":89,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":89,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":127,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":127,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <BaseElement\r\n    class=\"group-element\"\r\n    :element=\"element\"\r\n    :isSelected=\"isSelected\"\r\n    :isPreview=\"isPreview\"\r\n    :minWidth=\"50\"\r\n    :minHeight=\"50\"\r\n    tabindex=\"0\"\r\n    @update:element=\"handleBaseElementUpdate\"\r\n  >\r\n    <!-- Group border and background -->\r\n    <div\r\n      class=\"group-container\"\r\n      :style=\"groupContainerStyle\"\r\n      @click.stop=\"handleClick\"\r\n    >\r\n      <!-- Render child elements -->\r\n      <component\r\n        :is=\"getElementComponent(childElement.type)\"\r\n        v-for=\"childElement in element.children || []\"\r\n        :key=\"childElement.id\"\r\n        :element=\"childElement\"\r\n        :isSelected=\"false\"\r\n        :isPreview=\"true\"\r\n        :style=\"getChildStyle(childElement)\"\r\n        class=\"group-child-element\"\r\n      />\r\n    </div>\r\n  </BaseElement>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed } from \"vue\";\r\nimport type { CSSProperties } from \"vue\";\r\nimport type { DocumentElement, Size, Position } from \"../../../types/document\";\r\nimport BaseElement from \"./BaseElement.vue\";\r\nimport { getElementComponent } from \"./ElementRegistry\";\r\n\r\n// Import styles\r\nimport \"../../../assets/styles/components/elements.scss\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n  isPreview?: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n  (e: \"click\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Compute the style for the group container\r\nconst groupContainerStyle = computed<CSSProperties>(() => {\r\n  const style = props.element.style || {};\r\n  return {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    border: style.borderWidth ? `${style.borderWidth}px ${style.borderStyle || \"dashed\"} ${style.borderColor || \"#666\"}` : \"1px dashed #666\",\r\n    backgroundColor: style.backgroundColor || \"transparent\",\r\n    opacity: style.opacity !== undefined ? style.opacity : 1,\r\n    position: \"relative\" as const,\r\n    overflow: \"hidden\",\r\n    boxSizing: \"border-box\" as const,\r\n  };\r\n});\r\n\r\n// Calculate the style for child elements (position relative to group)\r\nfunction getChildStyle(childElement: DocumentElement): CSSProperties {\r\n  return {\r\n    position: \"absolute\" as const,\r\n    left: `${childElement.position.x}px`,\r\n    top: `${childElement.position.y}px`,\r\n    width: `${childElement.size.width}px`,\r\n    height: `${childElement.size.height}px`,\r\n    zIndex: childElement.zIndex || 0,\r\n  };\r\n}\r\n\r\n// Handle updates from the base element\r\nfunction handleBaseElementUpdate(updatedElement: DocumentElement) {\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\n// This function is called by the BaseElement when it's resized\r\n// We need to override it to handle the children elements\r\n// It's exposed to the BaseElement through the defineExpose in BaseElement.vue\r\nfunction handleResize(newSize: Size, newPosition: Position) {\r\n  // Calculate the scale factors for child elements\r\n  const scaleX = newSize.width / props.element.size.width;\r\n  const scaleY = newSize.height / props.element.size.height;\r\n\r\n  // Update children positions and sizes proportionally\r\n  const updatedChildren = props.element.children?.map((child) => {\r\n    // Calculate new relative position\r\n    const relativeX = child.position.x - props.element.position.x;\r\n    const relativeY = child.position.y - props.element.position.y;\r\n\r\n    // Scale the position\r\n    const newX = newPosition.x + (relativeX * scaleX);\r\n    const newY = newPosition.y + (relativeY * scaleY);\r\n\r\n    // Scale the size\r\n    const newWidth = child.size.width * scaleX;\r\n    const newHeight = child.size.height * scaleY;\r\n\r\n    return {\r\n      ...child,\r\n      position: { x: newX, y: newY },\r\n      size: { width: newWidth, height: newHeight },\r\n    };\r\n  });\r\n\r\n  // Update the group element\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n    size: newSize,\r\n    children: updatedChildren,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\n// Handle click on the group\r\nfunction handleClick(event: MouseEvent) {\r\n  // Stop propagation to prevent document click from deselecting\r\n  event.stopPropagation();\r\n\r\n  // Don't do anything if we're in preview mode\r\n  if (props.isPreview) return;\r\n\r\n  // Force focus on this group element\r\n  const groupElement = event.currentTarget as HTMLElement;\r\n  if (groupElement) {\r\n    // Focus the element\r\n    groupElement.focus();\r\n\r\n    // Add a visual feedback that the group was clicked\r\n    groupElement.classList.add(\"click-feedback\");\r\n\r\n    // Remove it after the animation completes\r\n    setTimeout(() => {\r\n      groupElement.classList.remove(\"click-feedback\");\r\n    }, 300);\r\n  }\r\n\r\n  // Emit the click event to select this group\r\n  emit(\"click\", props.element);\r\n}\r\n\r\n// Expose the handleResize function to the BaseElement\r\ndefineExpose({\r\n  handleResize,\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.group-element {\r\n  cursor: move;\r\n  user-select: none;\r\n\r\n  // Add a click feedback animation\r\n  &.click-feedback {\r\n    animation: click-pulse 0.3s ease-out;\r\n  }\r\n\r\n  @keyframes click-pulse {\r\n    0% { transform: scale(1); }\r\n    50% { transform: scale(1.02); }\r\n    100% { transform: scale(1); }\r\n  }\r\n\r\n  &.selected {\r\n    outline: 3px solid var(--primary, #0c84fe);\r\n\r\n    // Show a semi-transparent overlay when selected\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background-color: rgba(12, 132, 254, 0.1);\r\n      pointer-events: none;\r\n    }\r\n\r\n    // Make the folder icon more visible when selected\r\n    .group-container::before {\r\n      opacity: 1;\r\n    }\r\n\r\n    // Make the group container more visible when selected\r\n    .group-container {\r\n      border: 2px solid #0c84fe !important;\r\n      background-color: rgba(12, 132, 254, 0.05);\r\n      box-shadow: 0 0 10px rgba(12, 132, 254, 0.2);\r\n    }\r\n  }\r\n\r\n  .group-container {\r\n    border-radius: 2px;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    cursor: pointer;\r\n\r\n    // Add a more visible border and background to make it easier to select\r\n    border: 2px dashed #666 !important;\r\n    background-color: rgba(240, 240, 240, 0.1);\r\n\r\n    // Add a subtle drop shadow to indicate it's a group\r\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.15);\r\n\r\n    // Add a folder icon to indicate it's a group\r\n    &::before {\r\n      content: '';\r\n      position: absolute;\r\n      top: -15px;\r\n      left: 0;\r\n      width: 20px;\r\n      height: 15px;\r\n      background-image: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path fill=\"%23666\" d=\"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\"/></svg>');\r\n      background-repeat: no-repeat;\r\n      background-size: contain;\r\n      opacity: 0.9;\r\n      pointer-events: none;\r\n    }\r\n\r\n    // Add a stronger hover effect to make it clear it's selectable\r\n    &:hover {\r\n      box-shadow: 0 0 10px rgba(12, 132, 254, 0.3);\r\n      border-color: #0c84fe !important;\r\n      background-color: rgba(12, 132, 254, 0.05);\r\n    }\r\n  }\r\n\r\n  // Make child elements non-interactive\r\n  .group-child-element {\r\n    pointer-events: none !important; // Prevent any mouse events\r\n    user-select: none !important;\r\n    cursor: default !important;\r\n\r\n    // Add a slight opacity to indicate they're part of a group\r\n    opacity: 0.95;\r\n\r\n    // Disable all interactive elements inside child components\r\n    input, textarea, button, select, a {\r\n      pointer-events: none !important;\r\n      user-select: none !important;\r\n    }\r\n  }\r\n\r\n  // Rotation handle\r\n  .rotate-handle {\r\n    position: absolute;\r\n    width: 10px;\r\n    height: 10px;\r\n    background-color: var(--primary, #0c84fe);\r\n    top: -20px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    border-radius: 50%;\r\n    cursor: grab;\r\n    z-index: 1;\r\n\r\n    &:active {\r\n      cursor: grabbing;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\ImageElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":77,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":77,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":81,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":92,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":92,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":120,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":120,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":126,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":126,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":137,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":137,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaY' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":141,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":166,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":166,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"image-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <img\r\n      :src=\"element.content\"\r\n      alt=\"Image\"\r\n      class=\"element-image\"\r\n      :style=\"imageStyle\"\r\n      @error=\"handleImageError\"\r\n    />\r\n    <div v-if=\"!element.content || imageError\" class=\"image-placeholder\">\r\n      <v-icon size=\"32\" color=\"grey\">mdi-image</v-icon>\r\n      <span>No image selected</span>\r\n    </div>\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle\"\r\n      @mousedown.stop=\"startResize\"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, ref } from \"vue\";\r\nimport { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst imageError = ref(false);\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    height: `${props.element.size.height}px`,\r\n    borderRadius: `${props.element.style?.borderRadius || 0}px`,\r\n    border: props.element.style?.borderWidth\r\n      ? `${props.element.style.borderWidth}px solid ${props.element.style.borderColor}`\r\n      : \"none\",\r\n    opacity: props.element.style?.opacity || 1,\r\n    backgroundColor: props.element.style?.backgroundColor || \"#f5f5f5\",\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nconst imageStyle = computed(() => {\r\n  return {\r\n    objectFit: props.element.style?.objectFit || \"cover\",\r\n    display: imageError.value ? \"none\" : \"block\",\r\n  };\r\n});\r\n\r\nfunction handleImageError() {\r\n  imageError.value = true;\r\n}\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  // Calculate new position\r\n  let newX = startLeft + deltaX;\r\n  let newY = startTop + deltaY;\r\n\r\n  // Snap to grid (10px grid)\r\n  const gridSize = 10;\r\n  newX = Math.round(newX / gridSize) * gridSize;\r\n  newY = Math.round(newY / gridSize) * gridSize;\r\n\r\n  const newPosition = {\r\n    x: newX,\r\n    y: newY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  // Maintain aspect ratio by default\r\n  const aspectRatio = startWidth / startHeight;\r\n  let newWidth = Math.max(50, startWidth + deltaX);\r\n  let newHeight = Math.max(50, newWidth / aspectRatio);\r\n\r\n  // Snap to grid (10px grid)\r\n  const gridSize = 10;\r\n  newWidth = Math.round(newWidth / gridSize) * gridSize;\r\n  newHeight = Math.round(newHeight / gridSize) * gridSize;\r\n\r\n  const newSize = {\r\n    width: newWidth,\r\n    height: newHeight,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.element {\r\n  position: absolute;\r\n  cursor: move;\r\n\r\n  &.selected {\r\n    outline: 2px solid var(--primary);\r\n  }\r\n}\r\n\r\n.image-element {\r\n  overflow: hidden;\r\n\r\n  .element-image {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .image-placeholder {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 8px;\r\n    color: #666;\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\ShapeElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":139,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":139,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":199,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":199,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":210,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":210,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":238,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":238,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":244,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":244,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startResize' is defined but never used. Allowed unused vars must match /^_/u.","line":244,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":244,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":255,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":255,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":283,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":283,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":289,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":289,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":304,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":304,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":333,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":333,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":340,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":340,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"shape-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div class=\"shape-container\">\r\n      <svg\r\n        :width=\"svgSize.width\"\r\n        :height=\"svgSize.height\"\r\n        :style=\"{\r\n          position: 'absolute',\r\n          left: `-${(svgSize.width - width) / 2}px`,\r\n          top: `-${(svgSize.height - height) / 2}px`,\r\n          overflow: 'visible',\r\n          pointerEvents: 'none',\r\n          display: 'block',\r\n        }\"\r\n        :viewBox=\"`0 0 ${svgSize.width} ${svgSize.height}`\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <g\r\n          :transform=\"`translate(${svgSize.width / 2} ${\r\n            svgSize.height / 2\r\n          }) rotate(${rotation}) translate(${-width / 2} ${-height / 2})`\"\r\n        >\r\n          <component :is=\"getShapeComponent()\" :style=\"shapeStyle\" />\r\n        </g>\r\n      </svg>\r\n    </div>\r\n\r\n    <!-- Multi-directional resize handles -->\r\n    <ResizeHandles\r\n      v-if=\"isSelected\"\r\n      :elementSize=\"props.element.size\"\r\n      :elementPosition=\"props.element.position\"\r\n      :minWidth=\"15\"\r\n      :minHeight=\"15\"\r\n      :gridSize=\"10\"\r\n      @resize=\"handleResize\"\r\n    />\r\n\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"rotate-handle\"\r\n      @mousedown.stop=\"startRotate\"\r\n    ></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, h } from \"vue\";\r\nimport { DocumentElement, Size, Position } from \"../../../types/document\";\r\nimport ResizeHandles from \"../../editor/ResizeHandles.vue\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Element dimensions\r\nconst width = computed(() => props.element.size.width);\r\nconst height = computed(() => props.element.size.height);\r\nconst rotation = computed(() => props.element.style?.rotation || 0);\r\n\r\n// SVG dimensions including padding for rotation\r\nconst svgSize = computed(() => {\r\n  const diagonal = Math.sqrt(\r\n    width.value * width.value + height.value * height.value,\r\n  );\r\n  return {\r\n    width: diagonal,\r\n    height: diagonal,\r\n  };\r\n});\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\n// Rotate functionality\r\nlet isRotating = false;\r\nlet startAngle = 0;\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    height: `${props.element.size.height}px`,\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nconst shapeStyle = computed(() => {\r\n  const style = props.element.style || {};\r\n  let strokeDasharray = \"none\";\r\n\r\n  if (props.element.content === \"line\" && style.lineStyle) {\r\n    switch (style.lineStyle) {\r\n    case \"dashed\":\r\n      strokeDasharray = \"8,4\";\r\n      break;\r\n    case \"dotted\":\r\n      strokeDasharray = \"2,2\";\r\n      break;\r\n    default:\r\n      strokeDasharray = \"none\";\r\n    }\r\n  }\r\n\r\n  // Ensure fill is never undefined for PDF export\r\n  const fillColor = style.fill || \"none\";\r\n\r\n  return {\r\n    fill: fillColor,\r\n    stroke: style.stroke || \"#000000\",\r\n    strokeWidth: `${style.strokeWidth || 1}px`,\r\n    strokeDasharray,\r\n    opacity: style.opacity || 1,\r\n    // Add vector-effect to ensure consistent stroke width\r\n    vectorEffect: \"non-scaling-stroke\",\r\n  };\r\n});\r\n\r\nfunction getShapeComponent() {\r\n  const shapeType = props.element.content;\r\n\r\n  switch (shapeType) {\r\n  case \"rectangle\":\r\n    return h(\"rect\", {\r\n      x: 0,\r\n      y: 0,\r\n      width: width.value,\r\n      height: height.value,\r\n      rx: props.element.style?.borderRadius || 0,\r\n      ...shapeStyle.value,\r\n    });\r\n  case \"circle\":\r\n    return h(\"ellipse\", {\r\n      cx: width.value / 2,\r\n      cy: height.value / 2,\r\n      rx: width.value / 2,\r\n      ry: height.value / 2,\r\n      ...shapeStyle.value,\r\n    });\r\n  case \"triangle\":\r\n    const points = `${width.value / 2},0 ${width.value},${height.value} 0,${\r\n      height.value\r\n    }`;\r\n    return h(\"polygon\", {\r\n      points,\r\n      ...shapeStyle.value,\r\n    });\r\n  case \"line\":\r\n    return h(\"line\", {\r\n      x1: 0,\r\n      y1: height.value / 2,\r\n      x2: width.value,\r\n      y2: height.value / 2,\r\n      ...shapeStyle.value,\r\n    });\r\n  case \"arrow\":\r\n    const arrowPath = `M0,${height.value / 2} L${width.value - 10},${\r\n      height.value / 2\r\n    } L${width.value - 15},${height.value / 4} L${width.value},${\r\n      height.value / 2\r\n    } L${width.value - 15},${(3 * height.value) / 4} L${width.value - 10},${\r\n      height.value / 2\r\n    }`;\r\n    return h(\"path\", {\r\n      d: arrowPath,\r\n      ...shapeStyle.value,\r\n    });\r\n  default:\r\n    return h(\"rect\", {\r\n      x: 0,\r\n      y: 0,\r\n      width: width.value,\r\n      height: height.value,\r\n      ...shapeStyle.value,\r\n    });\r\n  }\r\n}\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  // Calculate new position\r\n  let newX = startLeft + deltaX;\r\n  let newY = startTop + deltaY;\r\n\r\n  // Snap to grid (10px grid)\r\n  const gridSize = 10;\r\n  newX = Math.round(newX / gridSize) * gridSize;\r\n  newY = Math.round(newY / gridSize) * gridSize;\r\n\r\n  const newPosition = {\r\n    x: newX,\r\n    y: newY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  // Calculate new size\r\n  let newWidth = Math.max(15, startWidth + deltaX);\r\n  let newHeight = Math.max(15, startHeight + deltaY);\r\n\r\n  // Snap to grid (10px grid)\r\n  const gridSize = 10;\r\n  newWidth = Math.round(newWidth / gridSize) * gridSize;\r\n  newHeight = Math.round(newHeight / gridSize) * gridSize;\r\n\r\n  const newSize = {\r\n    width: newWidth,\r\n    height: newHeight,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction startRotate(event: MouseEvent) {\r\n  isRotating = true;\r\n  const rect = (event.target as HTMLElement)\r\n    .closest(\".shape-element\")\r\n    ?.getBoundingClientRect();\r\n  if (!rect) return;\r\n\r\n  const centerX = rect.left + rect.width / 2;\r\n  const centerY = rect.top + rect.height / 2;\r\n  startAngle = Math.atan2(event.clientY - centerY, event.clientX - centerX);\r\n\r\n  document.addEventListener(\"mousemove\", onRotate);\r\n  document.addEventListener(\"mouseup\", stopRotate);\r\n}\r\n\r\nfunction onRotate(event: MouseEvent) {\r\n  if (!isRotating) return;\r\n\r\n  const rect = (event.target as HTMLElement)\r\n    .closest(\".shape-element\")\r\n    ?.getBoundingClientRect();\r\n  if (!rect) return;\r\n\r\n  const centerX = rect.left + rect.width / 2;\r\n  const centerY = rect.top + rect.height / 2;\r\n  const angle = Math.atan2(event.clientY - centerY, event.clientX - centerX);\r\n\r\n  let newRotation =\r\n    ((angle - startAngle) * (180 / Math.PI) +\r\n      (props.element.style?.rotation || 0)) %\r\n    360;\r\n  if (newRotation < 0) newRotation += 360;\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      rotation: newRotation,\r\n    },\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopRotate() {\r\n  isRotating = false;\r\n  document.removeEventListener(\"mousemove\", onRotate);\r\n  document.removeEventListener(\"mouseup\", stopRotate);\r\n}\r\n\r\n// Handle resize from ResizeHandles component\r\nfunction handleResize(newSize: Size, newPosition: Position) {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.element {\r\n  position: absolute;\r\n  cursor: move;\r\n\r\n  &.selected {\r\n    outline: 2px solid var(--primary);\r\n  }\r\n}\r\n\r\n.shape-element {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.shape-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n/* Old resize handle removed - now using ResizeHandles component */\r\n\r\n.rotate-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  top: -20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border-radius: 50%;\r\n  cursor: grab;\r\n  z-index: 1;\r\n\r\n  &:active {\r\n    cursor: grabbing;\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\SignatureElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":133,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":133,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":144,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":144,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":163,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":163,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":169,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":169,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":180,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":180,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":199,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":199,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":205,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":205,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":209,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":209,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":256,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":256,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":262,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":262,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":277,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":277,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":282,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":282,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"signature-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div\r\n      v-if=\"!element.content\"\r\n      class=\"signature-placeholder\"\r\n      @click=\"openSignatureCanvas\"\r\n    >\r\n      <span>{{ element.style?.label || \"Click to sign\" }}</span>\r\n    </div>\r\n    <div v-else class=\"signature-content\">\r\n      <img :src=\"element.content\" alt=\"Signature\" class=\"signature-image\" />\r\n      <div v-if=\"isSelected\" class=\"signature-actions-overlay\">\r\n        <v-btn\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          class=\"action-btn\"\r\n          @click=\"openSignatureCanvas\"\r\n        >\r\n          <v-icon left>mdi-pencil</v-icon>\r\n          Edit\r\n        </v-btn>\r\n        <v-btn\r\n          color=\"error\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          class=\"action-btn\"\r\n          @click=\"clearSavedSignature\"\r\n        >\r\n          <v-icon left>mdi-delete</v-icon>\r\n          Clear\r\n        </v-btn>\r\n      </div>\r\n    </div>\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle\"\r\n      @mousedown.stop=\"startResize\"\r\n    ></div>\r\n\r\n    <!-- Signature canvas dialog -->\r\n    <v-dialog v-model=\"signatureDialog\" max-width=\"600\">\r\n      <v-card>\r\n        <v-card-title>{{\r\n          element.content ? \"Edit Signature\" : \"Add Signature\"\r\n        }}</v-card-title>\r\n        <v-card-text>\r\n          <div class=\"signature-canvas-container\">\r\n            <canvas ref=\"signatureCanvas\" class=\"signature-canvas\"></canvas>\r\n          </div>\r\n          <div class=\"signature-actions\">\r\n            <v-btn text @click=\"clearSignature\">Clear</v-btn>\r\n          </div>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"signatureDialog = false\">Cancel</v-btn>\r\n          <v-btn color=\"primary\" @click=\"saveSignature\">Save Signature</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- Confirm clear signature dialog -->\r\n    <v-dialog v-model=\"confirmClearDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>Clear Signature</v-card-title>\r\n        <v-card-text>\r\n          Are you sure you want to clear this signature?\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"confirmClearDialog = false\">Cancel</v-btn>\r\n          <v-btn color=\"error\" @click=\"confirmClearSignature\">Clear</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, watch } from \"vue\";\r\nimport SignaturePad from \"signature_pad\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\n// Signature pad\r\nconst signatureDialog = ref(false);\r\nconst confirmClearDialog = ref(false);\r\nconst signatureCanvas = ref<HTMLCanvasElement | null>(null);\r\nlet signaturePad: SignaturePad | null = null;\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    height: `${props.element.size.height}px`,\r\n    borderBottom: props.element.style?.borderBottom || \"1px solid #000000\",\r\n    backgroundColor: \"white\",\r\n    borderRadius: \"4px\",\r\n    border: props.isSelected\r\n      ? \"2px solid var(--primary)\"\r\n      : \"1px solid var(--border)\",\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newPosition = {\r\n    x: startLeft + deltaX,\r\n    y: startTop + deltaY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newSize = {\r\n    width: Math.max(150, startWidth + deltaX),\r\n    height: Math.max(50, startHeight + deltaY),\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction openSignatureCanvas() {\r\n  signatureDialog.value = true;\r\n}\r\n\r\nfunction setupSignaturePad() {\r\n  if (signatureCanvas.value && !signaturePad) {\r\n    const canvas = signatureCanvas.value;\r\n    canvas.width = 560;\r\n    canvas.height = 260;\r\n\r\n    signaturePad = new SignaturePad(canvas, {\r\n      backgroundColor: \"rgb(255, 255, 255)\",\r\n      penColor: \"rgb(0, 0, 0)\",\r\n      minWidth: 0.5,\r\n      maxWidth: 2.5,\r\n      throttle: 16,\r\n      velocityFilterWeight: 0.7,\r\n    });\r\n\r\n    // If we're editing an existing signature, load it into the pad\r\n    if (props.element.content) {\r\n      // Create a temporary image to load the signature\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        if (signaturePad && canvas) {\r\n          // Clear the pad first\r\n          signaturePad.clear();\r\n\r\n          // Get the canvas context\r\n          const ctx = canvas.getContext(\"2d\");\r\n          if (ctx) {\r\n            // Draw the image centered and scaled to fit\r\n            const scale =\r\n              Math.min(canvas.width / img.width, canvas.height / img.height) *\r\n              0.9; // Scale to 90% to leave some margin\r\n\r\n            const x = (canvas.width - img.width * scale) / 2;\r\n            const y = (canvas.height - img.height * scale) / 2;\r\n\r\n            ctx.drawImage(img, x, y, img.width * scale, img.height * scale);\r\n\r\n            // Update the signature pad data from the canvas\r\n            signaturePad.fromDataURL(canvas.toDataURL());\r\n          }\r\n        }\r\n      };\r\n      img.src = props.element.content;\r\n    }\r\n  }\r\n}\r\n\r\nfunction clearSignature() {\r\n  if (signaturePad) {\r\n    signaturePad.clear();\r\n  }\r\n}\r\n\r\nfunction saveSignature() {\r\n  if (signaturePad && !signaturePad.isEmpty()) {\r\n    const signatureData = signaturePad.toDataURL();\r\n\r\n    const updatedElement = {\r\n      ...props.element,\r\n      content: signatureData,\r\n    };\r\n\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n\r\n  signatureDialog.value = false;\r\n}\r\n\r\nfunction clearSavedSignature() {\r\n  // Show the confirmation dialog\r\n  confirmClearDialog.value = true;\r\n}\r\n\r\nfunction confirmClearSignature() {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: \"\", // Clear the signature content\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  // Close the dialog\r\n  confirmClearDialog.value = false;\r\n}\r\n\r\nwatch(signatureDialog, (isOpen) => {\r\n  if (isOpen) {\r\n    // Wait for the DOM to update\r\n    setTimeout(() => {\r\n      setupSignaturePad();\r\n    }, 100);\r\n  } else {\r\n    signaturePad = null;\r\n  }\r\n});\r\n\r\nonMounted(() => {\r\n  // Initialize if the dialog is already open\r\n  if (signatureDialog.value) {\r\n    setupSignaturePad();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.signature-element {\r\n  position: absolute;\r\n  cursor: move;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n\r\n  &.selected {\r\n    outline: none;\r\n  }\r\n}\r\n\r\n.signature-placeholder {\r\n  cursor: pointer;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: var(--text-secondary);\r\n  font-style: italic;\r\n}\r\n\r\n.signature-content {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.signature-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: contain;\r\n  object-position: bottom;\r\n}\r\n\r\n.signature-actions-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 16px;\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n\r\n  .signature-content:hover & {\r\n    opacity: 1;\r\n  }\r\n\r\n  .action-btn {\r\n    backdrop-filter: blur(4px);\r\n    background-color: rgba(255, 255, 255, 0.8);\r\n  }\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n  border-radius: 2px;\r\n}\r\n\r\n.signature-canvas-container {\r\n  border: 1px solid var(--border);\r\n  margin-bottom: 16px;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.signature-canvas {\r\n  width: 100%;\r\n  height: 260px;\r\n  background-color: white;\r\n  touch-action: none;\r\n}\r\n\r\n.signature-actions {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\SimpleTableElement.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":307,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":307,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":318,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":318,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":337,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":337,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":343,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":343,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":354,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":354,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":373,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":373,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":379,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":379,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":400,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":400,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":428,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":428,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":443,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":443,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteRow' is defined but never used. Allowed unused vars must match /^_/u.","line":443,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":443,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":450,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":450,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":473,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":473,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":486,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":486,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deleteColumn' is defined but never used. Allowed unused vars must match /^_/u.","line":486,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":486,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":493,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":493,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"table-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <!-- Table toolbar (visible when table is selected) -->\r\n    <div v-if=\"isSelected\" class=\"table-toolbar\">\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn icon\n                 size=\"small\"\n                 title=\"Add row\"\n                 @click=\"addRow\"\n          >\r\n            <v-icon>mdi-table-row-plus-after</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            title=\"Delete row\"\r\n            :disabled=\"element.content.rows.length <= 1\"\r\n            @click=\"showDeleteRowDialog = true\"\r\n          >\r\n            <v-icon>mdi-table-row-remove</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn icon\n                 size=\"small\"\n                 title=\"Add column\"\n                 @click=\"addColumn\"\n          >\r\n            <v-icon>mdi-table-column-plus-after</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            title=\"Delete column\"\r\n            :disabled=\"element.content.headers.length <= 1\"\r\n            @click=\"showDeleteColumnDialog = true\"\r\n          >\r\n            <v-icon>mdi-table-column-remove</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Table content -->\r\n    <div class=\"table-container\">\r\n      <table class=\"editor-table\" :style=\"tableStyle\">\r\n        <thead>\r\n          <tr>\r\n            <th\r\n              v-for=\"(header, index) in element.content.headers\"\r\n              :key=\"index\"\r\n              :style=\"headerStyle\"\r\n              @dblclick=\"editCell('header', index)\"\r\n            >\r\n              {{ header }}\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(row, rowIndex) in element.content.rows\" :key=\"rowIndex\">\r\n            <td\r\n              v-for=\"(cell, cellIndex) in row\"\r\n              :key=\"cellIndex\"\r\n              :style=\"cellStyle\"\r\n              @dblclick=\"editCell('cell', rowIndex, cellIndex)\"\r\n            >\r\n              {{ cell }}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- Resize handle -->\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle\"\r\n      @mousedown.stop=\"startResize\"\r\n    ></div>\r\n\r\n    <!-- Cell edit dialog -->\r\n    <v-dialog v-model=\"editDialog\" max-width=\"500\">\r\n      <v-card>\r\n        <v-card-title>Edit\r\n          {{ editingCellType === \"header\" ? \"Header\" : \"Cell\" }}</v-card-title>\r\n        <v-card-text>\r\n          <v-textarea\r\n            v-model=\"editingCellValue\"\r\n            variant=\"outlined\"\r\n            auto-focus\r\n            rows=\"3\"\r\n            hide-details\r\n            class=\"mt-2\"\r\n          ></v-textarea>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"editDialog = false\">Cancel</v-btn>\r\n          <v-btn color=\"primary\" @click=\"saveCellEdit\">Save</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- Delete Row Dialog -->\r\n    <v-dialog v-model=\"showDeleteRowDialog\" max-width=\"500\">\r\n      <v-card>\r\n        <v-card-title>Delete Row</v-card-title>\r\n        <v-card-text>\r\n          <p>Select the row to delete:</p>\r\n          <v-select\r\n            v-model=\"rowToDelete\"\r\n            :items=\"rowOptions\"\r\n            item-title=\"text\"\r\n            item-value=\"value\"\r\n            variant=\"outlined\"\r\n            density=\"compact\"\r\n            return-object\r\n            class=\"mt-2\"\r\n          ></v-select>\r\n\r\n          <!-- Row preview -->\r\n          <div v-if=\"rowToDelete\" class=\"row-preview mt-4\">\r\n            <div class=\"preview-label\">Preview of row to delete:</div>\r\n            <div class=\"preview-content\">\r\n              <div\r\n                v-for=\"(cell, index) in element.content.rows[rowToDelete.value]\"\r\n                :key=\"index\"\r\n                class=\"preview-cell\"\r\n              >\r\n                {{ cell || \"(empty)\" }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showDeleteRowDialog = false\">Cancel</v-btn>\r\n          <v-btn\r\n            color=\"error\"\r\n            :disabled=\"!rowToDelete\"\r\n            @click=\"deleteSelectedRow\"\r\n          >\r\n            Delete\r\n          </v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- Delete Column Dialog -->\r\n    <v-dialog v-model=\"showDeleteColumnDialog\" max-width=\"500\">\r\n      <v-card>\r\n        <v-card-title>Delete Column</v-card-title>\r\n        <v-card-text>\r\n          <p>Select the column to delete:</p>\r\n          <v-select\r\n            v-model=\"columnToDelete\"\r\n            :items=\"columnOptions\"\r\n            item-title=\"text\"\r\n            item-value=\"value\"\r\n            variant=\"outlined\"\r\n            density=\"compact\"\r\n            return-object\r\n            class=\"mt-2\"\r\n          ></v-select>\r\n\r\n          <!-- Column preview -->\r\n          <div v-if=\"columnToDelete\" class=\"column-preview mt-4\">\r\n            <div class=\"preview-label\">Preview of column to delete:</div>\r\n            <div class=\"preview-content\">\r\n              <div class=\"preview-header\">\r\n                {{ element.content.headers[columnToDelete.value] || \"(empty)\" }}\r\n              </div>\r\n              <div\r\n                v-for=\"(row, rowIndex) in element.content.rows\"\r\n                :key=\"rowIndex\"\r\n                class=\"preview-cell\"\r\n              >\r\n                {{ row[columnToDelete.value] || \"(empty)\" }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"showDeleteColumnDialog = false\">Cancel</v-btn>\r\n          <v-btn\r\n            color=\"error\"\r\n            :disabled=\"!columnToDelete\"\r\n            @click=\"deleteSelectedColumn\"\r\n          >\r\n            Delete\r\n          </v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, ref } from \"vue\";\r\nimport { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\n// Cell editing\r\nconst editDialog = ref(false);\r\nconst editingCellValue = ref(\"\");\r\nconst editingCellType = ref<\"header\" | \"cell\">(\"cell\");\r\nconst editingRowIndex = ref(-1);\r\nconst editingCellIndex = ref(-1);\r\n\r\n// Row deletion\r\nconst showDeleteRowDialog = ref(false);\r\nconst rowToDelete = ref<{ text: string; value: number } | null>(null);\r\nconst rowOptions = computed(() => {\r\n  return props.element.content.rows.map((row, index) => ({\r\n    text: `Row ${index + 1}`,\r\n    value: index,\r\n  }));\r\n});\r\n\r\n// Column deletion\r\nconst showDeleteColumnDialog = ref(false);\r\nconst columnToDelete = ref<{ text: string; value: number } | null>(null);\r\nconst columnOptions = computed(() => {\r\n  return props.element.content.headers.map((header, index) => ({\r\n    text: `Column ${index + 1}: ${header}`,\r\n    value: index,\r\n  }));\r\n});\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    minHeight: `${props.element.size.height}px`,\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nconst tableStyle = computed(() => {\r\n  const style = props.element.style || {};\r\n  return {\r\n    borderCollapse: \"collapse\",\r\n    width: \"100%\",\r\n    borderColor: style.borderColor || \"#E2E8F0\",\r\n    borderStyle: style.borderStyle || \"solid\",\r\n    borderWidth: `${style.borderWidth || 1}px`,\r\n  };\r\n});\r\n\r\nconst headerStyle = computed(() => {\r\n  const style = props.element.style || {};\r\n  return {\r\n    backgroundColor: style.headerBackgroundColor || \"#F8F9FA\",\r\n    color: style.headerTextColor || \"#000000\",\r\n    padding: \"8px 12px\",\r\n    textAlign: \"left\",\r\n    fontWeight: 500,\r\n    borderColor: style.borderColor || \"#E2E8F0\",\r\n    borderStyle: style.borderStyle || \"solid\",\r\n    borderWidth: `${style.borderWidth || 1}px`,\r\n  };\r\n});\r\n\r\nconst cellStyle = computed(() => {\r\n  const style = props.element.style || {};\r\n  return {\r\n    backgroundColor: style.cellBackgroundColor || \"#FFFFFF\",\r\n    color: style.cellTextColor || \"#000000\",\r\n    padding: \"8px 12px\",\r\n    borderColor: style.borderColor || \"#E2E8F0\",\r\n    borderStyle: style.borderStyle || \"solid\",\r\n    borderWidth: `${style.borderWidth || 1}px`,\r\n  };\r\n});\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newPosition = {\r\n    x: startLeft + deltaX,\r\n    y: startTop + deltaY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newSize = {\r\n    width: Math.max(300, startWidth + deltaX),\r\n    height: Math.max(100, startHeight + deltaY),\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction editCell(\r\n  type: \"header\" | \"cell\",\r\n  rowIndex: number,\r\n  cellIndex?: number,\r\n) {\r\n  editingCellType.value = type;\r\n  editingRowIndex.value = rowIndex;\r\n\r\n  if (type === \"header\") {\r\n    editingCellValue.value = props.element.content.headers[rowIndex];\r\n    editingCellIndex.value = -1;\r\n  } else {\r\n    if (cellIndex !== undefined) {\r\n      editingCellValue.value = props.element.content.rows[rowIndex][cellIndex];\r\n      editingCellIndex.value = cellIndex;\r\n    }\r\n  }\r\n\r\n  editDialog.value = true;\r\n}\r\n\r\nfunction saveCellEdit() {\r\n  const updatedElement = { ...props.element };\r\n\r\n  if (editingCellType.value === \"header\") {\r\n    updatedElement.content = {\r\n      ...updatedElement.content,\r\n      headers: [...updatedElement.content.headers],\r\n    };\r\n    updatedElement.content.headers[editingRowIndex.value] =\r\n      editingCellValue.value;\r\n  } else {\r\n    updatedElement.content = {\r\n      ...updatedElement.content,\r\n      rows: [...updatedElement.content.rows],\r\n    };\r\n\r\n    updatedElement.content.rows[editingRowIndex.value] = [\r\n      ...updatedElement.content.rows[editingRowIndex.value],\r\n    ];\r\n    updatedElement.content.rows[editingRowIndex.value][editingCellIndex.value] =\r\n      editingCellValue.value;\r\n  }\r\n\r\n  emit(\"update:element\", updatedElement);\r\n  editDialog.value = false;\r\n}\r\n\r\n// Table structure operations\r\nfunction addRow() {\r\n  // Create new row with empty cells\r\n  const newRow = new Array(props.element.content.headers.length).fill(\"\");\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    rows: [...updatedElement.content.rows, newRow],\r\n  };\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction deleteRow() {\r\n  if (props.element.content.rows.length <= 1) return;\r\n\r\n  // Show the delete row dialog\r\n  showDeleteRowDialog.value = true;\r\n}\r\n\r\nfunction deleteSelectedRow() {\r\n  if (!rowToDelete.value || props.element.content.rows.length <= 1) return;\r\n\r\n  const rowIndex = rowToDelete.value.value;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    rows: [...updatedElement.content.rows],\r\n  };\r\n\r\n  // Remove the selected row\r\n  updatedElement.content.rows.splice(rowIndex, 1);\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  // Close dialog and reset selection\r\n  showDeleteRowDialog.value = false;\r\n  rowToDelete.value = null;\r\n}\r\n\r\nfunction addColumn() {\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    headers: [...updatedElement.content.headers, \"New Column\"],\r\n    rows: updatedElement.content.rows.map((row) => [...row, \"\"]),\r\n  };\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction deleteColumn() {\r\n  if (props.element.content.headers.length <= 1) return;\r\n\r\n  // Show the delete column dialog\r\n  showDeleteColumnDialog.value = true;\r\n}\r\n\r\nfunction deleteSelectedColumn() {\r\n  if (!columnToDelete.value || props.element.content.headers.length <= 1)\r\n    return;\r\n\r\n  const columnIndex = columnToDelete.value.value;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    headers: [...updatedElement.content.headers],\r\n    rows: updatedElement.content.rows.map((row) => [...row]),\r\n  };\r\n\r\n  // Remove the selected header\r\n  updatedElement.content.headers.splice(columnIndex, 1);\r\n\r\n  // Remove the selected cell from each row\r\n  updatedElement.content.rows.forEach((row) => {\r\n    row.splice(columnIndex, 1);\r\n  });\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  // Close dialog and reset selection\r\n  showDeleteColumnDialog.value = false;\r\n  columnToDelete.value = null;\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.element {\r\n  position: absolute;\r\n  cursor: move;\r\n\r\n  &.selected {\r\n    outline: 2px solid var(--primary);\r\n  }\r\n}\r\n\r\n.table-element {\r\n  overflow: visible;\r\n  background-color: white;\r\n}\r\n\r\n.table-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: auto;\r\n}\r\n\r\n.editor-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n}\r\n\r\n// Toolbar\r\n.table-toolbar {\r\n  position: absolute;\r\n  top: -40px;\r\n  left: 0;\r\n  right: 0;\r\n  height: 40px;\r\n  background-color: var(--surface);\r\n  border: 1px solid var(--border);\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  z-index: 10;\r\n}\r\n\r\n.toolbar-section {\r\n  margin-right: 16px;\r\n\r\n  &:last-child {\r\n    margin-right: 0;\r\n    margin-left: auto;\r\n  }\r\n}\r\n\r\n// Preview styles for dialogs\r\n.preview-label {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  margin-bottom: 8px;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.preview-content {\r\n  border: 1px solid var(--border);\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.preview-header {\r\n  background-color: var(--surface-variant);\r\n  padding: 8px 12px;\r\n  font-weight: 500;\r\n  border-bottom: 1px solid var(--border);\r\n}\r\n\r\n.preview-cell {\r\n  padding: 8px 12px;\r\n  border-bottom: 1px solid var(--border);\r\n\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n}\r\n\r\n.row-preview .preview-content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  .preview-cell {\r\n    flex: 1;\r\n    min-width: 100px;\r\n    border-right: 1px solid var(--border);\r\n\r\n    &:last-child {\r\n      border-right: none;\r\n    }\r\n  }\r\n}\r\n\r\n.column-preview .preview-content {\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\TableElement.vue","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":520,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":520,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16766,16769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16766,16769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":523,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16864,16867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16864,16867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":567,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":567,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":585,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":585,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":611,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":611,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":624,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":624,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":643,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":643,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":650,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":650,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":664,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":664,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":689,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":689,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":696,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":696,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":712,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":712,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":737,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":737,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":744,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":744,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":760,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":760,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":785,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":785,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":850,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":850,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":893,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":893,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":923,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":923,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":952,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":952,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28321,28324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28321,28324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":960,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":960,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":980,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":980,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1042,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1042,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1065,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1065,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1069,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1069,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1084,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1084,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1115,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1115,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1123,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1123,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1131,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1131,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1187,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1187,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1211,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1211,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1235,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1235,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1270,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1270,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1280,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1280,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37952,37955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37952,37955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1287,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1287,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38160,38163],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38160,38163],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1295,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1295,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1307,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1307,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38758,38761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38758,38761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1314,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1314,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38970,38973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38970,38973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1322,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1322,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1334,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1334,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39565,39568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39565,39568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1341,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1341,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39751,39754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39751,39754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1363,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1363,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1394,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1394,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1399,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1399,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1415,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1415,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1426,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1426,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"table-element element\"\r\n    :class=\"{ selected: isSelected, 'editing-active': isEditingActive }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"handleElementMouseDown\"\r\n    @click.stop=\"handleElementClick\"\r\n  >\r\n    <!-- Table toolbar (visible when table is selected) -->\r\n    <div v-if=\"isSelected && !isEditingActive\" class=\"table-toolbar\">\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn icon\r\n                 size=\"small\"\r\n                 title=\"Add row above\"\r\n                 @click=\"addRowAbove\"\r\n          >\r\n            <v-icon>mdi-table-row-plus-before</v-icon>\r\n          </v-btn>\r\n          <v-btn icon\r\n                 size=\"small\"\r\n                 title=\"Add row below\"\r\n                 @click=\"addRowBelow\"\r\n          >\r\n            <v-icon>mdi-table-row-plus-after</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            title=\"Delete row\"\r\n            :disabled=\"element.content.rows.length <= 1\"\r\n            @click=\"deleteRow\"\r\n          >\r\n            <v-icon>mdi-table-row-remove</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            title=\"Add column left\"\r\n            @click=\"addColumnLeft\"\r\n          >\r\n            <v-icon>mdi-table-column-plus-before</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            title=\"Add column right\"\r\n            @click=\"addColumnRight\"\r\n          >\r\n            <v-icon>mdi-table-column-plus-after</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            title=\"Delete column\"\r\n            :disabled=\"element.content.headers.length <= 1\"\r\n            @click=\"deleteColumn\"\r\n          >\r\n            <v-icon>mdi-table-column-remove</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn icon\r\n                 size=\"small\"\r\n                 title=\"Edit table\"\r\n                 @click=\"startEditing\"\r\n          >\r\n            <v-icon>mdi-pencil</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Cell editing toolbar (visible when editing is active) -->\r\n    <div v-if=\"isEditingActive\" class=\"cell-editing-toolbar\">\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            :class=\"{ active: activeCellFormatting.bold }\"\r\n            @click=\"applyFormatting('bold')\"\r\n          >\r\n            <v-icon>mdi-format-bold</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            :class=\"{ active: activeCellFormatting.italic }\"\r\n            @click=\"applyFormatting('italic')\"\r\n          >\r\n            <v-icon>mdi-format-italic</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            :class=\"{ active: activeCellFormatting.underline }\"\r\n            @click=\"applyFormatting('underline')\"\r\n          >\r\n            <v-icon>mdi-format-underline</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n\r\n      <div class=\"toolbar-section\">\r\n        <v-btn-group variant=\"outlined\" density=\"compact\">\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            :class=\"{ active: activeCellFormatting.align === 'left' }\"\r\n            @click=\"applyAlignment('left')\"\r\n          >\r\n            <v-icon>mdi-format-align-left</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            :class=\"{ active: activeCellFormatting.align === 'center' }\"\r\n            @click=\"applyAlignment('center')\"\r\n          >\r\n            <v-icon>mdi-format-align-center</v-icon>\r\n          </v-btn>\r\n          <v-btn\r\n            icon\r\n            size=\"small\"\r\n            :class=\"{ active: activeCellFormatting.align === 'right' }\"\r\n            @click=\"applyAlignment('right')\"\r\n          >\r\n            <v-icon>mdi-format-align-right</v-icon>\r\n          </v-btn>\r\n        </v-btn-group>\r\n      </div>\r\n\r\n      <div class=\"toolbar-section\">\r\n        <v-btn\r\n          icon\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          title=\"Finish editing\"\r\n          @click=\"finishEditing\"\r\n        >\r\n          <v-icon>mdi-check</v-icon>\r\n        </v-btn>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Editable table -->\r\n    <div class=\"table-container\">\r\n      <table class=\"editor-table\" :style=\"tableStyle\">\r\n        <thead>\r\n          <tr>\r\n            <th\r\n              v-for=\"(header, index) in element.content.headers\"\r\n              :key=\"index\"\r\n              :style=\"getHeaderStyle(index)\"\r\n              :class=\"{\r\n                'selected-cell': isHeaderSelected(index),\r\n                'active-cell': isHeaderActive(index),\r\n              }\"\r\n              @click.stop=\"selectCell('header', -1, index)\"\r\n              @dblclick.stop=\"activateCell('header', -1, index)\"\r\n            >\r\n              <div v-if=\"!isHeaderActive(index)\" class=\"cell-content\">\r\n                <SafeHtml\r\n                  :html=\"formatCellContent(header, getHeaderFormatting(index))\"\r\n                />\r\n              </div>\r\n              <div v-else class=\"cell-editor\">\r\n                <div\r\n                  ref=\"activeHeaderEditor\"\r\n                  contenteditable=\"true\"\r\n                  class=\"editable-content\"\r\n                  @blur=\"updateCellContent\"\r\n                  @keydown=\"handleCellKeyDown\"\r\n                  v-text=\"header\"\r\n                ></div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(row, rowIndex) in element.content.rows\" :key=\"rowIndex\">\r\n            <td\r\n              v-for=\"(cell, cellIndex) in row\"\r\n              :key=\"cellIndex\"\r\n              :style=\"getCellStyle(rowIndex, cellIndex)\"\r\n              :class=\"{\r\n                'selected-cell': isCellSelected(rowIndex, cellIndex),\r\n                'active-cell': isCellActive(rowIndex, cellIndex),\r\n              }\"\r\n              @click.stop=\"selectCell('cell', rowIndex, cellIndex)\"\r\n              @dblclick.stop=\"activateCell('cell', rowIndex, cellIndex)\"\r\n            >\r\n              <div\r\n                v-if=\"!isCellActive(rowIndex, cellIndex)\"\r\n                class=\"cell-content\"\r\n              >\r\n                <SafeHtml\r\n                  :html=\"formatCellContent(\r\n                    cell,\r\n                    getCellFormatting(rowIndex, cellIndex)\r\n                  )\"\r\n                />\r\n              </div>\r\n              <div v-else class=\"cell-editor\">\r\n                <div\r\n                  ref=\"activeCellEditor\"\r\n                  contenteditable=\"true\"\r\n                  class=\"editable-content\"\r\n                  @blur=\"updateCellContent\"\r\n                  @keydown=\"handleCellKeyDown\"\r\n                  v-text=\"cell\"\r\n                ></div>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <!-- Resize handles -->\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle bottom-right\"\r\n      @mousedown.stop=\"(e: MouseEvent) => startResize('both', e)\"\r\n    ></div>\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle bottom\"\r\n      @mousedown.stop=\"(e: MouseEvent) => startResize('height', e)\"\r\n    ></div>\r\n    <div\r\n      v-if=\"isSelected\"\r\n      class=\"resize-handle right\"\r\n      @mousedown.stop=\"(e: MouseEvent) => startResize('width', e)\"\r\n    ></div>\r\n\r\n    <!-- Column resize handles (visible when editing is active) -->\r\n    <div v-if=\"isEditingActive\" class=\"column-resize-handles\">\r\n      <div\r\n        v-for=\"(_, index) in element.content.headers.slice(0, -1)\"\r\n        :key=\"index\"\r\n        class=\"column-resize-handle\"\r\n        :style=\"{ left: getColumnPosition(index) + 'px' }\"\r\n        @mousedown.stop=\"(e: MouseEvent) => startColumnResize(index, e)\"\r\n      ></div>\r\n    </div>\r\n\r\n    <!-- Row resize handles (visible when editing is active) -->\r\n    <div v-if=\"isEditingActive\" class=\"row-resize-handles\">\r\n      <div\r\n        v-for=\"(_, index) in element.content.rows.slice(0, -1)\"\r\n        :key=\"index\"\r\n        class=\"row-resize-handle\"\r\n        :style=\"{ top: getRowPosition(index) + 'px' }\"\r\n        @mousedown.stop=\"(e: MouseEvent) => startRowResize(index, e)\"\r\n      ></div>\r\n    </div>\r\n\r\n    <!-- Context menu -->\r\n    <v-menu\r\n      v-model=\"showContextMenu\"\r\n      :position-x=\"contextMenuX\"\r\n      :position-y=\"contextMenuY\"\r\n      absolute\r\n      offset-y\r\n    >\r\n      <v-list dense>\r\n        <v-list-item\r\n          :disabled=\"!canMergeCells\"\r\n          @click=\"contextMenuAction('merge')\"\r\n        >\r\n          <v-list-item-title>Merge cells</v-list-item-title>\r\n        </v-list-item>\r\n        <v-list-item\r\n          :disabled=\"!canSplitCell\"\r\n          @click=\"contextMenuAction('split')\"\r\n        >\r\n          <v-list-item-title>Split cell</v-list-item-title>\r\n        </v-list-item>\r\n        <v-divider></v-divider>\r\n        <v-list-item @click=\"contextMenuAction('insertRowAbove')\">\r\n          <v-list-item-title>Insert row above</v-list-item-title>\r\n        </v-list-item>\r\n        <v-list-item @click=\"contextMenuAction('insertRowBelow')\">\r\n          <v-list-item-title>Insert row below</v-list-item-title>\r\n        </v-list-item>\r\n        <v-list-item @click=\"contextMenuAction('insertColumnLeft')\">\r\n          <v-list-item-title>Insert column left</v-list-item-title>\r\n        </v-list-item>\r\n        <v-list-item @click=\"contextMenuAction('insertColumnRight')\">\r\n          <v-list-item-title>Insert column right</v-list-item-title>\r\n        </v-list-item>\r\n        <v-divider></v-divider>\r\n        <v-list-item\r\n          :disabled=\"element.content.rows.length <= 1\"\r\n          @click=\"contextMenuAction('deleteRow')\"\r\n        >\r\n          <v-list-item-title>Delete row</v-list-item-title>\r\n        </v-list-item>\r\n        <v-list-item\r\n          :disabled=\"element.content.headers.length <= 1\"\r\n          @click=\"contextMenuAction('deleteColumn')\"\r\n        >\r\n          <v-list-item-title>Delete column</v-list-item-title>\r\n        </v-list-item>\r\n      </v-list>\r\n    </v-menu>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, ref, nextTick, onMounted, onBeforeUnmount } from \"vue\";\r\nimport { DocumentElement } from \"../../../types/document\";\r\nimport type { CSSProperties } from \"vue\";\r\nimport SafeHtml from \"../../common/SafeHtml.vue\";\r\n\r\n// Import styles\r\nimport \"../../../assets/styles/components/tableElement.scss\";\r\n\r\ninterface CellFormatting {\r\n  bold?: boolean;\r\n  italic?: boolean;\r\n  underline?: boolean;\r\n  align?: \"left\" | \"center\" | \"right\";\r\n  backgroundColor?: string;\r\n  color?: string;\r\n}\r\n\r\ninterface CellPosition {\r\n  type: \"header\" | \"cell\";\r\n  rowIndex: number;\r\n  cellIndex: number;\r\n}\r\n\r\ninterface MergedCell {\r\n  rowspan: number;\r\n  colspan: number;\r\n}\r\n\r\ninterface TableData {\r\n  headers: string[];\r\n  rows: string[][];\r\n  headerFormatting?: CellFormatting[];\r\n  cellFormatting?: CellFormatting[][];\r\n  mergedCells?: Record<string, MergedCell>;\r\n  columnWidths?: number[];\r\n  rowHeights?: number[];\r\n}\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n  (e: \"select\", element: DocumentElement): void;\r\n}>();\r\n\r\n// Editing mode state\r\nconst isEditingActive = ref(false);\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet resizeType = \"both\";\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\n// Column/row resize functionality\r\nlet isColumnResizing = false;\r\nlet isRowResizing = false;\r\nlet resizingColumnIndex = -1;\r\nlet resizingRowIndex = -1;\r\nlet startColumnWidth = 0;\r\nlet startRowHeight = 0;\r\n\r\n// Cell selection and editing\r\nconst selectedCells = ref<CellPosition[]>([]);\r\nconst activeCellPosition = ref<CellPosition | null>(null);\r\nconst activeCellEditor = ref<HTMLElement | null>(null);\r\nconst activeHeaderEditor = ref<HTMLElement | null>(null);\r\n\r\n// Context menu\r\nconst showContextMenu = ref(false);\r\nconst contextMenuX = ref(0);\r\nconst contextMenuY = ref(0);\r\n\r\n// Cell formatting\r\nconst activeCellFormatting = ref<CellFormatting>({\r\n  bold: false,\r\n  italic: false,\r\n  underline: false,\r\n  align: \"left\",\r\n});\r\n\r\n// Computed properties\r\nconst elementStyle = computed<CSSProperties>(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    minHeight: `${props.element.size.height}px`,\r\n    zIndex: props.element.zIndex ?? 0,\r\n    position: \"absolute\" as const,\r\n  };\r\n});\r\n\r\nconst tableStyle = computed<CSSProperties>(() => {\r\n  const style = props.element.style || {};\r\n  return {\r\n    borderCollapse: \"collapse\" as const,\r\n    width: \"100%\",\r\n    borderColor: style.borderColor || \"#E2E8F0\",\r\n    borderStyle: style.borderStyle || \"solid\",\r\n    borderWidth: `${style.borderWidth || 1}px`,\r\n  };\r\n});\r\n\r\n// Helper function to get table data with proper defaults\r\nconst tableData = computed<TableData>(() => {\r\n  const content = props.element.content;\r\n  return {\r\n    headers: content.headers || [],\r\n    rows: content.rows || [],\r\n    headerFormatting: content.headerFormatting || [],\r\n    cellFormatting: content.cellFormatting || [],\r\n    mergedCells: content.mergedCells || {},\r\n    columnWidths: content.columnWidths || [],\r\n    rowHeights: content.rowHeights || [],\r\n  };\r\n});\r\n\r\n// Computed property to check if we can merge cells\r\nconst canMergeCells = computed(() => {\r\n  return selectedCells.value.length > 1;\r\n});\r\n\r\n// Computed property to check if we can split a cell\r\nconst canSplitCell = computed(() => {\r\n  if (selectedCells.value.length !== 1) return false;\r\n\r\n  const cell = selectedCells.value[0];\r\n  const cellKey = `${cell.rowIndex}-${cell.cellIndex}`;\r\n\r\n  return (\r\n    tableData.value.mergedCells &&\r\n    tableData.value.mergedCells[cellKey] !== undefined\r\n  );\r\n});\r\n\r\n// Get header style for a specific header\r\nfunction getHeaderStyle(index: number): CSSProperties {\r\n  const style = props.element.style || {};\r\n  const headerFormatting = tableData.value.headerFormatting?.[index] || {};\r\n\r\n  return {\r\n    backgroundColor: style.headerBackgroundColor || \"#F8F9FA\",\r\n    color: style.headerTextColor || \"#000000\",\r\n    padding: \"8px 12px\",\r\n    textAlign: headerFormatting.align || \"left\",\r\n    fontWeight: headerFormatting.bold ? \"bold\" : 500,\r\n    fontStyle: headerFormatting.italic ? \"italic\" : \"normal\",\r\n    textDecoration: headerFormatting.underline ? \"underline\" : \"none\",\r\n    borderColor: style.borderColor || \"#E2E8F0\",\r\n    borderStyle: style.borderStyle || \"solid\",\r\n    borderWidth: `${style.borderWidth || 1}px`,\r\n    position: \"relative\" as const,\r\n    width: tableData.value.columnWidths?.[index]\r\n      ? `${tableData.value.columnWidths[index]}px`\r\n      : \"auto\",\r\n  };\r\n}\r\n\r\n// Get cell style for a specific cell\r\nfunction getCellStyle(rowIndex: number, cellIndex: number): CSSProperties {\r\n  const style = props.element.style || {};\r\n  const cellFormatting =\r\n    tableData.value.cellFormatting?.[rowIndex]?.[cellIndex] || {};\r\n  const cellKey = `${rowIndex}-${cellIndex}`;\r\n  const mergedCell = tableData.value.mergedCells?.[cellKey];\r\n\r\n  const cellStyle: CSSProperties = {\r\n    backgroundColor:\r\n      cellFormatting.backgroundColor || style.cellBackgroundColor || \"#FFFFFF\",\r\n    color: cellFormatting.color || style.cellTextColor || \"#000000\",\r\n    padding: \"8px 12px\",\r\n    textAlign: cellFormatting.align || \"left\",\r\n    fontWeight: cellFormatting.bold ? \"bold\" : \"normal\",\r\n    fontStyle: cellFormatting.italic ? \"italic\" : \"normal\",\r\n    textDecoration: cellFormatting.underline ? \"underline\" : \"none\",\r\n    borderColor: style.borderColor || \"#E2E8F0\",\r\n    borderStyle: style.borderStyle || \"solid\",\r\n    borderWidth: `${style.borderWidth || 1}px`,\r\n    position: \"relative\" as const,\r\n    height: tableData.value.rowHeights?.[rowIndex]\r\n      ? `${tableData.value.rowHeights[rowIndex]}px`\r\n      : \"auto\",\r\n  };\r\n\r\n  // Add rowspan and colspan if this is a merged cell\r\n  // Note: We're using any here because rowSpan and colSpan are HTML attributes, not CSS properties\r\n  if (mergedCell) {\r\n    if (mergedCell.rowspan > 1) {\r\n      (cellStyle as any).rowSpan = mergedCell.rowspan;\r\n    }\r\n    if (mergedCell.colspan > 1) {\r\n      (cellStyle as any).colSpan = mergedCell.colspan;\r\n    }\r\n  }\r\n\r\n  return cellStyle;\r\n}\r\n\r\n// Get header formatting for a specific header\r\nfunction getHeaderFormatting(index: number): CellFormatting {\r\n  return tableData.value.headerFormatting?.[index] || {};\r\n}\r\n\r\n// Get cell formatting for a specific cell\r\nfunction getCellFormatting(\r\n  rowIndex: number,\r\n  cellIndex: number,\r\n): CellFormatting {\r\n  return tableData.value.cellFormatting?.[rowIndex]?.[cellIndex] || {};\r\n}\r\n\r\n// Format cell content with HTML based on formatting\r\nfunction formatCellContent(\r\n  content: string,\r\n  formatting: CellFormatting,\r\n): string {\r\n  let formattedContent = content;\r\n\r\n  // Apply formatting if needed\r\n  if (formatting.bold) {\r\n    formattedContent = `<strong>${formattedContent}</strong>`;\r\n  }\r\n\r\n  if (formatting.italic) {\r\n    formattedContent = `<em>${formattedContent}</em>`;\r\n  }\r\n\r\n  if (formatting.underline) {\r\n    formattedContent = `<u>${formattedContent}</u>`;\r\n  }\r\n\r\n  return formattedContent;\r\n}\r\n\r\n// Element event handlers\r\nfunction handleElementMouseDown(event: MouseEvent) {\r\n  // Prevent default to avoid text selection\r\n  event.preventDefault();\r\n\r\n  // Select the element if it's not already selected\r\n  if (!props.isSelected) {\r\n    emit(\"select\", props.element);\r\n  }\r\n\r\n  // If we're in editing mode, don't start dragging\r\n  if (isEditingActive.value) {\r\n    return;\r\n  }\r\n\r\n  // Start dragging\r\n  startDrag(event);\r\n}\r\n\r\nfunction handleElementClick(event: MouseEvent) {\r\n  // Prevent default to avoid text selection\r\n  event.preventDefault();\r\n\r\n  // Select the element if it's not already selected\r\n  if (!props.isSelected) {\r\n    emit(\"select\", props.element);\r\n  }\r\n\r\n  // If right-click, show context menu\r\n  if (event.button === 2) {\r\n    showContextMenu.value = true;\r\n    contextMenuX.value = event.clientX;\r\n    contextMenuY.value = event.clientY;\r\n    event.preventDefault();\r\n    return;\r\n  }\r\n\r\n  // If we're in editing mode and clicked outside any cell, deselect all cells\r\n  if (isEditingActive.value) {\r\n    selectedCells.value = [];\r\n    activeCellPosition.value = null;\r\n  }\r\n}\r\n\r\n// Drag & drop functionality\r\nfunction startDrag(event: MouseEvent) {\r\n  if (isEditingActive.value) return;\r\n\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newPosition = {\r\n    x: startLeft + deltaX,\r\n    y: startTop + deltaY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\n// Resize functionality\r\nfunction startResize(type: \"width\" | \"height\" | \"both\", event: MouseEvent) {\r\n  if (isEditingActive.value) return;\r\n\r\n  isResizing = true;\r\n  resizeType = type;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newSize = {\r\n    width:\r\n      resizeType === \"both\" || resizeType === \"width\"\r\n        ? Math.max(300, startWidth + deltaX)\r\n        : props.element.size.width,\r\n    height:\r\n      resizeType === \"both\" || resizeType === \"height\"\r\n        ? Math.max(100, startHeight + deltaY)\r\n        : props.element.size.height,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\n// Column resize functionality\r\nfunction startColumnResize(columnIndex: number, event: MouseEvent) {\r\n  isColumnResizing = true;\r\n  resizingColumnIndex = columnIndex;\r\n  startX = event.clientX;\r\n\r\n  // Get current column width or default\r\n  const columnWidths = [...(tableData.value.columnWidths || [])];\r\n  while (columnWidths.length <= columnIndex) {\r\n    columnWidths.push(100); // Default column width\r\n  }\r\n  startColumnWidth = columnWidths[columnIndex];\r\n\r\n  document.addEventListener(\"mousemove\", onColumnResize);\r\n  document.addEventListener(\"mouseup\", stopColumnResize);\r\n}\r\n\r\nfunction onColumnResize(event: MouseEvent) {\r\n  if (!isColumnResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const newWidth = Math.max(50, startColumnWidth + deltaX); // Minimum width of 50px\r\n\r\n  // Update column width\r\n  const columnWidths = [...(tableData.value.columnWidths || [])];\r\n  while (columnWidths.length <= resizingColumnIndex) {\r\n    columnWidths.push(100); // Default column width\r\n  }\r\n  columnWidths[resizingColumnIndex] = newWidth;\r\n\r\n  // Update element\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      columnWidths,\r\n    },\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopColumnResize() {\r\n  isColumnResizing = false;\r\n  document.removeEventListener(\"mousemove\", onColumnResize);\r\n  document.removeEventListener(\"mouseup\", stopColumnResize);\r\n}\r\n\r\n// Row resize functionality\r\nfunction startRowResize(rowIndex: number, event: MouseEvent) {\r\n  isRowResizing = true;\r\n  resizingRowIndex = rowIndex;\r\n  startY = event.clientY;\r\n\r\n  // Get current row height or default\r\n  const rowHeights = [...(tableData.value.rowHeights || [])];\r\n  while (rowHeights.length <= rowIndex) {\r\n    rowHeights.push(40); // Default row height\r\n  }\r\n  startRowHeight = rowHeights[rowIndex];\r\n\r\n  document.addEventListener(\"mousemove\", onRowResize);\r\n  document.addEventListener(\"mouseup\", stopRowResize);\r\n}\r\n\r\nfunction onRowResize(event: MouseEvent) {\r\n  if (!isRowResizing) return;\r\n\r\n  const deltaY = event.clientY - startY;\r\n  const newHeight = Math.max(30, startRowHeight + deltaY); // Minimum height of 30px\r\n\r\n  // Update row height\r\n  const rowHeights = [...(tableData.value.rowHeights || [])];\r\n  while (rowHeights.length <= resizingRowIndex) {\r\n    rowHeights.push(40); // Default row height\r\n  }\r\n  rowHeights[resizingRowIndex] = newHeight;\r\n\r\n  // Update element\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      rowHeights,\r\n    },\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopRowResize() {\r\n  isRowResizing = false;\r\n  document.removeEventListener(\"mousemove\", onRowResize);\r\n  document.removeEventListener(\"mouseup\", stopRowResize);\r\n}\r\n\r\n// Get column position for resize handle\r\nfunction getColumnPosition(index: number): number {\r\n  // Calculate position based on column widths\r\n  let position = 0;\r\n  const columnWidths = tableData.value.columnWidths || [];\r\n\r\n  for (let i = 0; i <= index; i++) {\r\n    position += columnWidths[i] || 100; // Default width if not specified\r\n  }\r\n\r\n  return position;\r\n}\r\n\r\n// Get row position for resize handle\r\nfunction getRowPosition(index: number): number {\r\n  // Calculate position based on row heights\r\n  let position = 40; // Account for header row\r\n  const rowHeights = tableData.value.rowHeights || [];\r\n\r\n  for (let i = 0; i <= index; i++) {\r\n    position += rowHeights[i] || 40; // Default height if not specified\r\n  }\r\n\r\n  return position;\r\n}\r\n\r\n// Cell selection and editing\r\nfunction isHeaderSelected(index: number): boolean {\r\n  return selectedCells.value.some(\r\n    (cell) => cell.type === \"header\" && cell.cellIndex === index,\r\n  );\r\n}\r\n\r\nfunction isHeaderActive(index: number): boolean {\r\n  return (\r\n    activeCellPosition.value !== null &&\r\n    activeCellPosition.value.type === \"header\" &&\r\n    activeCellPosition.value.cellIndex === index\r\n  );\r\n}\r\n\r\nfunction isCellSelected(rowIndex: number, cellIndex: number): boolean {\r\n  return selectedCells.value.some(\r\n    (cell) =>\r\n      cell.type === \"cell\" &&\r\n      cell.rowIndex === rowIndex &&\r\n      cell.cellIndex === cellIndex,\r\n  );\r\n}\r\n\r\nfunction isCellActive(rowIndex: number, cellIndex: number): boolean {\r\n  return (\r\n    activeCellPosition.value !== null &&\r\n    activeCellPosition.value.type === \"cell\" &&\r\n    activeCellPosition.value.rowIndex === rowIndex &&\r\n    activeCellPosition.value.cellIndex === cellIndex\r\n  );\r\n}\r\n\r\nfunction selectCell(\r\n  type: \"header\" | \"cell\",\r\n  rowIndex: number,\r\n  cellIndex: number,\r\n) {\r\n  if (!isEditingActive.value) return;\r\n\r\n  // Create cell position object\r\n  const cellPosition: CellPosition = { type, rowIndex, cellIndex };\r\n\r\n  // If shift key is pressed, add to selection\r\n  if (event && (event as MouseEvent).shiftKey) {\r\n    // Check if already selected\r\n    const isAlreadySelected = selectedCells.value.some(\r\n      (cell) =>\r\n        cell.type === type &&\r\n        cell.rowIndex === rowIndex &&\r\n        cell.cellIndex === cellIndex,\r\n    );\r\n\r\n    // If not already selected, add to selection\r\n    if (!isAlreadySelected) {\r\n      selectedCells.value.push(cellPosition);\r\n    } else {\r\n      // If already selected, remove from selection\r\n      selectedCells.value = selectedCells.value.filter(\r\n        (cell) =>\r\n          !(\r\n            cell.type === type &&\r\n            cell.rowIndex === rowIndex &&\r\n            cell.cellIndex === cellIndex\r\n          ),\r\n      );\r\n    }\r\n  } else {\r\n    // Otherwise, replace selection\r\n    selectedCells.value = [cellPosition];\r\n  }\r\n\r\n  // Update active cell formatting\r\n  updateActiveCellFormatting();\r\n}\r\n\r\nfunction activateCell(\r\n  type: \"header\" | \"cell\",\r\n  rowIndex: number,\r\n  cellIndex: number,\r\n) {\r\n  if (!isEditingActive.value) return;\r\n\r\n  // Set active cell\r\n  activeCellPosition.value = { type, rowIndex, cellIndex };\r\n\r\n  // Clear selection\r\n  selectedCells.value = [{ type, rowIndex, cellIndex }];\r\n\r\n  // Update active cell formatting\r\n  updateActiveCellFormatting();\r\n\r\n  // Focus the editor on next tick\r\n  nextTick(() => {\r\n    if (type === \"header\") {\r\n      if (activeHeaderEditor.value) {\r\n        activeHeaderEditor.value.focus();\r\n      }\r\n    } else {\r\n      if (activeCellEditor.value) {\r\n        activeCellEditor.value.focus();\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateCellContent() {\r\n  if (!activeCellPosition.value) return;\r\n\r\n  const { type, rowIndex, cellIndex } = activeCellPosition.value;\r\n  let content = \"\";\r\n\r\n  // Get content from editor\r\n  if (type === \"header\") {\r\n    if (activeHeaderEditor.value) {\r\n      content = activeHeaderEditor.value.innerHTML;\r\n    }\r\n  } else {\r\n    if (activeCellEditor.value) {\r\n      content = activeCellEditor.value.innerHTML;\r\n    }\r\n  }\r\n\r\n  // Update element\r\n  const updatedElement = { ...props.element };\r\n\r\n  if (type === \"header\") {\r\n    updatedElement.content = {\r\n      ...updatedElement.content,\r\n      headers: [...updatedElement.content.headers],\r\n    };\r\n    updatedElement.content.headers[cellIndex] = content;\r\n  } else {\r\n    updatedElement.content = {\r\n      ...updatedElement.content,\r\n      rows: updatedElement.content.rows.map((row: any[]) => [...row]),\r\n    };\r\n    updatedElement.content.rows[rowIndex][cellIndex] = content;\r\n  }\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction handleCellKeyDown(event: KeyboardEvent) {\r\n  // Handle tab key to navigate between cells\r\n  if (event.key === \"Tab\") {\r\n    event.preventDefault();\r\n    navigateToNextCell(event.shiftKey);\r\n  }\r\n\r\n  // Handle enter key to navigate to cell below\r\n  if (event.key === \"Enter\" && !event.shiftKey) {\r\n    event.preventDefault();\r\n    navigateToCellBelow();\r\n  }\r\n\r\n  // Handle escape key to cancel editing\r\n  if (event.key === \"Escape\") {\r\n    event.preventDefault();\r\n    activeCellPosition.value = null;\r\n  }\r\n}\r\n\r\nfunction navigateToNextCell(reverse = false) {\r\n  if (!activeCellPosition.value) return;\r\n\r\n  const { type, rowIndex, cellIndex } = activeCellPosition.value;\r\n\r\n  // Save current cell content\r\n  updateCellContent();\r\n\r\n  // Navigate to next cell\r\n  if (type === \"header\") {\r\n    if (reverse) {\r\n      // If first header and going backward, stay there\r\n      if (cellIndex === 0) return;\r\n\r\n      // Otherwise go to previous header\r\n      activateCell(\"header\", -1, cellIndex - 1);\r\n    } else {\r\n      // If last header and going forward, go to first cell in first row\r\n      if (cellIndex === tableData.value.headers.length - 1) {\r\n        if (tableData.value.rows.length > 0) {\r\n          activateCell(\"cell\", 0, 0);\r\n        }\r\n      } else {\r\n        // Otherwise go to next header\r\n        activateCell(\"header\", -1, cellIndex + 1);\r\n      }\r\n    }\r\n  } else {\r\n    if (reverse) {\r\n      // If first cell in row and going backward\r\n      if (cellIndex === 0) {\r\n        // If first row, go to last header\r\n        if (rowIndex === 0) {\r\n          activateCell(\"header\", -1, tableData.value.headers.length - 1);\r\n        } else {\r\n          // Otherwise go to last cell in previous row\r\n          activateCell(\r\n            \"cell\",\r\n            rowIndex - 1,\r\n            tableData.value.rows[rowIndex - 1].length - 1,\r\n          );\r\n        }\r\n      } else {\r\n        // Otherwise go to previous cell in same row\r\n        activateCell(\"cell\", rowIndex, cellIndex - 1);\r\n      }\r\n    } else {\r\n      // If last cell in row and going forward\r\n      if (cellIndex === tableData.value.rows[rowIndex].length - 1) {\r\n        // If last row, stay there\r\n        if (rowIndex === tableData.value.rows.length - 1) return;\r\n\r\n        // Otherwise go to first cell in next row\r\n        activateCell(\"cell\", rowIndex + 1, 0);\r\n      } else {\r\n        // Otherwise go to next cell in same row\r\n        activateCell(\"cell\", rowIndex, cellIndex + 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction navigateToCellBelow() {\r\n  if (!activeCellPosition.value) return;\r\n\r\n  const { type, rowIndex, cellIndex } = activeCellPosition.value;\r\n\r\n  // Save current cell content\r\n  updateCellContent();\r\n\r\n  // Navigate to cell below\r\n  if (type === \"header\") {\r\n    // If in header, go to same column in first row\r\n    if (tableData.value.rows.length > 0) {\r\n      activateCell(\"cell\", 0, cellIndex);\r\n    }\r\n  } else {\r\n    // If not last row, go to same column in next row\r\n    if (rowIndex < tableData.value.rows.length - 1) {\r\n      activateCell(\"cell\", rowIndex + 1, cellIndex);\r\n    }\r\n  }\r\n}\r\n\r\n// Table editing mode\r\nfunction startEditing() {\r\n  isEditingActive.value = true;\r\n}\r\n\r\nfunction finishEditing() {\r\n  // Save any active cell content\r\n  if (activeCellPosition.value) {\r\n    updateCellContent();\r\n  }\r\n\r\n  // Clear selection and active cell\r\n  selectedCells.value = [];\r\n  activeCellPosition.value = null;\r\n\r\n  // Exit editing mode\r\n  isEditingActive.value = false;\r\n}\r\n\r\n// Cell formatting\r\nfunction updateActiveCellFormatting() {\r\n  // Reset formatting\r\n  activeCellFormatting.value = {\r\n    bold: false,\r\n    italic: false,\r\n    underline: false,\r\n    align: \"left\",\r\n  };\r\n\r\n  // If no cells selected, return\r\n  if (selectedCells.value.length === 0) return;\r\n\r\n  // Get formatting of first selected cell\r\n  const firstCell = selectedCells.value[0];\r\n  let formatting: CellFormatting;\r\n\r\n  if (firstCell.type === \"header\") {\r\n    formatting = getHeaderFormatting(firstCell.cellIndex);\r\n  } else {\r\n    formatting = getCellFormatting(firstCell.rowIndex, firstCell.cellIndex);\r\n  }\r\n\r\n  // Update active formatting\r\n  activeCellFormatting.value = {\r\n    bold: formatting.bold || false,\r\n    italic: formatting.italic || false,\r\n    underline: formatting.underline || false,\r\n    align: formatting.align || \"left\",\r\n  };\r\n}\r\n\r\nfunction applyFormatting(property: \"bold\" | \"italic\" | \"underline\") {\r\n  // Toggle the formatting property\r\n  activeCellFormatting.value[property] = !activeCellFormatting.value[property];\r\n\r\n  // Apply to all selected cells\r\n  applyFormattingToSelectedCells();\r\n}\r\n\r\nfunction applyAlignment(alignment: \"left\" | \"center\" | \"right\") {\r\n  // Set the alignment\r\n  activeCellFormatting.value.align = alignment;\r\n\r\n  // Apply to all selected cells\r\n  applyFormattingToSelectedCells();\r\n}\r\n\r\nfunction applyFormattingToSelectedCells() {\r\n  // If no cells selected, return\r\n  if (selectedCells.value.length === 0) return;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n\r\n  // Ensure formatting arrays exist\r\n  if (!updatedElement.content.headerFormatting) {\r\n    updatedElement.content.headerFormatting = [];\r\n  }\r\n\r\n  if (!updatedElement.content.cellFormatting) {\r\n    updatedElement.content.cellFormatting = [];\r\n  }\r\n\r\n  // Apply formatting to each selected cell\r\n  for (const cell of selectedCells.value) {\r\n    if (cell.type === \"header\") {\r\n      // Ensure header formatting array is long enough\r\n      while (updatedElement.content.headerFormatting.length <= cell.cellIndex) {\r\n        updatedElement.content.headerFormatting.push({});\r\n      }\r\n\r\n      // Apply formatting\r\n      updatedElement.content.headerFormatting[cell.cellIndex] = {\r\n        ...updatedElement.content.headerFormatting[cell.cellIndex],\r\n        ...activeCellFormatting.value,\r\n      };\r\n    } else {\r\n      // Ensure cell formatting array for this row exists\r\n      while (updatedElement.content.cellFormatting.length <= cell.rowIndex) {\r\n        updatedElement.content.cellFormatting.push([]);\r\n      }\r\n\r\n      // Ensure cell formatting array for this cell exists\r\n      while (\r\n        updatedElement.content.cellFormatting[cell.rowIndex].length <=\r\n        cell.cellIndex\r\n      ) {\r\n        updatedElement.content.cellFormatting[cell.rowIndex].push({});\r\n      }\r\n\r\n      // Apply formatting\r\n      updatedElement.content.cellFormatting[cell.rowIndex][cell.cellIndex] = {\r\n        ...updatedElement.content.cellFormatting[cell.rowIndex][cell.cellIndex],\r\n        ...activeCellFormatting.value,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\n// Table structure operations\r\nfunction addRowAbove() {\r\n  // Get index of first selected row or 0\r\n  const rowIndex =\r\n    selectedCells.value.length > 0 && selectedCells.value[0].type === \"cell\"\r\n      ? selectedCells.value[0].rowIndex\r\n      : 0;\r\n\r\n  // Create new row with empty cells\r\n  const newRow = new Array(tableData.value.headers.length).fill(\"\");\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    rows: [...updatedElement.content.rows],\r\n  };\r\n\r\n  // Insert new row\r\n  updatedElement.content.rows.splice(rowIndex, 0, newRow);\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction addRowBelow() {\r\n  // Get index of last selected row or last row\r\n  const rowIndex =\r\n    selectedCells.value.length > 0 && selectedCells.value[0].type === \"cell\"\r\n      ? selectedCells.value[0].rowIndex\r\n      : tableData.value.rows.length - 1;\r\n\r\n  // Create new row with empty cells\r\n  const newRow = new Array(tableData.value.headers.length).fill(\"\");\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    rows: [...updatedElement.content.rows],\r\n  };\r\n\r\n  // Insert new row\r\n  updatedElement.content.rows.splice(rowIndex + 1, 0, newRow);\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction deleteRow() {\r\n  // Get index of selected row or last row\r\n  const rowIndex =\r\n    selectedCells.value.length > 0 && selectedCells.value[0].type === \"cell\"\r\n      ? selectedCells.value[0].rowIndex\r\n      : tableData.value.rows.length - 1;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    rows: [...updatedElement.content.rows],\r\n  };\r\n\r\n  // Remove row\r\n  updatedElement.content.rows.splice(rowIndex, 1);\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  // Clear selection if it contained the deleted row\r\n  selectedCells.value = selectedCells.value.filter(\r\n    (cell) => cell.type !== \"cell\" || cell.rowIndex !== rowIndex,\r\n  );\r\n\r\n  // Clear active cell if it was in the deleted row\r\n  if (\r\n    activeCellPosition.value &&\r\n    activeCellPosition.value.type === \"cell\" &&\r\n    activeCellPosition.value.rowIndex === rowIndex\r\n  ) {\r\n    activeCellPosition.value = null;\r\n  }\r\n}\r\n\r\nfunction addColumnLeft() {\r\n  // Get index of first selected column or 0\r\n  const columnIndex =\r\n    selectedCells.value.length > 0 ? selectedCells.value[0].cellIndex : 0;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    headers: [...updatedElement.content.headers],\r\n    rows: updatedElement.content.rows.map((row: any[]) => [...row]),\r\n  };\r\n\r\n  // Insert new header\r\n  updatedElement.content.headers.splice(columnIndex, 0, \"New Column\");\r\n\r\n  // Insert empty cell in each row\r\n  updatedElement.content.rows.forEach((row: any[]) => {\r\n    row.splice(columnIndex, 0, \"\");\r\n  });\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction addColumnRight() {\r\n  // Get index of last selected column or last column\r\n  const columnIndex =\r\n    selectedCells.value.length > 0\r\n      ? selectedCells.value[0].cellIndex\r\n      : tableData.value.headers.length - 1;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    headers: [...updatedElement.content.headers],\r\n    rows: updatedElement.content.rows.map((row: any[]) => [...row]),\r\n  };\r\n\r\n  // Insert new header\r\n  updatedElement.content.headers.splice(columnIndex + 1, 0, \"New Column\");\r\n\r\n  // Insert empty cell in each row\r\n  updatedElement.content.rows.forEach((row: any[]) => {\r\n    row.splice(columnIndex + 1, 0, \"\");\r\n  });\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction deleteColumn() {\r\n  // Get index of selected column or last column\r\n  const columnIndex =\r\n    selectedCells.value.length > 0\r\n      ? selectedCells.value[0].cellIndex\r\n      : tableData.value.headers.length - 1;\r\n\r\n  // Create updated element\r\n  const updatedElement = { ...props.element };\r\n  updatedElement.content = {\r\n    ...updatedElement.content,\r\n    headers: [...updatedElement.content.headers],\r\n    rows: updatedElement.content.rows.map((row: any[]) => [...row]),\r\n  };\r\n\r\n  // Remove header\r\n  updatedElement.content.headers.splice(columnIndex, 1);\r\n\r\n  // Remove cell from each row\r\n  updatedElement.content.rows.forEach((row: any[]) => {\r\n    row.splice(columnIndex, 1);\r\n  });\r\n\r\n  // Update element\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  // Clear selection if it contained the deleted column\r\n  selectedCells.value = selectedCells.value.filter(\r\n    (cell) => cell.cellIndex !== columnIndex,\r\n  );\r\n\r\n  // Clear active cell if it was in the deleted column\r\n  if (\r\n    activeCellPosition.value &&\r\n    activeCellPosition.value.cellIndex === columnIndex\r\n  ) {\r\n    activeCellPosition.value = null;\r\n  }\r\n}\r\n\r\n// Context menu actions\r\nfunction contextMenuAction(action: string) {\r\n  showContextMenu.value = false;\r\n\r\n  switch (action) {\r\n  case \"merge\":\r\n    mergeCells();\r\n    break;\r\n  case \"split\":\r\n    splitCell();\r\n    break;\r\n  case \"insertRowAbove\":\r\n    addRowAbove();\r\n    break;\r\n  case \"insertRowBelow\":\r\n    addRowBelow();\r\n    break;\r\n  case \"insertColumnLeft\":\r\n    addColumnLeft();\r\n    break;\r\n  case \"insertColumnRight\":\r\n    addColumnRight();\r\n    break;\r\n  case \"deleteRow\":\r\n    deleteRow();\r\n    break;\r\n  case \"deleteColumn\":\r\n    deleteColumn();\r\n    break;\r\n  }\r\n}\r\n\r\nfunction mergeCells() {\r\n  // Not implemented yet - would require more complex table structure\r\n  console.log(\"Merge cells not implemented yet\");\r\n}\r\n\r\nfunction splitCell() {\r\n  // Not implemented yet - would require more complex table structure\r\n  console.log(\"Split cell not implemented yet\");\r\n}\r\n\r\n// Event listeners for context menu\r\nonMounted(() => {\r\n  document.addEventListener(\"contextmenu\", handleContextMenu);\r\n  document.addEventListener(\"click\", handleDocumentClick);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  document.removeEventListener(\"contextmenu\", handleContextMenu);\r\n  document.removeEventListener(\"click\", handleDocumentClick);\r\n});\r\n\r\nfunction handleContextMenu(event: MouseEvent) {\r\n  // Prevent default context menu if target is part of this component\r\n  if (\r\n    event.target &&\r\n    (event.target as HTMLElement).closest(\".table-element\") ===\r\n      event.currentTarget\r\n  ) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nfunction handleDocumentClick() {\r\n  // Hide context menu when clicking elsewhere\r\n  showContextMenu.value = false;\r\n}\r\n</script>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\TextElement.vue","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":430,"column":0}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"text-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div\r\n      class=\"element-content\"\r\n      ref=\"contentElement\"\r\n      contenteditable=\"true\"\r\n      :style=\"textStyle\"\r\n      :data-element-id=\"props.element.id\"\r\n      @input=\"handleTextChange\"\r\n      @keydown=\"handleKeyDown\"\r\n      @focus=\"handleFocus\"\r\n      @blur=\"handleBlur\"\r\n      @mousedown=\"handleMouseDown\"\r\n      @mouseup=\"handleMouseUp\"\r\n      @keyup=\"handleKeyUp\"\r\n    ></div>\r\n    <ResizeHandles\r\n      v-if=\"isSelected\"\r\n      :elementSize=\"props.element.size\"\r\n      :elementPosition=\"props.element.position\"\r\n      :minWidth=\"50\"\r\n      :minHeight=\"30\"\r\n      :gridSize=\"10\"\r\n      @resize=\"handleResize\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  computed,\r\n  watch,\r\n  onMounted,\r\n  onBeforeUnmount,\r\n  nextTick,\r\n} from \"vue\";\r\nimport { DocumentElement, Size, Position } from \"../../../types/document\";\r\nimport { saveSelection } from \"../../../utils/selectionManager\";\r\nimport ResizeHandles from \"../../editor/ResizeHandles.vue\";\r\nimport { getFontFamilyValue } from \"../../../utils/fontFamilies\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst contentElement = ref<HTMLElement | null>(null);\r\nconst isEditing = ref(false);\r\nlet observer: MutationObserver | null = null;\r\nlet isUpdating = false;\r\n\r\n// Cursor position tracking\r\nlet cursorPosition = {\r\n  node: null as Node | null,\r\n  offset: 0,\r\n};\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality is now handled by the ResizeHandles component\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    minHeight: `${props.element.size.height}px`,\r\n    backgroundColor: props.element.style?.blockBackground\r\n      ? props.element.style?.blockBackgroundColor || \"#f5f5f5\"\r\n      : \"transparent\",\r\n    padding: \"8px\",\r\n    borderRadius: \"4px\",\r\n    border: props.isSelected\r\n      ? \"2px solid var(--primary)\"\r\n      : \"2px solid transparent\",\r\n    cursor: isEditing.value ? \"text\" : \"move\",\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nconst textStyle = computed(() => {\r\n  const style = props.element.style || {};\r\n\r\n  // Base styles\r\n  const baseStyles = {\r\n    fontFamily: getFontFamilyValue(style.fontFamily || \"Roboto\"),\r\n    fontSize: `${style.fontSize || 16}px`,\r\n    fontWeight: style.bold ? \"bold\" : \"normal\",\r\n    fontStyle: style.italic ? \"italic\" : \"normal\",\r\n    textDecoration: style.underline ? \"underline\" : \"none\",\r\n    textAlign: style.align || \"left\",\r\n    color: style.color || \"#000000\",\r\n    backgroundColor: style.blockBackground\r\n      ? \"transparent\"\r\n      : style.backgroundColor || \"transparent\",\r\n    textIndent: style.textIndent ? `${style.textIndent}px` : \"0px\",\r\n    lineHeight: style.lineHeight ? style.lineHeight : 1.5,\r\n    paddingLeft: style.paragraphIndent ? `${style.paragraphIndent}px` : \"0px\",\r\n    margin: 0,\r\n    padding: 0,\r\n    whiteSpace: \"pre-wrap\",\r\n    wordBreak: \"break-word\",\r\n    outline: \"none\",\r\n    cursor: \"text\",\r\n    userSelect: \"text\",\r\n  };\r\n\r\n  // Add list styles if needed\r\n  if (style.listType === \"bullet\") {\r\n    return {\r\n      ...baseStyles,\r\n      listStyleType: \"disc\",\r\n      listStylePosition: \"inside\",\r\n      display: \"list-item\",\r\n      paddingLeft: \"20px\", // Add padding for better visual appearance\r\n      marginLeft: style.paragraphIndent ? `${style.paragraphIndent}px` : \"0px\",\r\n    };\r\n  } else if (style.listType === \"number\") {\r\n    return {\r\n      ...baseStyles,\r\n      listStyleType: \"decimal\",\r\n      listStylePosition: \"inside\",\r\n      display: \"list-item\",\r\n      paddingLeft: \"20px\", // Add padding for better visual appearance\r\n      marginLeft: style.paragraphIndent ? `${style.paragraphIndent}px` : \"0px\",\r\n    };\r\n  }\r\n\r\n  return baseStyles;\r\n});\r\n\r\n// Watch for style changes\r\nwatch(\r\n  () => props.element.style,\r\n  (newStyle) => {\r\n    // Update the text style\r\n    if (contentElement.value) {\r\n      Object.assign(contentElement.value.style, textStyle.value);\r\n    }\r\n\r\n    // Force update of the element style for block background\r\n    if (newStyle?.blockBackground) {\r\n      const elementDiv = contentElement.value?.parentElement;\r\n      if (elementDiv) {\r\n        elementDiv.style.backgroundColor =\r\n          newStyle.blockBackgroundColor || \"#f5f5f5\";\r\n      }\r\n    }\r\n  },\r\n  { deep: true, immediate: true },\r\n);\r\n\r\n// Watch for content changes from outside this component\r\nwatch(\r\n  () => props.element.content,\r\n  (newContent, oldContent) => {\r\n    if (contentElement.value && !isUpdating) {\r\n      // Skip if the new content is empty or the same as the current content\r\n      if (newContent === \"\" || contentElement.value.innerHTML === newContent) {\r\n        return;\r\n      }\r\n\r\n      // Skip if the content element already has content and the new content is empty\r\n      if (contentElement.value.innerHTML !== \"\" && !newContent) {\r\n        return;\r\n      }\r\n\r\n      // Temporarily disable the observer to prevent loops\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n\r\n      // Update the content\r\n      contentElement.value.innerHTML = newContent || \"\";\r\n\r\n      // Re-enable the observer\r\n      setupMutationObserver();\r\n    }\r\n  },\r\n);\r\n\r\n// No longer needed - using direct text selection utility instead\r\n\r\n// Save the current cursor position\r\nfunction saveCursorPosition(): boolean {\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount || !contentElement.value)\r\n    return false;\r\n\r\n  const range = selection.getRangeAt(0);\r\n\r\n  // Make sure the selection is within our content element\r\n  if (!contentElement.value.contains(range.commonAncestorContainer))\r\n    return false;\r\n\r\n  cursorPosition = {\r\n    node: range.endContainer,\r\n    offset: range.endOffset,\r\n  };\r\n\r\n  return true;\r\n}\r\n\r\n// Find a text node at the specified path\r\nfunction findNodeAtPath(path: number[]): Node | null {\r\n  if (!contentElement.value) return null;\r\n\r\n  let currentNode: Node = contentElement.value;\r\n\r\n  for (let i = 0; i < path.length; i++) {\r\n    const index = path[i];\r\n    if (currentNode.childNodes && index < currentNode.childNodes.length) {\r\n      currentNode = currentNode.childNodes[index];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return currentNode;\r\n}\r\n\r\n// Get the path to a node\r\nfunction getNodePath(node: Node): number[] | null {\r\n  if (!contentElement.value || !contentElement.value.contains(node))\r\n    return null;\r\n\r\n  const path: number[] = [];\r\n  let currentNode: Node | null = node;\r\n\r\n  while (currentNode && currentNode !== contentElement.value) {\r\n    const parentNode: ParentNode | null = currentNode.parentNode;\r\n    if (!parentNode) return null;\r\n\r\n    const index = Array.from(parentNode.childNodes).indexOf(\r\n      currentNode as ChildNode,\r\n    );\r\n    if (index === -1) return null;\r\n\r\n    path.unshift(index);\r\n    currentNode = parentNode;\r\n  }\r\n\r\n  return path;\r\n}\r\n\r\n// Optimized text change handler with improved cursor restoration\r\nfunction handleTextChange(_event: Event): void {\r\n  if (!contentElement.value || isUpdating) return;\r\n\r\n  // Get the current selection\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount) return;\r\n\r\n  // Save the current selection state with more detailed information\r\n  const range = selection.getRangeAt(0);\r\n  const container = range.endContainer;\r\n  const offset = range.endOffset;\r\n\r\n  // Save the path to the node for more reliable restoration\r\n  const nodePath = getNodePath(container);\r\n\r\n  // Save text before cursor for text-based restoration (only if needed)\r\n  let textBeforeCursor = \"\";\r\n\r\n  // Only compute textBeforeCursor if we might need it (when container might be lost)\r\n  if (!container || !contentElement.value.contains(container)) {\r\n    try {\r\n      // Create a range from the start of the content to the cursor\r\n      const beforeRange = document.createRange();\r\n      beforeRange.setStart(contentElement.value, 0);\r\n      beforeRange.setEnd(range.endContainer, range.endOffset);\r\n      textBeforeCursor = beforeRange.toString();\r\n    } catch (_error) {\r\n      // Error getting text around cursor - ignore\r\n    }\r\n  }\r\n\r\n  // Get the current content before updating\r\n  const currentContent = contentElement.value.innerHTML;\r\n\r\n  // Prevent content from being reset to empty or previous value\r\n  if (currentContent === \"\") {\r\n    return;\r\n  }\r\n\r\n  // Update the element content\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: currentContent,\r\n  };\r\n\r\n  isUpdating = true;\r\n  emit(\"update:element\", updatedElement);\r\n\r\n  // Use requestAnimationFrame instead of setTimeout for better performance\r\n  requestAnimationFrame(() => {\r\n    try {\r\n      if (!contentElement.value) {\r\n        isUpdating = false;\r\n        return;\r\n      }\r\n\r\n      // Focus the element\r\n      contentElement.value.focus();\r\n\r\n      // First try to restore using the original container reference (most efficient)\r\n      if (container && contentElement.value.contains(container)) {\r\n        restoreCursorToContainer(selection, container, offset);\r\n      }\r\n      // If that fails, try using the node path\r\n      else if (nodePath) {\r\n        const nodeAtPath = findNodeAtPath(nodePath);\r\n        if (nodeAtPath) {\r\n          restoreCursorToContainer(selection, nodeAtPath, offset);\r\n        }\r\n        // If node path fails, try text-based approach as last resort\r\n        else if (textBeforeCursor) {\r\n          restoreCursorUsingTextPosition(selection, textBeforeCursor);\r\n        }\r\n      }\r\n    } catch (_error) {\r\n      // Error restoring selection - ignore\r\n    } finally {\r\n      isUpdating = false;\r\n    }\r\n  });\r\n}\r\n\r\n// Helper function to restore cursor to a specific container and offset\r\nfunction restoreCursorToContainer(selection: Selection, container: Node, offset: number): void {\r\n  if (!contentElement.value) return;\r\n\r\n  try {\r\n    // Create a new range at the saved position\r\n    const newRange = document.createRange();\r\n\r\n    // Ensure the offset is valid for the container\r\n    const maxOffset =\r\n      container.nodeType === Node.TEXT_NODE\r\n        ? container.textContent?.length || 0\r\n        : container.childNodes.length;\r\n\r\n    const safeOffset = Math.min(offset, maxOffset);\r\n\r\n    newRange.setStart(container, safeOffset);\r\n    newRange.setEnd(container, safeOffset);\r\n\r\n    // Apply the selection\r\n    selection.removeAllRanges();\r\n    selection.addRange(newRange);\r\n  } catch (_error) {\r\n    // Error restoring cursor - ignore\r\n  }\r\n}\r\n\r\n// Helper function to restore cursor using text position\r\nfunction restoreCursorUsingTextPosition(selection: Selection, textBeforeCursor: string): void {\r\n  if (!contentElement.value) return;\r\n\r\n  try {\r\n    // Get all text nodes\r\n    const textNodes: Node[] = [];\r\n    const walker = document.createTreeWalker(\r\n      contentElement.value,\r\n      NodeFilter.SHOW_TEXT,\r\n      null,\r\n    );\r\n\r\n    let node: Node | null;\r\n    while ((node = walker.nextNode())) {\r\n      textNodes.push(node);\r\n    }\r\n\r\n    if (textNodes.length === 0) return;\r\n\r\n    // Use a more efficient approach with a single pass through the text\r\n    let accumulatedLength = 0;\r\n    const cursorPos = textBeforeCursor.length;\r\n\r\n    for (const node of textNodes) {\r\n      const nodeLength = node.textContent?.length || 0;\r\n\r\n      if (accumulatedLength + nodeLength >= cursorPos) {\r\n        // This node contains our cursor position\r\n        const nodeOffset = cursorPos - accumulatedLength;\r\n\r\n        const newRange = document.createRange();\r\n        newRange.setStart(node, nodeOffset);\r\n        newRange.setEnd(node, nodeOffset);\r\n\r\n        selection.removeAllRanges();\r\n        selection.addRange(newRange);\r\n        return;\r\n      }\r\n\r\n      accumulatedLength += nodeLength;\r\n    }\r\n\r\n    // If we couldn't find the exact position, place cursor at the end\r\n    if (textNodes.length > 0) {\r\n      const lastNode = textNodes[textNodes.length - 1];\r\n      const lastNodeLength = lastNode.textContent?.length || 0;\r\n\r\n      const newRange = document.createRange();\r\n      newRange.setStart(lastNode, lastNodeLength);\r\n      newRange.setEnd(lastNode, lastNodeLength);\r\n\r\n      selection.removeAllRanges();\r\n      selection.addRange(newRange);\r\n    }\r\n  } catch (_error) {\r\n    // Error restoring cursor - ignore\r\n  }\r\n}\r\n}\r\n\r\n// Handle key down events\r\nfunction handleKeyDown(event: KeyboardEvent): void {\r\n  // Handle keyboard shortcuts\r\n  if ((event.ctrlKey || event.metaKey) && isEditing.value) {\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n\r\n    switch (event.key.toLowerCase()) {\r\n    case \"b\": // Bold\r\n      event.preventDefault();\r\n      // Apply bold to selected text if there's a selection\r\n      if (selection && !selection.isCollapsed && selection.rangeCount > 0) {\r\n        applyStyleToSelectedText(\"bold\", true);\r\n      } else {\r\n        // Otherwise toggle bold for the whole element\r\n        emit(\"update:element\", {\r\n          ...props.element,\r\n          style: {\r\n            ...props.element.style,\r\n            bold: !props.element.style.bold,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    case \"i\": // Italic\r\n      event.preventDefault();\r\n      // Apply italic to selected text if there's a selection\r\n      if (selection && !selection.isCollapsed && selection.rangeCount > 0) {\r\n        applyStyleToSelectedText(\"italic\", true);\r\n      } else {\r\n        // Otherwise toggle italic for the whole element\r\n        emit(\"update:element\", {\r\n          ...props.element,\r\n          style: {\r\n            ...props.element.style,\r\n            italic: !props.element.style.italic,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    case \"u\": // Underline\r\n      event.preventDefault();\r\n      // Apply underline to selected text if there's a selection\r\n      if (selection && !selection.isCollapsed && selection.rangeCount > 0) {\r\n        applyStyleToSelectedText(\"underline\", true);\r\n      } else {\r\n        // Otherwise toggle underline for the whole element\r\n        emit(\"update:element\", {\r\n          ...props.element,\r\n          style: {\r\n            ...props.element.style,\r\n            underline: !props.element.style.underline,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Handle Tab key for indentation\r\n  if (event.key === \"Tab\" && isEditing.value) {\r\n    event.preventDefault();\r\n\r\n    if (event.shiftKey) {\r\n      // Decrease indent with Shift+Tab\r\n      const currentIndent = props.element.style?.paragraphIndent || 0;\r\n      const newIndent = Math.max(0, currentIndent - 10);\r\n\r\n      emit(\"update:element\", {\r\n        ...props.element,\r\n        style: {\r\n          ...props.element.style,\r\n          paragraphIndent: newIndent,\r\n        },\r\n      });\r\n    } else {\r\n      // Increase indent with Tab\r\n      const currentIndent = props.element.style?.paragraphIndent || 0;\r\n      const newIndent = currentIndent + 10;\r\n\r\n      emit(\"update:element\", {\r\n        ...props.element,\r\n        style: {\r\n          ...props.element.style,\r\n          paragraphIndent: newIndent,\r\n        },\r\n      });\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Handle Enter key press (both with and without Shift)\r\n  // We treat all Enter key presses as Shift+Enter (inserting a line break instead of a paragraph)\r\n  if (event.key === \"Enter\") {\r\n    event.preventDefault();\r\n    event.stopPropagation(); // Prevent event bubbling\r\n\r\n    if (!contentElement.value) return;\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection || !selection.rangeCount) return;\r\n\r\n    // Get the current range\r\n    const range = selection.getRangeAt(0);\r\n\r\n    // Create a <br> element\r\n    const br = document.createElement(\"br\");\r\n\r\n    // Also create a text node with a zero-width space to ensure cursor positioning works\r\n    const textNode = document.createTextNode(\"\\u200B\");\r\n\r\n    // Insert the <br> element\r\n    range.deleteContents();\r\n    range.insertNode(br);\r\n\r\n    // Insert the text node after the <br>\r\n    const newRange = document.createRange();\r\n    newRange.setStartAfter(br);\r\n    newRange.setEndAfter(br);\r\n    newRange.insertNode(textNode);\r\n\r\n    // Move the cursor after the text node\r\n    newRange.setStartAfter(textNode);\r\n    newRange.setEndAfter(textNode);\r\n    selection.removeAllRanges();\r\n    selection.addRange(newRange);\r\n\r\n    // Flag to prevent cursor position from being overwritten\r\n    isUpdating = true;\r\n\r\n    // Update the element content\r\n    const updatedElement = {\r\n      ...props.element,\r\n      content: contentElement.value.innerHTML,\r\n    };\r\n\r\n    // Emit the update\r\n    emit(\"update:element\", updatedElement);\r\n\r\n    // Restore cursor position after Vue updates the DOM\r\n    setTimeout(() => {\r\n      try {\r\n        if (!contentElement.value) {\r\n          isUpdating = false;\r\n          return;\r\n        }\r\n\r\n        // Focus the element\r\n        contentElement.value.focus();\r\n\r\n        // Find the <br> element we just inserted\r\n        const allBrs = contentElement.value.querySelectorAll(\"br\");\r\n        if (allBrs.length > 0) {\r\n          // Get the last <br> element (the one we just inserted)\r\n          const lastBr = allBrs[allBrs.length - 1];\r\n\r\n          // Create a range after this <br>\r\n          const restoreRange = document.createRange();\r\n          restoreRange.setStartAfter(lastBr);\r\n          restoreRange.setEndAfter(lastBr);\r\n\r\n          // Apply the selection\r\n          selection.removeAllRanges();\r\n          selection.addRange(restoreRange);\r\n\r\n          // Cursor position restored after Enter key press\r\n        } else {\r\n          // Could not find the inserted <br> element\r\n        }\r\n      } catch (error) {\r\n        // Error restoring cursor position after Enter key press\r\n      } finally {\r\n        isUpdating = false;\r\n      }\r\n    }, 10);\r\n  }\r\n}\r\n\r\nfunction handleFocus() {\r\n  isEditing.value = true;\r\n  // Check for selection when focused\r\n  emitSelectionState();\r\n}\r\n\r\nfunction handleBlur() {\r\n  isEditing.value = false;\r\n}\r\n\r\n// Selection is now handled by the global selection manager\r\n\r\n// Handle mouse up event - selection is now handled by the global selection manager\r\nfunction handleMouseUp() {\r\n  // Small delay to ensure the selection is properly set\r\n  setTimeout(() => {\r\n    // Emit an event to notify that text might be selected\r\n    emitSelectionState();\r\n\r\n    // Save cursor position for better reliability\r\n    saveCursorPosition();\r\n  }, 0);\r\n}\r\n\r\n// Handle key up event - selection is now handled by the global selection manager\r\nfunction handleKeyUp(event: KeyboardEvent) {\r\n  // Check for selection changes on key up\r\n  if (\r\n    event.key === \"Shift\" ||\r\n    event.key.includes(\"Arrow\") ||\r\n    event.key === \"Home\" ||\r\n    event.key === \"End\" ||\r\n    event.key === \"PageUp\" ||\r\n    event.key === \"PageDown\" ||\r\n    event.ctrlKey ||\r\n    event.metaKey\r\n  ) {\r\n    // Small delay to ensure the selection is properly set\r\n    setTimeout(() => {\r\n      emitSelectionState();\r\n\r\n      // Save cursor position for better reliability\r\n      saveCursorPosition();\r\n    }, 0);\r\n  }\r\n}\r\n\r\n// Function to emit selection state\r\nfunction emitSelectionState() {\r\n  if (!contentElement.value) return;\r\n\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount) return;\r\n\r\n  const range = selection.getRangeAt(0);\r\n\r\n  // Skip if no text is selected\r\n  if (range.collapsed) return;\r\n\r\n  // Check if the selection is within our content element\r\n  if (contentElement.value.contains(range.commonAncestorContainer)) {\r\n    // Text selection detected in TextElement\r\n\r\n    // Force focus on the content element to ensure the selection is active\r\n    contentElement.value.focus();\r\n\r\n    // Explicitly call saveSelection from the selection manager\r\n    saveSelection();\r\n  }\r\n}\r\n\r\n// Handle mouse down event\r\nfunction handleMouseDown() {\r\n  // Focus the element\r\n  if (contentElement.value) {\r\n    contentElement.value.focus();\r\n  }\r\n}\r\n\r\n// Apply style to selected text\r\nfunction applyStyleToSelectedText(\r\n  styleProperty: string,\r\n  value: string | boolean,\r\n): boolean {\r\n  // Applying style to selected text\r\n\r\n  if (!contentElement.value) {\r\n    return false;\r\n  }\r\n\r\n  // Focus the content element to ensure selection works\r\n  contentElement.value.focus();\r\n\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount) {\r\n    return false;\r\n  }\r\n\r\n  const range = selection.getRangeAt(0);\r\n  // Get selection range\r\n\r\n  // If no text is selected, return false (will apply to whole element instead)\r\n  if (range.collapsed) {\r\n    return false;\r\n  }\r\n\r\n  // Make sure the selection is within our content element\r\n  if (!contentElement.value.contains(range.commonAncestorContainer)) {\r\n    return false;\r\n  }\r\n\r\n  // Selection is valid, applying style\r\n\r\n  // Apply the style to the selected text\r\n  let command = \"\";\r\n  let value2: string | boolean = value;\r\n\r\n  switch (styleProperty) {\r\n  case \"bold\":\r\n    command = \"bold\";\r\n    break;\r\n  case \"italic\":\r\n    command = \"italic\";\r\n    break;\r\n  case \"underline\":\r\n    command = \"underline\";\r\n    break;\r\n  case \"fontName\":\r\n    command = \"fontName\";\r\n    break;\r\n  case \"fontSize\":\r\n    // Special handling for font size\r\n    // Create a span with the specified font size\r\n    const fontSizeSpan = document.createElement(\"span\");\r\n    fontSizeSpan.style.fontSize = value + \"px\";\r\n\r\n    // Extract the selected content\r\n    const fontSizeFragment = range.extractContents();\r\n    fontSizeSpan.appendChild(fontSizeFragment);\r\n\r\n    // Insert the styled span\r\n    range.insertNode(fontSizeSpan);\r\n\r\n    // Update selection to include the new span\r\n    selection.removeAllRanges();\r\n    const fontSizeRange = document.createRange();\r\n    fontSizeRange.selectNodeContents(fontSizeSpan);\r\n    selection.addRange(fontSizeRange);\r\n\r\n    // Update the element content\r\n    const fontSizeUpdatedElement = {\r\n      ...props.element,\r\n      content: contentElement.value.innerHTML,\r\n    };\r\n\r\n    emit(\"update:element\", fontSizeUpdatedElement);\r\n    return true;\r\n  case \"heading\":\r\n    // Special handling for headings\r\n\r\n    // Create the appropriate heading element\r\n    const headingLevel = parseInt(value as string, 10);\r\n    if (isNaN(headingLevel) || headingLevel < 1 || headingLevel > 6) {\r\n      return false;\r\n    }\r\n\r\n    // Create the heading element (h1, h2, etc.)\r\n    const headingTag = `h${headingLevel}`;\r\n    const headingElement = document.createElement(headingTag);\r\n\r\n    // Set appropriate styles based on heading level\r\n    switch (headingLevel) {\r\n    case 1: // H1\r\n      headingElement.style.fontSize = \"32px\";\r\n      headingElement.style.fontWeight = \"bold\";\r\n      headingElement.style.marginBottom = \"16px\";\r\n      headingElement.style.marginTop = \"16px\";\r\n      headingElement.style.color = \"#333\";\r\n      headingElement.style.lineHeight = \"1.2\";\r\n      break;\r\n    case 2: // H2\r\n      headingElement.style.fontSize = \"28px\";\r\n      headingElement.style.fontWeight = \"bold\";\r\n      headingElement.style.marginBottom = \"14px\";\r\n      headingElement.style.marginTop = \"14px\";\r\n      headingElement.style.color = \"#444\";\r\n      headingElement.style.lineHeight = \"1.2\";\r\n      break;\r\n    case 3: // H3\r\n      headingElement.style.fontSize = \"24px\";\r\n      headingElement.style.fontWeight = \"bold\";\r\n      headingElement.style.marginBottom = \"12px\";\r\n      headingElement.style.marginTop = \"12px\";\r\n      headingElement.style.color = \"#555\";\r\n      headingElement.style.lineHeight = \"1.3\";\r\n      break;\r\n    case 4: // H4\r\n      headingElement.style.fontSize = \"20px\";\r\n      headingElement.style.fontWeight = \"bold\";\r\n      headingElement.style.marginBottom = \"10px\";\r\n      headingElement.style.marginTop = \"10px\";\r\n      headingElement.style.color = \"#666\";\r\n      headingElement.style.lineHeight = \"1.3\";\r\n      break;\r\n    case 5: // H5\r\n      headingElement.style.fontSize = \"18px\";\r\n      headingElement.style.fontWeight = \"bold\";\r\n      headingElement.style.marginBottom = \"8px\";\r\n      headingElement.style.marginTop = \"8px\";\r\n      headingElement.style.color = \"#777\";\r\n      headingElement.style.lineHeight = \"1.4\";\r\n      break;\r\n    case 6: // H6\r\n      headingElement.style.fontSize = \"16px\";\r\n      headingElement.style.fontWeight = \"bold\";\r\n      headingElement.style.marginBottom = \"6px\";\r\n      headingElement.style.marginTop = \"6px\";\r\n      headingElement.style.color = \"#888\";\r\n      headingElement.style.lineHeight = \"1.4\";\r\n      break;\r\n    }\r\n\r\n    // Extract the selected content\r\n    const headingFragment = range.extractContents();\r\n    headingElement.appendChild(headingFragment);\r\n\r\n    // Insert the heading element\r\n    range.insertNode(headingElement);\r\n\r\n    // Update selection to include the new heading\r\n    selection.removeAllRanges();\r\n    const headingRange = document.createRange();\r\n    headingRange.selectNodeContents(headingElement);\r\n    selection.addRange(headingRange);\r\n\r\n    // Update the element content\r\n    const headingUpdatedElement = {\r\n      ...props.element,\r\n      content: contentElement.value.innerHTML,\r\n    };\r\n\r\n    emit(\"update:element\", headingUpdatedElement);\r\n    return true;\r\n  case \"foreColor\":\r\n    command = \"foreColor\";\r\n    break;\r\n  case \"backColor\":\r\n    command = \"backColor\";\r\n    break;\r\n  case \"justifyLeft\":\r\n  case \"justifyCenter\":\r\n  case \"justifyRight\":\r\n  case \"justifyFull\":\r\n    command = styleProperty;\r\n    value2 = \"\"; // Use empty string instead of null\r\n    break;\r\n  default:\r\n    // Using custom span for style\r\n    // For unsupported commands, wrap in a span with inline style\r\n    const span = document.createElement(\"span\");\r\n    span.style.setProperty(styleProperty, value as string);\r\n\r\n    // Extract the selected content\r\n    const fragment = range.extractContents();\r\n    span.appendChild(fragment);\r\n\r\n    // Insert the styled span\r\n    range.insertNode(span);\r\n\r\n    // Update selection to include the new span\r\n    selection.removeAllRanges();\r\n    const newRange = document.createRange();\r\n    newRange.selectNodeContents(span);\r\n    selection.addRange(newRange);\r\n\r\n    // Update the element content\r\n    const updatedElement = {\r\n      ...props.element,\r\n      content: contentElement.value.innerHTML,\r\n    };\r\n\r\n    emit(\"update:element\", updatedElement);\r\n    return true;\r\n  }\r\n\r\n  // For supported commands, use execCommand\r\n  if (command) {\r\n    // Using try-catch to handle deprecated execCommand\r\n    try {\r\n      document.execCommand(command, false, value2 as string);\r\n\r\n      // Update the element content\r\n      const updatedElement = {\r\n        ...props.element,\r\n        content: contentElement.value.innerHTML,\r\n      };\r\n\r\n      emit(\"update:element\", updatedElement);\r\n      return true;\r\n    } catch (error) {\r\n      console.warn(\r\n        \"execCommand is deprecated, consider using a modern alternative\",\r\n      );\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n// No longer needed - using direct text selection utility instead\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  if (isEditing.value || event.target === contentElement.value) return;\r\n\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  // Calculate new position\r\n  let newX = startLeft + deltaX;\r\n  let newY = startTop + deltaY;\r\n\r\n  // Snap to grid (10px grid)\r\n  const gridSize = 10;\r\n  newX = Math.round(newX / gridSize) * gridSize;\r\n  newY = Math.round(newY / gridSize) * gridSize;\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: {\r\n      x: newX,\r\n      y: newY,\r\n    },\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\n// Handle resize from ResizeHandles component\r\nfunction handleResize(newSize: Size, newPosition: Position) {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\n// Resize is now handled by the ResizeHandles component\r\n\r\n// Set up mutation observer to track DOM changes\r\nfunction setupMutationObserver() {\r\n  if (!contentElement.value) return;\r\n\r\n  observer = new MutationObserver((mutations) => {\r\n    if (isUpdating) return;\r\n\r\n    // If the content changed, update the element\r\n    const contentChanged = mutations.some(\r\n      (mutation) =>\r\n        mutation.type === \"childList\" || mutation.type === \"characterData\",\r\n    );\r\n\r\n    if (contentChanged) {\r\n      // Get the current content\r\n      const currentContent = contentElement.value?.innerHTML || \"\";\r\n\r\n      // Skip empty content or if it's the same as the current element content\r\n      if (currentContent === \"\" || currentContent === props.element.content) {\r\n        return;\r\n      }\r\n\r\n      // Add a small delay to ensure the DOM has settled\r\n      setTimeout(() => {\r\n        if (contentElement.value && contentElement.value.innerHTML !== \"\") {\r\n          handleTextChange({\r\n            target: contentElement.value,\r\n          } as unknown as Event);\r\n        }\r\n      }, 10);\r\n    }\r\n  });\r\n\r\n  observer.observe(contentElement.value, {\r\n    childList: true,\r\n    characterData: true,\r\n    subtree: true,\r\n    attributes: true,\r\n    attributeFilter: [\"style\", \"class\"],\r\n  });\r\n}\r\n\r\n// Store event handlers as refs so they can be properly removed\r\nconst clickHandler = (e: MouseEvent): void => {\r\n  const element = contentElement.value;\r\n  if (e.target === element && element) {\r\n    element.focus();\r\n  }\r\n};\r\n\r\nconst mouseupHandler = (): void => {\r\n  // Use requestAnimationFrame instead of setTimeout for better performance\r\n  requestAnimationFrame(() => {\r\n    const selection = window.getSelection();\r\n    if (selection && !selection.isCollapsed && selection.rangeCount > 0 && contentElement.value) {\r\n      // Save selection state\r\n      saveSelection();\r\n    }\r\n  });\r\n};\r\n\r\nconst keyupHandler = (e: KeyboardEvent): void => {\r\n  // Only for navigation keys and shift (for selection)\r\n  if (\r\n    e.key.includes(\"Arrow\") ||\r\n    e.key === \"Home\" ||\r\n    e.key === \"End\" ||\r\n    e.key === \"PageUp\" ||\r\n    e.key === \"PageDown\" ||\r\n    e.key === \"Shift\"\r\n  ) {\r\n    // Use requestAnimationFrame instead of setTimeout for better performance\r\n    requestAnimationFrame(() => {\r\n      const selection = window.getSelection();\r\n      if (selection && !selection.isCollapsed && selection.rangeCount > 0) {\r\n        // Save selection state\r\n        saveSelection();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// Initialize the component - combine the two onMounted hooks\r\nonMounted(() => {\r\n  // Apply initial styles\r\n  nextTick(() => {\r\n    // Force update of the element style for block background\r\n    if (props.element.style?.blockBackground && contentElement.value) {\r\n      // Apply initial block background color\r\n      const elementDiv = contentElement.value.parentElement;\r\n      if (elementDiv) {\r\n        elementDiv.style.backgroundColor =\r\n          props.element.style.blockBackgroundColor || \"#f5f5f5\";\r\n      }\r\n    }\r\n  });\r\n\r\n  if (contentElement.value) {\r\n    // Set initial content\r\n    contentElement.value.innerHTML = props.element.content || \"\";\r\n\r\n    // Ensure the element has proper attributes for editing\r\n    contentElement.value.setAttribute(\"contenteditable\", \"true\");\r\n    contentElement.value.setAttribute(\"spellcheck\", \"false\"); // Disable spell checking to avoid browser interference\r\n    contentElement.value.setAttribute(\"data-text-element\", \"true\"); // Add a data attribute for easier selection\r\n\r\n    // Apply styles directly to ensure they take effect immediately\r\n    Object.assign(contentElement.value.style, textStyle.value);\r\n\r\n    // Set up mutation observer\r\n    setupMutationObserver();\r\n\r\n    // Add event listeners with proper references for cleanup\r\n    const element = contentElement.value;\r\n    element.addEventListener(\"click\", clickHandler);\r\n    element.addEventListener(\"mouseup\", mouseupHandler);\r\n    element.addEventListener(\"keyup\", keyupHandler);\r\n  }\r\n});\r\n\r\n// Expose methods to parent components\r\ndefineExpose({\r\n  // No special methods needed anymore, selection is handled by the global selection manager\r\n});\r\n\r\n// Proper cleanup of all event listeners and observers\r\nonBeforeUnmount(() => {\r\n  // Clean up mutation observer\r\n  if (observer) {\r\n    observer.disconnect();\r\n    observer = null;\r\n  }\r\n\r\n  // Clean up event listeners\r\n  if (contentElement.value) {\r\n    contentElement.value.removeEventListener(\"click\", clickHandler);\r\n    contentElement.value.removeEventListener(\"mouseup\", mouseupHandler);\r\n    contentElement.value.removeEventListener(\"keyup\", keyupHandler);\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.element {\r\n  position: absolute;\r\n  user-select: none;\r\n\r\n  &.selected {\r\n    outline: none;\r\n  }\r\n}\r\n\r\n.text-element {\r\n  overflow: hidden;\r\n\r\n  .element-content {\r\n    width: 100%;\r\n    height: 100%;\r\n    outline: none !important;\r\n    overflow: auto;\r\n    white-space: pre-wrap;\r\n    word-break: break-word;\r\n    caret-color: black; /* Ensure the caret is visible with high contrast */\r\n\r\n    /* Ensure proper cursor positioning */\r\n    &:focus {\r\n      outline: none !important;\r\n      box-shadow: none !important;\r\n    }\r\n\r\n    /* Fix for cursor position after line break */\r\n    br {\r\n      display: block;\r\n      content: \"\";\r\n      margin-top: 0;\r\n      line-height: inherit;\r\n      min-height: 1.5em; /* Ensure line breaks have consistent height */\r\n      user-select: none; /* Prevent selection of line breaks */\r\n    }\r\n\r\n    /* Ensure empty lines are visible */\r\n    &:empty::after {\r\n      content: \"\\00a0\"; /* Non-breaking space */\r\n      display: inline;\r\n    }\r\n\r\n    /* Fix for cursor positioning on Enter key press */\r\n    &[contenteditable] {\r\n      -webkit-user-select: text;\r\n      user-select: text;\r\n      position: relative;\r\n      cursor: text;\r\n    }\r\n\r\n    /* Improve text selection visibility */\r\n    &::selection {\r\n      background-color: rgba(0, 123, 255, 0.3) !important;\r\n      color: inherit !important;\r\n    }\r\n\r\n    *::selection {\r\n      background-color: rgba(0, 123, 255, 0.3) !important;\r\n      color: inherit !important;\r\n    }\r\n\r\n    /* Ensure spans created by text formatting are properly styled */\r\n    span {\r\n      display: inline;\r\n      vertical-align: baseline;\r\n      line-height: normal; /* Prevent line height issues with font size changes */\r\n    }\r\n\r\n    /* Ensure font size spans are displayed correctly */\r\n    span[style*=\"font-size\"] {\r\n      display: inline;\r\n      vertical-align: baseline;\r\n      line-height: normal;\r\n    }\r\n\r\n    /* Ensure proper cursor positioning in empty elements */\r\n    &:empty {\r\n      min-height: 1em;\r\n      display: block;\r\n    }\r\n\r\n    /* Ensure proper cursor positioning with different font sizes */\r\n    span,\r\n    p,\r\n    div,\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6 {\r\n      min-height: 1em;\r\n      caret-color: black;\r\n    }\r\n\r\n    /* Style heading elements */\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5,\r\n    h6 {\r\n      margin: 0;\r\n      padding: 0;\r\n      display: block;\r\n      line-height: 1.2;\r\n      font-family: inherit;\r\n    }\r\n\r\n    /* Specific heading styles */\r\n    h1 {\r\n      font-size: 32px;\r\n      font-weight: bold;\r\n      margin-bottom: 16px;\r\n      color: #333;\r\n    }\r\n\r\n    h2 {\r\n      font-size: 28px;\r\n      font-weight: bold;\r\n      margin-bottom: 14px;\r\n      color: #444;\r\n    }\r\n\r\n    h3 {\r\n      font-size: 24px;\r\n      font-weight: bold;\r\n      margin-bottom: 12px;\r\n      color: #555;\r\n    }\r\n\r\n    h4 {\r\n      font-size: 20px;\r\n      font-weight: bold;\r\n      margin-bottom: 10px;\r\n    }\r\n\r\n    h5 {\r\n      font-size: 18px;\r\n      font-weight: bold;\r\n      margin-bottom: 8px;\r\n    }\r\n\r\n    h6 {\r\n      font-size: 16px;\r\n      font-weight: bold;\r\n      margin-bottom: 6px;\r\n    }\r\n\r\n    /* Handle zero-width spaces used for cursor positioning */\r\n    &:after br {\r\n      content: \"\";\r\n      white-space: pre;\r\n    }\r\n  }\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n  border-radius: 2px;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\TextElementNew.vue","messages":[{"ruleId":"vue/attributes-order","severity":1,"message":"Attribute \"ref\" should go before \"class\".","line":13,"column":7,"nodeType":"VAttribute","messageId":"expectedOrder","endLine":13,"endColumn":27,"fix":{"range":[245,296],"text":"ref=\"contentElement\"\r\n      class=\"element-content\""}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":62,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":62,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":139,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":139,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":166,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":166,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":184,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":184,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":189,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":189,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":194,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":194,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":200,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":200,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":206,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":206,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":212,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":212,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":234,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":234,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"<template>\r\n  <BaseElement\r\n    class=\"text-element\"\r\n    :element=\"element\"\r\n    :isSelected=\"isSelected\"\r\n    :isPreview=\"isPreview\"\r\n    :minWidth=\"50\"\r\n    :minHeight=\"30\"\r\n    @update:element=\"handleBaseElementUpdate\"\r\n  >\r\n    <div\r\n      class=\"element-content\"\r\n      ref=\"contentElement\"\r\n      contenteditable=\"true\"\r\n      :style=\"textStyle\"\r\n      :data-element-id=\"element.id\"\r\n      @input=\"handleTextChange\"\r\n      @keydown=\"handleKeyDown\"\r\n      @focus=\"handleFocus\"\r\n      @blur=\"handleBlur\"\r\n      @mousedown=\"handleMouseDown\"\r\n      @mouseup=\"handleMouseUp\"\r\n      @keyup=\"handleKeyUp\"\r\n    ></div>\r\n  </BaseElement>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  computed,\r\n  watch,\r\n  onMounted,\r\n  onBeforeUnmount,\r\n} from \"vue\";\r\nimport type { CSSProperties } from \"vue\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\nimport { saveSelection } from \"../../../utils/selectionManager\";\r\nimport BaseElement from \"./BaseElement.vue\";\r\nimport { getFontFamilyValue } from \"../../../utils/fontFamilies\";\r\n\r\n// Import styles\r\nimport \"../../../assets/styles/components/elements.scss\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n  isSelected: boolean;\r\n  isPreview?: boolean;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n  (e: \"click\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst contentElement = ref<HTMLElement | null>(null);\r\nconst isEditing = ref(false);\r\nlet observer: MutationObserver | null = null;\r\nlet isUpdating = false;\r\n\r\n// Handle updates from the base element\r\nfunction handleBaseElementUpdate(updatedElement: DocumentElement) {\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nconst textStyle = computed<CSSProperties>(() => {\r\n  const style = props.element.style || {};\r\n\r\n  // Base styles\r\n  const baseStyles: CSSProperties = {\r\n    fontFamily: getFontFamilyValue(style.fontFamily || \"Roboto\"),\r\n    fontSize: `${style.fontSize || 16}px`,\r\n    fontWeight: style.bold ? \"bold\" : \"normal\",\r\n    fontStyle: style.italic ? \"italic\" : \"normal\",\r\n    textDecoration: style.underline ? \"underline\" : \"none\",\r\n    textAlign: style.align || \"left\",\r\n    color: style.color || \"#000000\",\r\n    backgroundColor: style.blockBackground\r\n      ? \"transparent\"\r\n      : style.backgroundColor || \"transparent\",\r\n    textIndent: style.textIndent ? `${style.textIndent}px` : \"0px\",\r\n    lineHeight: style.lineHeight ? style.lineHeight : 1.5,\r\n    paddingLeft: style.paragraphIndent ? `${style.paragraphIndent}px` : \"0px\",\r\n    margin: 0,\r\n    padding: 0,\r\n    whiteSpace: \"pre-wrap\",\r\n    wordBreak: \"break-word\",\r\n    outline: \"none\",\r\n    cursor: \"text\",\r\n    userSelect: \"text\" as const,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n\r\n  // Add list styles if needed\r\n  if (style.listType === \"bullet\") {\r\n    return {\r\n      ...baseStyles,\r\n      listStyleType: \"disc\",\r\n      listStylePosition: \"inside\",\r\n      display: \"list-item\",\r\n      paddingLeft: \"20px\", // Add padding for better visual appearance\r\n      marginLeft: style.paragraphIndent ? `${style.paragraphIndent}px` : \"0px\",\r\n    } as CSSProperties;\r\n  } else if (style.listType === \"number\") {\r\n    return {\r\n      ...baseStyles,\r\n      listStyleType: \"decimal\",\r\n      listStylePosition: \"inside\",\r\n      display: \"list-item\",\r\n      paddingLeft: \"20px\", // Add padding for better visual appearance\r\n      marginLeft: style.paragraphIndent ? `${style.paragraphIndent}px` : \"0px\",\r\n    } as CSSProperties;\r\n  }\r\n\r\n  return baseStyles;\r\n});\r\n\r\n// Watch for content changes from outside this component\r\nwatch(\r\n  () => props.element.content,\r\n  (newContent) => {\r\n    if (contentElement.value && !isUpdating) {\r\n      // Temporarily disable the observer to prevent loops\r\n      if (observer) {\r\n        observer.disconnect();\r\n      }\r\n\r\n      // Update the content\r\n      contentElement.value.innerHTML = newContent || \"\";\r\n\r\n      // Re-enable the observer\r\n      setupMutationObserver();\r\n    }\r\n  },\r\n);\r\n\r\n// Setup mutation observer to track content changes\r\nfunction setupMutationObserver() {\r\n  if (!contentElement.value) return;\r\n\r\n  // Create a new observer\r\n  observer = new MutationObserver(() => {\r\n    if (!isUpdating && contentElement.value) {\r\n      // Update the element content\r\n      const updatedElement = {\r\n        ...props.element,\r\n        content: contentElement.value.innerHTML,\r\n      };\r\n\r\n      isUpdating = true;\r\n      emit(\"update:element\", updatedElement);\r\n      isUpdating = false;\r\n    }\r\n  });\r\n\r\n  // Start observing\r\n  observer.observe(contentElement.value, {\r\n    childList: true,\r\n    characterData: true,\r\n    subtree: true,\r\n  });\r\n}\r\n\r\n// Handle text changes\r\nfunction handleTextChange() {\r\n  if (!contentElement.value || isUpdating) return;\r\n\r\n  // Save the current selection\r\n  saveSelection();\r\n\r\n  // Update the element content\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: contentElement.value.innerHTML,\r\n  };\r\n\r\n  isUpdating = true;\r\n  emit(\"update:element\", updatedElement);\r\n  isUpdating = false;\r\n}\r\n\r\n// Handle focus events\r\nfunction handleFocus() {\r\n  isEditing.value = true;\r\n}\r\n\r\n// Handle blur events\r\nfunction handleBlur() {\r\n  isEditing.value = false;\r\n}\r\n\r\n// Handle mouse down events\r\nfunction handleMouseDown(event: MouseEvent) {\r\n  // Prevent propagation to allow text selection\r\n  event.stopPropagation();\r\n}\r\n\r\n// Handle mouse up events\r\nfunction handleMouseUp(event: MouseEvent) {\r\n  // Prevent propagation to allow text selection\r\n  event.stopPropagation();\r\n}\r\n\r\n// Handle key up events\r\nfunction handleKeyUp() {\r\n  // Save selection on key up\r\n  saveSelection();\r\n}\r\n\r\n// Handle key down events\r\nfunction handleKeyDown(event: KeyboardEvent) {\r\n  // Handle keyboard shortcuts\r\n  if ((event.ctrlKey || event.metaKey) && isEditing.value) {\r\n    // Handle common keyboard shortcuts\r\n    switch (event.key.toLowerCase()) {\r\n    case \"b\": // Bold\r\n      event.preventDefault();\r\n      toggleStyle(\"bold\");\r\n      break;\r\n    case \"i\": // Italic\r\n      event.preventDefault();\r\n      toggleStyle(\"italic\");\r\n      break;\r\n    case \"u\": // Underline\r\n      event.preventDefault();\r\n      toggleStyle(\"underline\");\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n// Toggle a style property\r\nfunction toggleStyle(property: string) {\r\n  const style = props.element.style || {};\r\n  const updatedElement = {\r\n    ...props.element,\r\n    style: {\r\n      ...style,\r\n      [property]: !style[property],\r\n    },\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\n// Initialize the component\r\nonMounted(() => {\r\n  if (contentElement.value) {\r\n    // Set initial content\r\n    contentElement.value.innerHTML = props.element.content || \"\";\r\n\r\n    // Setup mutation observer\r\n    setupMutationObserver();\r\n  }\r\n});\r\n\r\n// Clean up\r\nonBeforeUnmount(() => {\r\n  if (observer) {\r\n    observer.disconnect();\r\n    observer = null;\r\n  }\r\n});\r\n</script>\r\n\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\elements\\VideoElement.vue","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'startHeight' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":71,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":86,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":86,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":91,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":91,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":102,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":102,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":106,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":106,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":117,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":117,"endColumn":16},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":136,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":136,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":142,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":142,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":153,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":153,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'deltaY' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":157,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":177,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":177,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div\r\n    class=\"video-element element\"\r\n    :class=\"{ selected: isSelected }\"\r\n    :style=\"elementStyle\"\r\n    @mousedown.stop=\"startDrag\"\r\n  >\r\n    <div v-if=\"!element.content\" class=\"video-placeholder\" @click=\"openVideoDialog\">\r\n      <v-icon size=\"32\" color=\"grey\">mdi-video</v-icon>\r\n      <span>Click to add video</span>\r\n    </div>\r\n    <video\r\n      v-else\r\n      :src=\"element.content\"\r\n      controls\r\n      class=\"video-player\"\r\n      @error=\"handleVideoError\"\r\n    ></video>\r\n    <div v-if=\"isSelected\" class=\"resize-handle\" @mousedown.stop=\"startResize\"></div>\r\n\r\n    <v-dialog v-model=\"videoDialog\" max-width=\"500\">\r\n      <v-card>\r\n        <v-card-title>Add Video</v-card-title>\r\n        <v-card-text>\r\n          <v-text-field\r\n            v-model=\"videoUrl\"\r\n            label=\"Video URL\"\r\n            variant=\"outlined\"\r\n            density=\"comfortable\"\r\n            hide-details\r\n            class=\"mb-4\"\r\n          ></v-text-field>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"videoDialog = false\">Cancel</v-btn>\r\n          <v-btn color=\"primary\" @click=\"saveVideo\">Add Video</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed } from \"vue\";\r\nimport { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement\r\n  isSelected: boolean\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void\r\n}>();\r\n\r\nconst videoDialog = ref(false);\r\nconst videoUrl = ref(\"\");\r\nconst videoError = ref(false);\r\n\r\n// Drag & drop functionality\r\nlet isDragging = false;\r\nlet startX = 0;\r\nlet startY = 0;\r\nlet startLeft = 0;\r\nlet startTop = 0;\r\n\r\n// Resize functionality\r\nlet isResizing = false;\r\nlet startWidth = 0;\r\nlet startHeight = 0;\r\n\r\nconst elementStyle = computed(() => {\r\n  return {\r\n    left: `${props.element.position.x}px`,\r\n    top: `${props.element.position.y}px`,\r\n    width: `${props.element.size.width}px`,\r\n    height: `${props.element.size.height}px`,\r\n    backgroundColor: \"#f5f5f5\",\r\n    borderRadius: \"4px\",\r\n    border: props.isSelected ? \"2px solid var(--primary)\" : \"1px solid var(--border)\",\r\n    zIndex: props.element.zIndex ?? 0,\r\n  };\r\n});\r\n\r\nfunction openVideoDialog() {\r\n  videoUrl.value = props.element.content || \"\";\r\n  videoDialog.value = true;\r\n}\r\n\r\nfunction saveVideo() {\r\n  if (videoUrl.value) {\r\n    const updatedElement = {\r\n      ...props.element,\r\n      content: videoUrl.value,\r\n    };\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n  videoDialog.value = false;\r\n}\r\n\r\nfunction handleVideoError() {\r\n  videoError.value = true;\r\n}\r\n\r\nfunction startDrag(event: MouseEvent) {\r\n  isDragging = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startLeft = props.element.position.x;\r\n  startTop = props.element.position.y;\r\n\r\n  document.addEventListener(\"mousemove\", onDrag);\r\n  document.addEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction onDrag(event: MouseEvent) {\r\n  if (!isDragging) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  const newPosition = {\r\n    x: startLeft + deltaX,\r\n    y: startTop + deltaY,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    position: newPosition,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopDrag() {\r\n  isDragging = false;\r\n  document.removeEventListener(\"mousemove\", onDrag);\r\n  document.removeEventListener(\"mouseup\", stopDrag);\r\n}\r\n\r\nfunction startResize(event: MouseEvent) {\r\n  isResizing = true;\r\n  startX = event.clientX;\r\n  startY = event.clientY;\r\n  startWidth = props.element.size.width;\r\n  startHeight = props.element.size.height;\r\n\r\n  document.addEventListener(\"mousemove\", onResize);\r\n  document.addEventListener(\"mouseup\", stopResize);\r\n}\r\n\r\nfunction onResize(event: MouseEvent) {\r\n  if (!isResizing) return;\r\n\r\n  const deltaX = event.clientX - startX;\r\n  const deltaY = event.clientY - startY;\r\n\r\n  // Maintain 16:9 aspect ratio\r\n  const aspectRatio = 16/9;\r\n  const newWidth = Math.max(200, startWidth + deltaX);\r\n  const newHeight = newWidth / aspectRatio;\r\n\r\n  const newSize = {\r\n    width: newWidth,\r\n    height: newHeight,\r\n  };\r\n\r\n  const updatedElement = {\r\n    ...props.element,\r\n    size: newSize,\r\n  };\r\n\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction stopResize() {\r\n  isResizing = false;\r\n  document.removeEventListener(\"mousemove\", onResize);\r\n  document.removeEventListener(\"mouseup\", stopResize);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.video-element {\r\n  position: absolute;\r\n  cursor: move;\r\n  overflow: hidden;\r\n\r\n  &.selected {\r\n    outline: none;\r\n  }\r\n}\r\n\r\n.video-placeholder {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #eee;\r\n  }\r\n}\r\n\r\n.video-player {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.resize-handle {\r\n  position: absolute;\r\n  width: 10px;\r\n  height: 10px;\r\n  background-color: var(--primary);\r\n  bottom: 0;\r\n  right: 0;\r\n  cursor: nwse-resize;\r\n  z-index: 1;\r\n  border-radius: 2px;\r\n}\r\n</style>","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\DataGridProperties.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":78,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":78,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":89,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":89,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2597,2600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2597,2600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":113,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":113,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2904,2907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2904,2907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3088,3091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3088,3091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":134,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":134,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":135,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3480,3483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3480,3483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":150,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":150,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Data Grid Properties</div>\r\n    \r\n    <div class=\"section-title mt-4\">Columns</div>\r\n    <draggable \r\n      v-model=\"columns\"\r\n      item-key=\"field\"\r\n      handle=\".drag-handle\"\r\n      class=\"columns-list mb-4\"\r\n    >\r\n      <template #item=\"{ element: column }\">\r\n        <div class=\"column-row\">\r\n          <v-icon size=\"small\" class=\"drag-handle\" color=\"grey\">mdi-drag</v-icon>\r\n          <v-text-field\r\n            v-model=\"column.headerName\"\r\n            label=\"Header\"\r\n            density=\"compact\"\r\n            hide-details\r\n            variant=\"outlined\"\r\n            class=\"column-input\"\r\n            @update:model-value=\"updateColumns\"\r\n          ></v-text-field>\r\n          <v-btn icon\n                 size=\"small\"\n                 color=\"error\"\n                 @click=\"removeColumn(column)\"\n          >\r\n            <v-icon>mdi-delete</v-icon>\r\n          </v-btn>\r\n        </div>\r\n      </template>\r\n    </draggable>\r\n    \r\n    <v-btn block class=\"mb-4\" @click=\"addColumn\">\r\n      <v-icon left>mdi-plus</v-icon>\r\n      Add Column\r\n    </v-btn>\r\n    \r\n    <v-divider class=\"my-4\"></v-divider>\r\n    \r\n    <div class=\"section-title\">Data</div>\r\n    <v-btn block class=\"mb-4\" @click=\"addRow\">\r\n      <v-icon left>mdi-plus</v-icon>\r\n      Add Row\r\n    </v-btn>\r\n    \r\n    <v-btn block\n           color=\"error\"\n           class=\"mb-4\"\n           @click=\"clearData\"\n    >\r\n      <v-icon left>mdi-delete</v-icon>\r\n      Clear All Data\r\n    </v-btn>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from \"vue\";\r\nimport draggable from \"vuedraggable\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void\r\n}>();\r\n\r\nconst columns = ref(props.element.content.columns);\r\n\r\nwatch(() => props.element.content.columns, (newColumns) => {\r\n  columns.value = [...newColumns];\r\n}, { deep: true });\r\n\r\nfunction updateColumns() {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      columns: columns.value,\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction addColumn() {\r\n  const newField = `col${columns.value.length + 1}`;\r\n  columns.value.push({\r\n    field: newField,\r\n    headerName: `Column ${columns.value.length + 1}`,\r\n  });\r\n  \r\n  // Add empty values for the new column to existing rows\r\n  const updatedRows = props.element.content.rows.map((row: any) => ({\r\n    ...row,\r\n    [newField]: \"\",\r\n  }));\r\n  \r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      columns: columns.value,\r\n      rows: updatedRows,\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction removeColumn(column: any) {\r\n  columns.value = columns.value.filter((col) => col.field !== column.field);\r\n  \r\n  // Remove column data from rows\r\n  const updatedRows = props.element.content.rows.map((row: any) => {\r\n    const newRow = { ...row };\r\n    delete newRow[column.field];\r\n    return newRow;\r\n  });\r\n  \r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      columns: columns.value,\r\n      rows: updatedRows,\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction addRow() {\r\n  const newRow = columns.value.reduce((acc: any, col) => {\r\n    acc[col.field] = \"\";\r\n    return acc;\r\n  }, {});\r\n  \r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      rows: [...props.element.content.rows, newRow],\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction clearData() {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      rows: [],\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.section-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: var(--text-secondary);\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.columns-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.column-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  \r\n  .drag-handle {\r\n    cursor: move;\r\n  }\r\n  \r\n  .column-input {\r\n    flex: 1;\r\n  }\r\n}\r\n</style>","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\FormProperties.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":150,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":150,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":160,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":160,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":170,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":170,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":171,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4755,4758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4755,4758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":192,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":192,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":196,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":196,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":200,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":200,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":208,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":208,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":213,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":213,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":217,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":217,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":221,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":221,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateBackgroundColor' is defined but never used. Allowed unused vars must match /^_/u.","line":221,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Form Properties</div>\r\n\r\n    <v-select\r\n      v-model=\"formType\"\r\n      label=\"Form Type\"\r\n      :items=\"formTypes\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateFormType\"\r\n    ></v-select>\r\n\r\n    <v-text-field\r\n      v-if=\"['textfield', 'textarea', 'select'].includes(formType)\"\r\n      v-model=\"label\"\r\n      label=\"Label\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateLabel\"\r\n    ></v-text-field>\r\n\r\n    <template v-if=\"formType === 'textfield'\">\r\n      <v-select\r\n        v-model=\"inputType\"\r\n        label=\"Input Type\"\r\n        :items=\"inputTypes\"\r\n        density=\"compact\"\r\n        variant=\"outlined\"\r\n        hide-details\r\n        class=\"mb-4\"\r\n        @update:model-value=\"updateInputType\"\r\n      ></v-select>\r\n    </template>\r\n\r\n    <template v-if=\"['checkbox', 'radio', 'select'].includes(formType)\">\r\n      <div class=\"property-group-subtitle mb-2\">Options</div>\r\n      <draggable\r\n        v-model=\"options\"\r\n        item-key=\"id\"\r\n        handle=\".drag-handle\"\r\n        class=\"options-list mb-4\"\r\n      >\r\n        <template #item=\"{ element: option }\">\r\n          <div class=\"option-row\">\r\n            <v-icon size=\"small\"\n                    class=\"drag-handle\"\n                    color=\"grey\"\n            >mdi-drag</v-icon>\r\n            <v-text-field\r\n              v-model=\"option.text\"\r\n              density=\"compact\"\r\n              hide-details\r\n              variant=\"outlined\"\r\n              class=\"option-input\"\r\n              @update:model-value=\"updateOptions\"\r\n            ></v-text-field>\r\n            <v-btn\r\n              icon\r\n              size=\"small\"\r\n              color=\"error\"\r\n              @click=\"removeOption(option)\"\r\n            >\r\n              <v-icon>mdi-delete</v-icon>\r\n            </v-btn>\r\n          </div>\r\n        </template>\r\n      </draggable>\r\n\r\n      <v-btn block class=\"mb-4\" @click=\"addOption\">\r\n        <v-icon left>mdi-plus</v-icon>\r\n        Add Option\r\n      </v-btn>\r\n\r\n      <v-switch\r\n        v-if=\"formType === 'radio'\"\r\n        v-model=\"inline\"\r\n        label=\"Inline Layout\"\r\n        density=\"compact\"\r\n        hide-details\r\n        class=\"mb-4\"\r\n        @update:model-value=\"updateInline\"\r\n      ></v-switch>\r\n    </template>\r\n    <!--     \r\n    <v-divider class=\"my-4\"></v-divider>\r\n    \r\n    <div class=\"property-group-subtitle mb-2\">Style</div>\r\n    <v-text-field\r\n      v-model=\"backgroundColor\"\r\n      label=\"Background Color\"\r\n      type=\"color\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateBackgroundColor\"\r\n    ></v-text-field> -->\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from \"vue\";\r\nimport draggable from \"vuedraggable\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst formTypes = [\"checkbox\", \"radio\", \"select\", \"textfield\", \"textarea\"];\r\nconst inputTypes = [\"text\", \"email\", \"number\", \"tel\", \"url\", \"password\"];\r\n\r\nconst formType = ref(props.element.content.type);\r\nconst label = ref(props.element.content.label || \"\");\r\nconst options = ref(\r\n  (props.element.content.options || []).map((text: string) => ({\r\n    id: crypto.randomUUID(),\r\n    text,\r\n  })),\r\n);\r\nconst inline = ref(props.element.content.inline || false);\r\nconst inputType = ref(props.element.content.inputType || \"text\");\r\nconst backgroundColor = ref(props.element.style?.backgroundColor || \"white\");\r\n\r\nwatch(\r\n  () => props.element,\r\n  (newValue) => {\r\n    formType.value = newValue.content.type;\r\n    label.value = newValue.content.label || \"\";\r\n    options.value = (newValue.content.options || []).map((text: string) => ({\r\n      id: crypto.randomUUID(),\r\n      text,\r\n    }));\r\n    inline.value = newValue.content.inline || false;\r\n    inputType.value = newValue.content.inputType || \"text\";\r\n    backgroundColor.value = newValue.style?.backgroundColor || \"white\";\r\n  },\r\n  { deep: true },\r\n);\r\n\r\nfunction updateElement(updates: Partial<typeof props.element.content>) {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    content: {\r\n      ...props.element.content,\r\n      ...updates,\r\n    },\r\n  });\r\n}\r\n\r\nfunction updateStyle(updates: Partial<typeof props.element.style>) {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      ...updates,\r\n    },\r\n  });\r\n}\r\n\r\nfunction updateFormType() {\r\n  const newContent: any = { type: formType.value };\r\n\r\n  if ([\"checkbox\", \"radio\", \"select\"].includes(formType.value)) {\r\n    newContent.options = [\"Option 1\"];\r\n  }\r\n  if ([\"textfield\", \"textarea\", \"select\"].includes(formType.value)) {\r\n    newContent.label = \"Label\";\r\n  }\r\n  if (formType.value === \"radio\") {\r\n    newContent.inline = false;\r\n  }\r\n  if (formType.value === \"textfield\") {\r\n    newContent.inputType = \"text\";\r\n  }\r\n\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    content: newContent,\r\n  });\r\n}\r\n\r\nfunction updateLabel() {\r\n  updateElement({ label: label.value });\r\n}\r\n\r\nfunction updateOptions() {\r\n  updateElement({ options: options.value.map((opt) => opt.text) });\r\n}\r\n\r\nfunction addOption() {\r\n  options.value.push({\r\n    id: crypto.randomUUID(),\r\n    text: `Option ${options.value.length + 1}`,\r\n  });\r\n  updateOptions();\r\n}\r\n\r\nfunction removeOption(option: { id: string; text: string }) {\r\n  options.value = options.value.filter((opt) => opt.id !== option.id);\r\n  updateOptions();\r\n}\r\n\r\nfunction updateInline() {\r\n  updateElement({ inline: inline.value });\r\n}\r\n\r\nfunction updateInputType() {\r\n  updateElement({ inputType: inputType.value });\r\n}\r\n\r\nfunction updateBackgroundColor() {\r\n  updateStyle({ backgroundColor: backgroundColor.value });\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.property-group-title {\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.property-group-subtitle {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.options-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.option-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n\r\n  .drag-handle {\r\n    cursor: move;\r\n  }\r\n\r\n  .option-input {\r\n    flex: 1;\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\GridProperties.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":107,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":107,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":111,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":117,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":117,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":127,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":127,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":132,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":132,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Grid Properties</div>\r\n    \r\n    <div class=\"section-title mt-4\">Cells</div>\r\n    <draggable \r\n      v-model=\"cells\"\r\n      item-key=\"id\"\r\n      handle=\".drag-handle\"\r\n      class=\"cells-list mb-4\"\r\n    >\r\n      <template #item=\"{ element: cell, index }\">\r\n        <div class=\"cell-row\">\r\n          <v-icon size=\"small\" class=\"drag-handle\" color=\"grey\">mdi-drag</v-icon>\r\n          <v-select\r\n            v-model=\"cell.type\"\r\n            :items=\"['text', 'image']\"\r\n            density=\"compact\"\r\n            hide-details\r\n            variant=\"outlined\"\r\n            class=\"cell-type\"\r\n            @update:model-value=\"updateCells\"\r\n          ></v-select>\r\n          <v-text-field\r\n            v-model.number=\"cell.size\"\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"12\"\r\n            density=\"compact\"\r\n            hide-details\r\n            variant=\"outlined\"\r\n            class=\"cell-size\"\r\n            @update:model-value=\"updateCells\"\r\n          ></v-text-field>\r\n          <v-btn icon\n                 size=\"small\"\n                 color=\"error\"\n                 @click=\"removeCell(index)\"\n          >\r\n            <v-icon>mdi-delete</v-icon>\r\n          </v-btn>\r\n        </div>\r\n      </template>\r\n    </draggable>\r\n    \r\n    <v-btn block class=\"mb-4\" @click=\"addCell\">\r\n      <v-icon left>mdi-plus</v-icon>\r\n      Add Cell\r\n    </v-btn>\r\n    \r\n    <v-divider class=\"my-4\"></v-divider>\r\n    \r\n    <div class=\"section-title\">Style</div>\r\n    <v-text-field\r\n      v-model=\"borderColor\"\r\n      label=\"Border Color\"\r\n      type=\"color\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateStyle\"\r\n    ></v-text-field>\r\n    \r\n    <v-text-field\r\n      v-model=\"backgroundColor\"\r\n      label=\"Background Color\"\r\n      type=\"color\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateStyle\"\r\n    ></v-text-field>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from \"vue\";\r\nimport draggable from \"vuedraggable\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void\r\n}>();\r\n\r\nconst cells = ref(props.element.content.cells.map((cell) => ({\r\n  ...cell,\r\n  id: crypto.randomUUID(),\r\n})));\r\nconst borderColor = ref(props.element.style?.borderColor || \"#E2E8F0\");\r\nconst backgroundColor = ref(props.element.style?.backgroundColor || \"white\");\r\n\r\nwatch(() => props.element, (newValue) => {\r\n  cells.value = newValue.content.cells.map((cell) => ({\r\n    ...cell,\r\n    id: crypto.randomUUID(),\r\n  }));\r\n  borderColor.value = newValue.style?.borderColor || \"#E2E8F0\";\r\n  backgroundColor.value = newValue.style?.backgroundColor || \"white\";\r\n}, { deep: true });\r\n\r\nfunction updateCells() {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    content: {\r\n      cells: cells.value.map(({ id, ...cell }) => cell),\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n\r\nfunction addCell() {\r\n  cells.value.push({\r\n    id: crypto.randomUUID(),\r\n    type: \"text\",\r\n    content: \"\",\r\n    size: 1,\r\n  });\r\n  updateCells();\r\n}\r\n\r\nfunction removeCell(index: number) {\r\n  cells.value.splice(index, 1);\r\n  updateCells();\r\n}\r\n\r\nfunction updateStyle() {\r\n  const updatedElement = {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      borderColor: borderColor.value,\r\n      backgroundColor: backgroundColor.value,\r\n    },\r\n  };\r\n  emit(\"update:element\", updatedElement);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.section-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: var(--text-secondary);\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.cells-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.cell-row {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  \r\n  .drag-handle {\r\n    cursor: move;\r\n  }\r\n  \r\n  .cell-type {\r\n    flex: 2;\r\n  }\r\n  \r\n  .cell-size {\r\n    width: 80px;\r\n  }\r\n}\r\n</style>","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\ImageProperties.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":168,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":168,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":172,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":172,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":183,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":183,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":196,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":196,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":217,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":217,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":221,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":221,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":225,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":225,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":229,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":229,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":233,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":233,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":237,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":237,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":241,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":241,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Image Properties</div>\r\n\r\n    <div class=\"image-preview mb-4\">\r\n      <img\r\n        v-if=\"element.content\"\r\n        :src=\"element.content\"\r\n        alt=\"Image preview\"\r\n        @error=\"handlePreviewError\"\r\n      />\r\n      <div v-if=\"!element.content || previewError\" class=\"no-image\">\r\n        <v-icon size=\"32\" color=\"grey\">mdi-image</v-icon>\r\n        <span>No image selected</span>\r\n      </div>\r\n    </div>\r\n\r\n    <v-text-field\r\n      v-model=\"imageUrl\"\r\n      label=\"Image URL\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateImageUrl\"\r\n    ></v-text-field>\r\n\r\n    <v-select\r\n      v-model=\"objectFit\"\r\n      label=\"Object Fit\"\r\n      :items=\"['contain', 'cover', 'fill', 'none']\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateObjectFit\"\r\n    ></v-select>\r\n\r\n    <v-text-field\r\n      v-model.number=\"borderRadius\"\r\n      label=\"Border Radius\"\r\n      type=\"number\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateBorderRadius\"\r\n    ></v-text-field>\r\n\r\n    <v-text-field\r\n      v-model.number=\"borderWidth\"\r\n      label=\"Border Width\"\r\n      type=\"number\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateBorderWidth\"\r\n    ></v-text-field>\r\n\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Border Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"borderColor\"\r\n        @update:model-value=\"updateBorderColor\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Background Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"backgroundColor\"\r\n        @update:model-value=\"updateBackgroundColor\"\r\n      />\r\n    </div>\r\n\r\n    <v-slider\r\n      v-model=\"opacity\"\r\n      label=\"Opacity\"\r\n      min=\"0\"\r\n      max=\"1\"\r\n      step=\"0.1\"\r\n      density=\"compact\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateOpacity\"\r\n    ></v-slider>\r\n\r\n    <div class=\"sample-images\">\r\n      <h4 class=\"text-subtitle-2 mb-2\">Sample Images</h4>\r\n      <div class=\"sample-grid\">\r\n        <div\r\n          v-for=\"(image, index) in sampleImages\"\r\n          :key=\"index\"\r\n          class=\"sample-image\"\r\n          @click=\"selectSampleImage(image.url)\"\r\n        >\r\n          <img :src=\"image.url\" :alt=\"image.alt\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from \"vue\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\nimport AdvancedColorPicker from \"../AdvancedColorPicker.vue\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst previewError = ref(false);\r\nconst imageUrl = ref(props.element.content || \"\");\r\nconst objectFit = ref(props.element.style?.objectFit || \"cover\");\r\nconst borderRadius = ref(props.element.style?.borderRadius || 0);\r\nconst borderWidth = ref(props.element.style?.borderWidth || 0);\r\nconst borderColor = ref(props.element.style?.borderColor || \"#000000\");\r\nconst backgroundColor = ref(props.element.style?.backgroundColor || \"\");\r\nconst opacity = ref(props.element.style?.opacity || 1);\r\n\r\nconst sampleImages = [\r\n  {\r\n    url: \"https://images.pexels.com/photos/3184291/pexels-photo-3184291.jpeg\",\r\n    alt: \"Business meeting\",\r\n  },\r\n  {\r\n    url: \"https://images.pexels.com/photos/3183150/pexels-photo-3183150.jpeg\",\r\n    alt: \"Team collaboration\",\r\n  },\r\n  {\r\n    url: \"https://images.pexels.com/photos/3184325/pexels-photo-3184325.jpeg\",\r\n    alt: \"Office workspace\",\r\n  },\r\n  {\r\n    url: \"https://images.pexels.com/photos/3184339/pexels-photo-3184339.jpeg\",\r\n    alt: \"Creative discussion\",\r\n  },\r\n  {\r\n    url: \"https://images.pexels.com/photos/3184360/pexels-photo-3184360.jpeg\",\r\n    alt: \"Project planning\",\r\n  },\r\n  {\r\n    url: \"https://images.pexels.com/photos/3184465/pexels-photo-3184465.jpeg\",\r\n    alt: \"Design review\",\r\n  },\r\n];\r\n\r\nwatch(\r\n  () => props.element,\r\n  (newValue) => {\r\n    imageUrl.value = newValue.content || \"\";\r\n    objectFit.value = newValue.style?.objectFit || \"cover\";\r\n    borderRadius.value = newValue.style?.borderRadius || 0;\r\n    borderWidth.value = newValue.style?.borderWidth || 0;\r\n    borderColor.value = newValue.style?.borderColor || \"#000000\";\r\n    backgroundColor.value = newValue.style?.backgroundColor || \"\";\r\n    opacity.value = newValue.style?.opacity || 1;\r\n  },\r\n  { deep: true },\r\n);\r\n\r\nfunction handlePreviewError() {\r\n  previewError.value = true;\r\n}\r\n\r\nfunction updateElement(updates: Partial<typeof props.element.style>) {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      ...updates,\r\n    },\r\n  });\r\n}\r\n\r\n// Function to update all image properties at once\r\nfunction updateAllProperties() {\r\n  const updates: Partial<typeof props.element.style> = {\r\n    objectFit: objectFit.value,\r\n    borderRadius: borderRadius.value,\r\n    borderWidth: borderWidth.value,\r\n    borderColor: borderColor.value,\r\n    backgroundColor: backgroundColor.value,\r\n    opacity: opacity.value,\r\n  };\r\n\r\n  updateElement(updates);\r\n}\r\n\r\nfunction updateImageUrl() {\r\n  previewError.value = false;\r\n\r\n  // First update the content\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    content: imageUrl.value,\r\n    // Also include all style properties to ensure they're not lost\r\n    style: {\r\n      ...props.element.style,\r\n      objectFit: objectFit.value,\r\n      borderRadius: borderRadius.value,\r\n      borderWidth: borderWidth.value,\r\n      borderColor: borderColor.value,\r\n      backgroundColor: backgroundColor.value,\r\n      opacity: opacity.value,\r\n    },\r\n  });\r\n}\r\n\r\n// Use this single function for all property updates\r\nfunction updateObjectFit() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBorderRadius() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBorderWidth() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBorderColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBackgroundColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateOpacity() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction selectSampleImage(url: string) {\r\n  imageUrl.value = url;\r\n  previewError.value = false;\r\n  updateImageUrl();\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.color-label {\r\n  font-size: 12px;\r\n  color: var(--text-secondary, #666);\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.image-preview {\r\n  width: 100%;\r\n  height: 150px;\r\n  border: 1px solid var(--border);\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n  }\r\n\r\n  .no-image {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 8px;\r\n    background-color: #f5f5f5;\r\n    color: #666;\r\n  }\r\n}\r\n\r\n.sample-images {\r\n  margin-top: 16px;\r\n\r\n  .sample-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 8px;\r\n  }\r\n\r\n  .sample-image {\r\n    aspect-ratio: 1;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n    border: 2px solid transparent;\r\n    transition: all 0.2s ease;\r\n\r\n    &:hover {\r\n      border-color: var(--primary);\r\n      transform: scale(1.05);\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\ShapeProperties.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":175,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":175,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":185,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":185,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":193,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":193,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":215,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":215,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":219,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":219,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":223,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":223,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":227,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":227,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":231,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":231,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":235,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":235,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":239,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":239,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Shape Properties</div>\r\n\r\n    <v-select\r\n      v-model=\"shapeType\"\r\n      label=\"Shape Type\"\r\n      :items=\"shapeTypes\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateShapeType\"\r\n    ></v-select>\r\n\r\n    <template v-if=\"shapeType === 'line'\">\r\n      <v-select\r\n        v-model=\"lineStyle\"\r\n        label=\"Line Style\"\r\n        :items=\"['solid', 'dashed', 'dotted']\"\r\n        density=\"compact\"\r\n        variant=\"outlined\"\r\n        hide-details\r\n        class=\"mb-4\"\r\n        @update:model-value=\"updateLineStyle\"\r\n      ></v-select>\r\n\r\n      <v-text-field\r\n        v-model.number=\"strokeWidth\"\r\n        label=\"Line Width\"\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"20\"\r\n        density=\"compact\"\r\n        variant=\"outlined\"\r\n        hide-details\r\n        class=\"mb-4\"\r\n        @update:model-value=\"updateStrokeWidth\"\r\n      ></v-text-field>\r\n\r\n      <div class=\"mb-4\">\r\n        <label class=\"color-label\">Line Color</label>\r\n        <AdvancedColorPicker\r\n          v-model=\"strokeColor\"\r\n          @update:model-value=\"updateStrokeColor\"\r\n        />\r\n      </div>\r\n    </template>\r\n\r\n    <template v-else>\r\n      <div class=\"color-inputs\">\r\n        <div class=\"mb-4\">\r\n          <label class=\"color-label\">Fill Color</label>\r\n          <AdvancedColorPicker\r\n            v-model=\"fillColor\"\r\n            @update:model-value=\"updateFillColor\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"mb-4\">\r\n          <label class=\"color-label\">Stroke Color</label>\r\n          <AdvancedColorPicker\r\n            v-model=\"strokeColor\"\r\n            @update:model-value=\"updateStrokeColor\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"border-inputs\">\r\n        <v-text-field\r\n          v-model.number=\"strokeWidth\"\r\n          label=\"Stroke Width\"\r\n          type=\"number\"\r\n          min=\"0\"\r\n          max=\"20\"\r\n          density=\"compact\"\r\n          variant=\"outlined\"\r\n          hide-details\r\n          class=\"mb-4\"\r\n          @update:model-value=\"updateStrokeWidth\"\r\n        ></v-text-field>\r\n\r\n        <template v-if=\"shapeType === 'rectangle'\">\r\n          <v-text-field\r\n            v-model.number=\"borderRadius\"\r\n            label=\"Border Radius\"\r\n            type=\"number\"\r\n            min=\"0\"\r\n            density=\"compact\"\r\n            variant=\"outlined\"\r\n            hide-details\r\n            class=\"mb-4\"\r\n            @update:model-value=\"updateBorderRadius\"\r\n          ></v-text-field>\r\n        </template>\r\n      </div>\r\n    </template>\r\n\r\n    <v-slider\r\n      v-model=\"opacity\"\r\n      label=\"Opacity\"\r\n      min=\"0\"\r\n      max=\"1\"\r\n      step=\"0.1\"\r\n      density=\"compact\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateOpacity\"\r\n    ></v-slider>\r\n\r\n    <v-slider\r\n      v-model=\"rotation\"\r\n      label=\"Rotation\"\r\n      min=\"0\"\r\n      max=\"360\"\r\n      step=\"1\"\r\n      density=\"compact\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateRotation\"\r\n    >\r\n      <template v-slot:append>\r\n        <v-text-field\r\n          v-model=\"rotation\"\r\n          type=\"number\"\r\n          style=\"width: 70px\"\r\n          density=\"compact\"\r\n          hide-details\r\n          variant=\"outlined\"\r\n          @update:model-value=\"updateRotation\"\r\n        ></v-text-field>\r\n      </template>\r\n    </v-slider>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from \"vue\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\nimport AdvancedColorPicker from \"../AdvancedColorPicker.vue\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst shapeTypes = [\"rectangle\", \"circle\", \"triangle\", \"arrow\", \"line\"];\r\nconst shapeType = ref(props.element.content || \"rectangle\");\r\nconst fillColor = ref(props.element.style?.fill || \"#E2E8F0\");\r\nconst strokeColor = ref(props.element.style?.stroke || \"#CBD5E1\");\r\nconst strokeWidth = ref(props.element.style?.strokeWidth || 1);\r\nconst opacity = ref(props.element.style?.opacity || 1);\r\nconst borderRadius = ref(props.element.style?.borderRadius || 0);\r\nconst lineStyle = ref(props.element.style?.lineStyle || \"solid\");\r\nconst rotation = ref(props.element.style?.rotation || 0);\r\n\r\nwatch(\r\n  () => props.element,\r\n  (newValue) => {\r\n    shapeType.value = newValue.content || \"rectangle\";\r\n    fillColor.value = newValue.style?.fill || \"#E2E8F0\";\r\n    strokeColor.value = newValue.style?.stroke || \"#CBD5E1\";\r\n    strokeWidth.value = newValue.style?.strokeWidth || 1;\r\n    opacity.value = newValue.style?.opacity || 1;\r\n    borderRadius.value = newValue.style?.borderRadius || 0;\r\n    lineStyle.value = newValue.style?.lineStyle || \"solid\";\r\n    rotation.value = newValue.style?.rotation || 0;\r\n  },\r\n  { deep: true },\r\n);\r\n\r\nfunction updateElement(updates: Partial<typeof props.element.style>) {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      ...updates,\r\n    },\r\n  });\r\n}\r\n\r\nfunction updateShapeType() {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    content: shapeType.value,\r\n  });\r\n}\r\n\r\n// Function to update all shape properties at once\r\nfunction updateAllProperties() {\r\n  const updates: Partial<typeof props.element.style> = {\r\n    fill: fillColor.value,\r\n    stroke: strokeColor.value,\r\n    strokeWidth: strokeWidth.value,\r\n    opacity: opacity.value,\r\n    rotation: rotation.value,\r\n  };\r\n\r\n  // Add shape-specific properties\r\n  if (shapeType.value === \"rectangle\") {\r\n    updates.borderRadius = borderRadius.value;\r\n  }\r\n\r\n  if (shapeType.value === \"line\") {\r\n    updates.lineStyle = lineStyle.value;\r\n  }\r\n\r\n  updateElement(updates);\r\n}\r\n\r\n// Use this single function for all property updates\r\nfunction updateFillColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateStrokeColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateStrokeWidth() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateOpacity() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBorderRadius() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateLineStyle() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateRotation() {\r\n  updateAllProperties();\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.property-group {\r\n  padding: 16px;\r\n}\r\n\r\n.property-row {\r\n  display: flex;\r\n  gap: 8px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.color-inputs,\r\n.border-inputs {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.color-label {\r\n  font-size: 12px;\r\n  color: var(--text-secondary, #666);\r\n  margin-bottom: 4px;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\TableProperties.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":118,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":118,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":129,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":129,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":144,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":144,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":148,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":148,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":152,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":152,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":156,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":156,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":160,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":160,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":164,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":164,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":168,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":168,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Table Properties</div>\r\n\r\n    <!-- Border Style -->\r\n    <div class=\"section-title mt-4\">Border Style</div>\r\n    <v-select\r\n      v-model=\"borderStyle\"\r\n      label=\"Border Style\"\r\n      :items=\"['solid', 'dashed', 'dotted']\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateBorderStyle\"\r\n    ></v-select>\r\n\r\n    <v-text-field\r\n      v-model.number=\"borderWidth\"\r\n      label=\"Border Width\"\r\n      type=\"number\"\r\n      min=\"0\"\r\n      max=\"5\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateBorderWidth\"\r\n    ></v-text-field>\r\n\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Border Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"borderColor\"\r\n        @update:model-value=\"updateBorderColor\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Header Style -->\r\n    <div class=\"section-title mt-4\">Header Style</div>\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Header Background Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"headerBackgroundColor\"\r\n        @update:model-value=\"updateHeaderBackgroundColor\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Header Text Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"headerTextColor\"\r\n        @update:model-value=\"updateHeaderTextColor\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Cell Style -->\r\n    <div class=\"section-title mt-4\">Cell Style</div>\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Cell Background Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"cellBackgroundColor\"\r\n        @update:model-value=\"updateCellBackgroundColor\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"mb-4\">\r\n      <label class=\"color-label\">Cell Text Color</label>\r\n      <AdvancedColorPicker\r\n        v-model=\"cellTextColor\"\r\n        @update:model-value=\"updateCellTextColor\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch } from \"vue\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\nimport AdvancedColorPicker from \"../AdvancedColorPicker.vue\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst borderStyle = ref(props.element.style?.borderStyle || \"solid\");\r\nconst borderWidth = ref(props.element.style?.borderWidth || 1);\r\nconst borderColor = ref(props.element.style?.borderColor || \"#E2E8F0\");\r\nconst headerBackgroundColor = ref(\r\n  props.element.style?.headerBackgroundColor || \"#F8F9FA\",\r\n);\r\nconst headerTextColor = ref(props.element.style?.headerTextColor || \"#000000\");\r\nconst cellBackgroundColor = ref(\r\n  props.element.style?.cellBackgroundColor || \"#FFFFFF\",\r\n);\r\nconst cellTextColor = ref(props.element.style?.cellTextColor || \"#000000\");\r\n\r\nwatch(\r\n  () => props.element,\r\n  (newValue) => {\r\n    borderStyle.value = newValue.style?.borderStyle || \"solid\";\r\n    borderWidth.value = newValue.style?.borderWidth || 1;\r\n    borderColor.value = newValue.style?.borderColor || \"#E2E8F0\";\r\n    headerBackgroundColor.value =\r\n      newValue.style?.headerBackgroundColor || \"#F8F9FA\";\r\n    headerTextColor.value = newValue.style?.headerTextColor || \"#000000\";\r\n    cellBackgroundColor.value =\r\n      newValue.style?.cellBackgroundColor || \"#FFFFFF\";\r\n    cellTextColor.value = newValue.style?.cellTextColor || \"#000000\";\r\n  },\r\n  { deep: true },\r\n);\r\n\r\nfunction updateElement(updates: Partial<typeof props.element.style>) {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      ...updates,\r\n    },\r\n  });\r\n}\r\n\r\n// Function to update all table properties at once\r\nfunction updateAllProperties() {\r\n  const updates: Partial<typeof props.element.style> = {\r\n    borderStyle: borderStyle.value,\r\n    borderWidth: borderWidth.value,\r\n    borderColor: borderColor.value,\r\n    headerBackgroundColor: headerBackgroundColor.value,\r\n    headerTextColor: headerTextColor.value,\r\n    cellBackgroundColor: cellBackgroundColor.value,\r\n    cellTextColor: cellTextColor.value,\r\n  };\r\n\r\n  updateElement(updates);\r\n}\r\n\r\n// Use this single function for all property updates\r\nfunction updateBorderStyle() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBorderWidth() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateBorderColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateHeaderBackgroundColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateHeaderTextColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateCellBackgroundColor() {\r\n  updateAllProperties();\r\n}\r\n\r\nfunction updateCellTextColor() {\r\n  updateAllProperties();\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.section-title {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: var(--text-secondary);\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.color-label {\r\n  font-size: 12px;\r\n  color: var(--text-secondary, #666);\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.property-row {\r\n  margin-bottom: 8px;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\components\\editor\\properties\\TextProperties.vue","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'applyFontSize' is defined but never used. Allowed unused vars must match /^_/u.","line":363,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":363,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'applyTextAndBackgroundColor' is defined but never used. Allowed unused vars must match /^_/u.","line":367,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":367,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FontFamily' is defined but never used. Allowed unused vars must match /^_/u.","line":372,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":372,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'colorPresets' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":442,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":442,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":498,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":498,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":510,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":510,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":580,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":580,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":594,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":594,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":618,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":618,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":627,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":627,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":636,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":636,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":645,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":645,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":654,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":654,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":659,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":659,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":664,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":664,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":669,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":669,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":681,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":681,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":693,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":693,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":699,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":699,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":705,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":705,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":800,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":800,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":863,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":863,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":882,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":882,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":905,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":905,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectColor' is defined but never used. Allowed unused vars must match /^_/u.","line":905,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":905,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":913,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":913,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":928,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":928,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":936,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":936,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'selectBackgroundColor' is defined but never used. Allowed unused vars must match /^_/u.","line":936,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":936,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":944,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":944,"endColumn":36},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":954,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":954,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'applyAllColors' is defined but never used. Allowed unused vars must match /^_/u.","line":954,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":954,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":970,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":970,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":986,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":986,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"property-group\">\r\n    <div class=\"property-group-title\">Text Properties</div>\r\n\r\n    <v-select\r\n      v-model=\"textStyle\"\r\n      label=\"Text Style\"\r\n      :items=\"[\r\n        'Paragraph',\r\n        'Heading 1',\r\n        'Heading 2',\r\n        'Heading 3',\r\n        'Heading 4',\r\n        'Heading 5',\r\n        'Heading 6',\r\n      ]\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @update:model-value=\"updateTextStyle\"\r\n    ></v-select>\r\n\r\n    <div class=\"font-family-section mb-4\">\r\n      <v-select\r\n        v-model=\"fontFamily\"\r\n        label=\"Font Family\"\r\n        :items=\"fontFamilyItems\"\r\n        item-title=\"name\"\r\n        item-value=\"value\"\r\n        return-object\r\n        density=\"compact\"\r\n        variant=\"outlined\"\r\n        hide-details\r\n        class=\"mb-2\"\r\n        @blur=\"updateFontFamily\"\r\n        @change=\"updateFontFamily\"\r\n      >\r\n        <template v-slot:selection=\"{ item }\">\r\n          <span :style=\"{ fontFamily: getFontFamilyValue(item.raw.value) }\">\r\n            {{ item.raw.name }}\r\n          </span>\r\n        </template>\r\n        <template v-slot:item=\"{ item, props }\">\r\n          <v-list-item\r\n            v-bind=\"props\"\r\n            :title=\"item.raw.name\"\r\n            :style=\"{ fontFamily: getFontFamilyValue(item.raw.value) }\"\r\n          ></v-list-item>\r\n        </template>\r\n      </v-select>\r\n\r\n      <!-- Font preview -->\r\n      <div\r\n        class=\"font-preview\"\r\n        :style=\"{\r\n          fontFamily: getFontFamilyValue(fontFamily?.value || 'Roboto'),\r\n        }\"\r\n      >\r\n        <div class=\"font-preview-text\">\r\n          The quick brown fox jumps over the lazy dog\r\n        </div>\r\n        <div class=\"font-preview-category\">\r\n          {{ fontFamily?.category || \"sans-serif\" }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <v-text-field\r\n      v-model.number=\"fontSize\"\r\n      label=\"Font Size\"\r\n      type=\"number\"\r\n      density=\"compact\"\r\n      variant=\"outlined\"\r\n      hide-details\r\n      class=\"mb-4\"\r\n      @blur=\"updateFontSize\"\r\n      @keydown.enter=\"updateFontSize\"\r\n    ></v-text-field>\r\n\r\n    <div class=\"property-row\">\r\n      <v-btn\r\n        :color=\"bold ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"toggleBoldStyle\"\r\n      >\r\n        <v-icon>mdi-format-bold</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        :color=\"italic ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"toggleItalicStyle\"\r\n      >\r\n        <v-icon>mdi-format-italic</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        :color=\"underline ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"toggleUnderlineStyle\"\r\n      >\r\n        <v-icon>mdi-format-underline</v-icon>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"property-row mt-4\">\r\n      <v-btn\r\n        :color=\"textAlign === 'left' ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"setTextAlign('left')\"\r\n      >\r\n        <v-icon>mdi-format-align-left</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        :color=\"textAlign === 'center' ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"setTextAlign('center')\"\r\n      >\r\n        <v-icon>mdi-format-align-center</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        :color=\"textAlign === 'right' ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"setTextAlign('right')\"\r\n      >\r\n        <v-icon>mdi-format-align-right</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        :color=\"textAlign === 'justify' ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        @click=\"setTextAlign('justify')\"\r\n      >\r\n        <v-icon>mdi-format-align-justify</v-icon>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"property-row mt-4\">\r\n      <v-btn\r\n        :color=\"listType === 'bullet' ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        title=\"Bullet List\"\r\n        @click=\"toggleBulletList\"\r\n      >\r\n        <v-icon>mdi-format-list-bulleted</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        :color=\"listType === 'number' ? 'primary' : undefined\"\r\n        icon\r\n        size=\"small\"\r\n        title=\"Numbered List\"\r\n        @click=\"toggleNumberedList\"\r\n      >\r\n        <v-icon>mdi-format-list-numbered</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn icon\r\n             size=\"small\"\r\n             title=\"Increase Indent\"\r\n             @click=\"increaseIndent\"\r\n      >\r\n        <v-icon>mdi-format-indent-increase</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn icon\r\n             size=\"small\"\r\n             title=\"Decrease Indent\"\r\n             @click=\"decreaseIndent\"\r\n      >\r\n        <v-icon>mdi-format-indent-decrease</v-icon>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"property-row mt-4\">\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        title=\"UPPERCASE\"\r\n        @click=\"transformText('uppercase')\"\r\n      >\r\n        <v-icon>mdi-format-letter-case-upper</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        title=\"lowercase\"\r\n        @click=\"transformText('lowercase')\"\r\n      >\r\n        <v-icon>mdi-format-letter-case-lower</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        title=\"Capitalize\"\r\n        @click=\"transformText('capitalize')\"\r\n      >\r\n        <v-icon>mdi-format-letter-case</v-icon>\r\n      </v-btn>\r\n\r\n      <v-btn\r\n        icon\r\n        size=\"small\"\r\n        title=\"Clear Formatting\"\r\n        @click=\"clearFormatting\"\r\n      >\r\n        <v-icon>mdi-format-clear</v-icon>\r\n      </v-btn>\r\n    </div>\r\n\r\n    <div class=\"first-line-indent mb-4 mt-4\">\r\n      <div class=\"d-flex align-center justify-space-between\">\r\n        <label class=\"text-body-2 text-medium-emphasis\">First Line Indent</label>\r\n        <v-chip size=\"small\"\r\n                color=\"primary\"\r\n                class=\"ml-2\"\r\n        >{{ textIndent }}px</v-chip>\r\n      </div>\r\n      <v-slider\r\n        v-model=\"textIndent\"\r\n        min=\"0\"\r\n        max=\"100\"\r\n        step=\"5\"\r\n        thumb-label\r\n        density=\"compact\"\r\n        hide-details\r\n        @update:model-value=\"updateTextIndent\"\r\n      ></v-slider>\r\n    </div>\r\n\r\n    <div class=\"line-spacing mb-4\">\r\n      <div class=\"d-flex align-center justify-space-between\">\r\n        <label class=\"text-body-2 text-medium-emphasis\">Line Spacing</label>\r\n        <v-chip size=\"small\" color=\"primary\" class=\"ml-2\">{{\r\n          lineSpacing\r\n        }}</v-chip>\r\n      </div>\r\n      <v-slider\r\n        v-model=\"lineSpacing\"\r\n        min=\"1\"\r\n        max=\"3\"\r\n        step=\"0.1\"\r\n        thumb-label\r\n        density=\"compact\"\r\n        hide-details\r\n        @update:model-value=\"updateLineSpacing\"\r\n      ></v-slider>\r\n    </div>\r\n\r\n    <div class=\"paragraph-indent mb-4\">\r\n      <div class=\"d-flex align-center justify-space-between\">\r\n        <label class=\"text-body-2 text-medium-emphasis\">Paragraph Indent</label>\r\n        <v-chip size=\"small\"\r\n                color=\"primary\"\r\n                class=\"ml-2\"\r\n        >{{ paragraphIndent }}px</v-chip>\r\n      </div>\r\n      <v-slider\r\n        v-model=\"paragraphIndent\"\r\n        min=\"0\"\r\n        max=\"100\"\r\n        step=\"5\"\r\n        thumb-label\r\n        density=\"compact\"\r\n        hide-details\r\n        @update:model-value=\"updateParagraphIndent\"\r\n      ></v-slider>\r\n    </div>\r\n\r\n    <v-divider class=\"my-4\"></v-divider>\r\n\r\n    <div class=\"colors-section\">\r\n      <div class=\"property-group-subtitle mb-2\">Colors</div>\r\n\r\n      <div class=\"color-row mb-2\">\r\n        <!-- First Layer -->\r\n        <div class=\"color-layer\">\r\n          <div class=\"color-input-group\">\r\n            <label class=\"color-label\">Text Color</label>\r\n            <div class=\"color-input-wrapper\">\r\n              <AdvancedColorPicker\r\n                v-model=\"textColor\"\r\n                @update:model-value=\"updateTextColor\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Second Layer -->\r\n        <div class=\"color-layer\">\r\n          <div class=\"color-input-group\">\r\n            <label class=\"color-label\">Background</label>\r\n            <div class=\"color-input-wrapper\">\r\n              <AdvancedColorPicker\r\n                v-model=\"backgroundColor\"\r\n                @update:model-value=\"updateBackgroundColor\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"property-row mb-2\">\r\n        <v-switch\r\n          v-model=\"blockBackground\"\r\n          label=\"Block Background\"\r\n          density=\"compact\"\r\n          hide-details\r\n          @change=\"toggleBlockBackground\"\r\n        ></v-switch>\r\n      </div>\r\n\r\n      <div v-if=\"blockBackground\" class=\"color-row mb-2\">\r\n        <div class=\"color-input-group\">\r\n          <label class=\"color-label\">Block Background Color</label>\r\n          <div class=\"color-input-wrapper\">\r\n            <AdvancedColorPicker\r\n              v-model=\"blockBackgroundColor\"\r\n              @update:model-value=\"updateBlockBackgroundColor\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"blockBackground\" class=\"color-presets mb-2\">\r\n        <div class=\"property-group-subtitle mb-1\">Block Background Presets</div>\r\n        <div class=\"color-preset-grid\">\r\n          <div\r\n            v-for=\"color in blockColorPresets\"\r\n            :key=\"color\"\r\n            class=\"color-preset\"\r\n            :style=\"{ backgroundColor: color }\"\r\n            @click=\"selectBlockBackgroundColor(color)\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, watch, computed } from \"vue\";\r\nimport type { DocumentElement } from \"../../../types/document\";\r\nimport {\r\n  hasSavedSelection,\r\n  applyBold,\r\n  applyItalic,\r\n  applyUnderline,\r\n  applyFontFamily,\r\n  applyFontSize,\r\n  applyTextColor,\r\n  applyBackgroundColor,\r\n  applyTextAlignment,\r\n  applyTextAndBackgroundColor,\r\n  directlyApplyStyle,\r\n} from \"../../../utils/selectionManager\";\r\nimport {\r\n  FONT_FAMILIES,\r\n  FontFamily,\r\n  getFontFamilyValue as getFontFamilyValueUtil,\r\n} from \"../../../utils/fontFamilies\";\r\nimport AdvancedColorPicker from \"../AdvancedColorPicker.vue\";\r\n\r\nconst props = defineProps<{\r\n  element: DocumentElement;\r\n}>();\r\n\r\nconst emit = defineEmits<{\r\n  (e: \"update:element\", element: DocumentElement): void;\r\n}>();\r\n\r\nconst textStyle = ref(props.element.style?.textStyle || \"Paragraph\");\r\n\r\n// Get the initial font family object from the element or default to Roboto\r\nconst initialFontFamily = props.element.style?.fontFamily || \"Roboto\";\r\nconst fontFamilyObject =\r\n  FONT_FAMILIES.find((f) => f.value === initialFontFamily) || FONT_FAMILIES[0];\r\nconst fontFamily = ref(fontFamilyObject);\r\n\r\nconst fontSize = ref(props.element.style?.fontSize || 16);\r\nconst bold = ref(props.element.style?.bold || false);\r\nconst italic = ref(props.element.style?.italic || false);\r\nconst underline = ref(props.element.style?.underline || false);\r\nconst textAlign = ref(props.element.style?.align || \"left\");\r\nconst textIndent = ref(props.element.style?.textIndent || 0);\r\nconst lineSpacing = ref(props.element.style?.lineHeight || 1.5);\r\nconst paragraphIndent = ref(props.element.style?.paragraphIndent || 0);\r\nconst listType = ref(props.element.style?.listType || \"none\");\r\nconst textColor = ref(props.element.style?.color || \"#000000\");\r\nconst backgroundColor = ref(\r\n  props.element.style?.backgroundColor || \"transparent\",\r\n);\r\nconst blockBackground = ref(props.element.style?.blockBackground || false);\r\nconst blockBackgroundColor = ref(\r\n  props.element.style?.blockBackgroundColor || \"#f5f5f5\",\r\n);\r\n\r\n// Group font families by category for the dropdown\r\nconst fontFamilyItems = computed(() => {\r\n  // Create a copy of the font families array to avoid modifying the original\r\n  const fonts = [...FONT_FAMILIES];\r\n\r\n  // Sort fonts by category and then by name\r\n  fonts.sort((a, b) => {\r\n    if (a.category !== b.category) {\r\n      // Order categories: sans-serif, serif, monospace, display, handwriting\r\n      const categoryOrder = {\r\n        \"sans-serif\": 1,\r\n        serif: 2,\r\n        monospace: 3,\r\n        display: 4,\r\n        handwriting: 5,\r\n      };\r\n      return categoryOrder[a.category] - categoryOrder[b.category];\r\n    }\r\n    return a.name.localeCompare(b.name);\r\n  });\r\n\r\n  return fonts;\r\n});\r\n\r\n// Function to get the full font family value with fallbacks\r\nfunction getFontFamilyValue(fontName: string): string {\r\n  return getFontFamilyValueUtil(fontName);\r\n}\r\n\r\n// No longer needed with AdvancedColorPicker\r\n\r\nconst colorPresets = [\r\n  \"#000000\",\r\n  \"#FFFFFF\",\r\n  \"#FF0000\",\r\n  \"#00FF00\",\r\n  \"#0000FF\",\r\n  \"#FFFF00\",\r\n  \"#FF00FF\",\r\n  \"#00FFFF\",\r\n  \"#808080\",\r\n  \"#C0C0C0\",\r\n];\r\n\r\nconst blockColorPresets = [\r\n  \"#f5f5f5\",\r\n  \"#e0e0e0\",\r\n  \"#f0f8ff\",\r\n  \"#f0fff0\",\r\n  \"#fff0f0\",\r\n  \"#fffacd\",\r\n  \"#e6e6fa\",\r\n  \"#f0ffff\",\r\n  \"#f5f5dc\",\r\n  \"#faebd7\",\r\n];\r\n\r\nwatch(\r\n  () => props.element,\r\n  (newValue) => {\r\n    textStyle.value = newValue.style?.textStyle || \"Paragraph\";\r\n\r\n    // Update font family object when element changes\r\n    const newFontFamilyValue = newValue.style?.fontFamily || \"Roboto\";\r\n    const newFontFamilyObject =\r\n      FONT_FAMILIES.find((f) => f.value === newFontFamilyValue) ||\r\n      FONT_FAMILIES[0];\r\n    fontFamily.value = newFontFamilyObject;\r\n\r\n    fontSize.value = newValue.style?.fontSize || 16;\r\n    bold.value = newValue.style?.bold || false;\r\n    italic.value = newValue.style?.italic || false;\r\n    underline.value = newValue.style?.underline || false;\r\n    textAlign.value = newValue.style?.align || \"left\";\r\n    textIndent.value = newValue.style?.textIndent || 0;\r\n    lineSpacing.value = newValue.style?.lineHeight || 1.5;\r\n    paragraphIndent.value = newValue.style?.paragraphIndent || 0;\r\n    listType.value = newValue.style?.listType || \"none\";\r\n    textColor.value = newValue.style?.color || \"#000000\";\r\n    backgroundColor.value = newValue.style?.backgroundColor || \"transparent\";\r\n    blockBackground.value = newValue.style?.blockBackground || false;\r\n    blockBackgroundColor.value =\r\n      newValue.style?.blockBackgroundColor || \"#f5f5f5\";\r\n  },\r\n  { deep: true },\r\n);\r\n\r\nfunction updateElement(updates: Partial<typeof props.element.style>) {\r\n  emit(\"update:element\", {\r\n    ...props.element,\r\n    style: {\r\n      ...props.element.style,\r\n      ...updates,\r\n    },\r\n  });\r\n}\r\n\r\n// Use the hasTextSelection prop to determine if text is selected\r\n\r\nfunction updateTextStyle() {\r\n  // Check if we're applying a heading style\r\n  if (textStyle.value.startsWith(\"Heading \")) {\r\n    // Extract the heading level (1-6)\r\n    const headingLevel = parseInt(textStyle.value.split(\" \")[1], 10);\r\n\r\n    if (hasSavedSelection()) {\r\n      // Apply heading to selected text\r\n      directlyApplyStyle(\"heading\", headingLevel.toString());\r\n    } else {\r\n      // Apply heading to the whole element\r\n      // Set appropriate font size based on heading level\r\n      let newFontSize = 16;\r\n      let newBold = false;\r\n\r\n      switch (headingLevel) {\r\n      case 1:\r\n        newFontSize = 32;\r\n        newBold = true;\r\n        break;\r\n      case 2:\r\n        newFontSize = 28;\r\n        newBold = true;\r\n        break;\r\n      case 3:\r\n        newFontSize = 24;\r\n        newBold = true;\r\n        break;\r\n      case 4:\r\n        newFontSize = 20;\r\n        newBold = true;\r\n        break;\r\n      case 5:\r\n        newFontSize = 18;\r\n        newBold = true;\r\n        break;\r\n      case 6:\r\n        newFontSize = 16;\r\n        newBold = true;\r\n        break;\r\n      }\r\n\r\n      // Update the font size and bold state\r\n      fontSize.value = newFontSize;\r\n      bold.value = newBold;\r\n\r\n      // Apply the updates\r\n      const updates = {\r\n        textStyle: textStyle.value,\r\n        fontSize: newFontSize,\r\n        bold: newBold,\r\n        italic: italic.value,\r\n        underline: underline.value,\r\n      };\r\n\r\n      updateElement(updates);\r\n    }\r\n  } else {\r\n    // Regular paragraph style\r\n    const updates = {\r\n      textStyle: textStyle.value,\r\n      fontSize: fontSize.value,\r\n      bold: bold.value,\r\n      italic: italic.value,\r\n      underline: underline.value,\r\n    };\r\n    updateElement(updates);\r\n  }\r\n}\r\n\r\nfunction updateFontFamily() {\r\n  if (!fontFamily.value) {\r\n    return;\r\n  }\r\n\r\n  if (hasSavedSelection()) {\r\n    // Apply to selection - pass the font family value\r\n    applyFontFamily(fontFamily.value.value);\r\n  } else {\r\n    // Update the whole element - store just the font family value string\r\n    updateElement({ fontFamily: fontFamily.value.value });\r\n  }\r\n}\r\n\r\nfunction updateFontSize() {\r\n  // Force a small delay to ensure any selection is properly saved\r\n  setTimeout(() => {\r\n    // Check if there's a text selection\r\n    const hasSelection = hasSavedSelection();\r\n\r\n    if (hasSelection) {\r\n      // Make sure the font size has 'px' units\r\n      const fontSizeWithUnits = fontSize.value.toString().includes(\"px\")\r\n        ? fontSize.value.toString()\r\n        : `${fontSize.value}px`;\r\n\r\n      // Apply font size to selected text only using our direct method\r\n      directlyApplyStyle(\"fontSize\", fontSizeWithUnits);\r\n\r\n      // The content will be updated by the TextElement component's mutation observer\r\n      // No need to manually update the element here\r\n    } else {\r\n      // Apply font size to the whole element\r\n      updateElement({ fontSize: fontSize.value });\r\n    }\r\n  }, 0);\r\n}\r\n\r\nfunction toggleBoldStyle() {\r\n  bold.value = !bold.value;\r\n  if (hasSavedSelection()) {\r\n    applyBold();\r\n  } else {\r\n    updateElement({ bold: bold.value });\r\n  }\r\n}\r\n\r\nfunction toggleItalicStyle() {\r\n  italic.value = !italic.value;\r\n  if (hasSavedSelection()) {\r\n    applyItalic();\r\n  } else {\r\n    updateElement({ italic: italic.value });\r\n  }\r\n}\r\n\r\nfunction toggleUnderlineStyle() {\r\n  underline.value = !underline.value;\r\n  if (hasSavedSelection()) {\r\n    applyUnderline();\r\n  } else {\r\n    updateElement({ underline: underline.value });\r\n  }\r\n}\r\n\r\nfunction setTextAlign(align: string) {\r\n  textAlign.value = align;\r\n  if (hasSavedSelection()) {\r\n    applyTextAlignment(align as \"left\" | \"center\" | \"right\" | \"justify\");\r\n  } else {\r\n    updateElement({ align });\r\n  }\r\n}\r\n\r\nfunction updateTextIndent() {\r\n  // Text indent only applies to the whole element, not to selected text\r\n  updateElement({ textIndent: textIndent.value });\r\n}\r\n\r\nfunction updateLineSpacing() {\r\n  // Line spacing only applies to the whole element, not to selected text\r\n  updateElement({ lineHeight: lineSpacing.value });\r\n}\r\n\r\nfunction updateParagraphIndent() {\r\n  // Paragraph indent only applies to the whole element, not to selected text\r\n  updateElement({ paragraphIndent: paragraphIndent.value });\r\n}\r\n\r\nfunction toggleBulletList() {\r\n  if (listType.value === \"bullet\") {\r\n    // If already a bullet list, turn it off\r\n    listType.value = \"none\";\r\n    updateElement({ listType: \"none\" });\r\n  } else {\r\n    // Turn on bullet list\r\n    listType.value = \"bullet\";\r\n    updateElement({ listType: \"bullet\" });\r\n  }\r\n}\r\n\r\nfunction toggleNumberedList() {\r\n  if (listType.value === \"number\") {\r\n    // If already a numbered list, turn it off\r\n    listType.value = \"none\";\r\n    updateElement({ listType: \"none\" });\r\n  } else {\r\n    // Turn on numbered list\r\n    listType.value = \"number\";\r\n    updateElement({ listType: \"number\" });\r\n  }\r\n}\r\n\r\nfunction increaseIndent() {\r\n  // Increase paragraph indent by 10px\r\n  paragraphIndent.value += 10;\r\n  updateElement({ paragraphIndent: paragraphIndent.value });\r\n}\r\n\r\nfunction decreaseIndent() {\r\n  // Decrease paragraph indent by 10px, but not below 0\r\n  paragraphIndent.value = Math.max(0, paragraphIndent.value - 10);\r\n  updateElement({ paragraphIndent: paragraphIndent.value });\r\n}\r\n\r\nfunction transformText(\r\n  transformType: \"uppercase\" | \"lowercase\" | \"capitalize\",\r\n) {\r\n  // Check if there's a text selection\r\n  if (hasSavedSelection()) {\r\n    // Apply the transformation to the selected text\r\n    const selection = window.getSelection();\r\n    if (selection && !selection.isCollapsed && selection.rangeCount > 0) {\r\n      const range = selection.getRangeAt(0);\r\n      const selectedText = range.toString();\r\n\r\n      let transformedText = selectedText;\r\n      switch (transformType) {\r\n      case \"uppercase\":\r\n        transformedText = selectedText.toUpperCase();\r\n        break;\r\n      case \"lowercase\":\r\n        transformedText = selectedText.toLowerCase();\r\n        break;\r\n      case \"capitalize\":\r\n        transformedText = selectedText.replace(/\\b\\w/g, (char) =>\r\n          char.toUpperCase(),\r\n        );\r\n        break;\r\n      }\r\n\r\n      // Create a document fragment with the transformed text\r\n      const fragment = document.createDocumentFragment();\r\n      const textNode = document.createTextNode(transformedText);\r\n      fragment.appendChild(textNode);\r\n\r\n      // Replace the selected text with the transformed text\r\n      range.deleteContents();\r\n      range.insertNode(fragment);\r\n\r\n      // Update the selection\r\n      selection.removeAllRanges();\r\n      const newRange = document.createRange();\r\n      newRange.selectNodeContents(textNode);\r\n      selection.addRange(newRange);\r\n\r\n      // Apply the change to the element\r\n      directlyApplyStyle(\"style\", \"\");\r\n    }\r\n  } else {\r\n    // If no selection, transform the entire text content\r\n    if (!props.element.content) return;\r\n\r\n    const transformedContent = props.element.content;\r\n    const tempDiv = document.createElement(\"div\");\r\n    tempDiv.innerHTML = transformedContent;\r\n\r\n    // Get all text nodes\r\n    const textNodes = [];\r\n    const walker = document.createTreeWalker(\r\n      tempDiv,\r\n      NodeFilter.SHOW_TEXT,\r\n      null,\r\n    );\r\n\r\n    let node;\r\n    while ((node = walker.nextNode())) {\r\n      textNodes.push(node);\r\n    }\r\n\r\n    // Transform each text node\r\n    textNodes.forEach((node) => {\r\n      if (!node.textContent) return;\r\n\r\n      let transformedText = node.textContent;\r\n      switch (transformType) {\r\n      case \"uppercase\":\r\n        transformedText = node.textContent.toUpperCase();\r\n        break;\r\n      case \"lowercase\":\r\n        transformedText = node.textContent.toLowerCase();\r\n        break;\r\n      case \"capitalize\":\r\n        transformedText = node.textContent.replace(/\\b\\w/g, (char) =>\r\n          char.toUpperCase(),\r\n        );\r\n        break;\r\n      }\r\n\r\n      node.textContent = transformedText;\r\n    });\r\n\r\n    // Update the element with the transformed content\r\n    emit(\"update:element\", {\r\n      ...props.element,\r\n      content: tempDiv.innerHTML,\r\n    });\r\n  }\r\n}\r\n\r\nfunction clearFormatting() {\r\n  // Check if there's a text selection\r\n  if (hasSavedSelection()) {\r\n    // Apply the clear formatting to the selected text\r\n    const selection = window.getSelection();\r\n    if (selection && !selection.isCollapsed && selection.rangeCount > 0) {\r\n      const range = selection.getRangeAt(0);\r\n\r\n      // Extract the text content without formatting\r\n      const selectedText = range.toString();\r\n\r\n      // Create a document fragment with just the text\r\n      const fragment = document.createDocumentFragment();\r\n      const textNode = document.createTextNode(selectedText);\r\n      fragment.appendChild(textNode);\r\n\r\n      // Replace the selected formatted text with plain text\r\n      range.deleteContents();\r\n      range.insertNode(fragment);\r\n\r\n      // Update the selection\r\n      selection.removeAllRanges();\r\n      const newRange = document.createRange();\r\n      newRange.selectNodeContents(textNode);\r\n      selection.addRange(newRange);\r\n\r\n      // Apply the change to the element\r\n      directlyApplyStyle(\"style\", \"\");\r\n    }\r\n  } else {\r\n    // If no selection, clear formatting for the entire element\r\n    // Keep the text content but remove all formatting\r\n    if (!props.element.content) return;\r\n\r\n    const tempDiv = document.createElement(\"div\");\r\n    tempDiv.innerHTML = props.element.content;\r\n\r\n    // Get the text content without formatting\r\n    const plainText = tempDiv.textContent || \"\";\r\n\r\n    // Update the element with plain text and default styles\r\n    emit(\"update:element\", {\r\n      ...props.element,\r\n      content: plainText,\r\n      style: {\r\n        ...props.element.style,\r\n        fontFamily: \"Roboto\",\r\n        fontSize: 16,\r\n        bold: false,\r\n        italic: false,\r\n        underline: false,\r\n        textIndent: 0,\r\n        paragraphIndent: 0,\r\n        listType: \"none\",\r\n        align: \"left\",\r\n        color: \"#000000\",\r\n        backgroundColor: \"transparent\",\r\n        blockBackground: false,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nfunction updateTextColor() {\r\n  // Force a small delay to ensure any selection is properly saved\r\n  setTimeout(() => {\r\n    // Check if there's a text selection\r\n    const hasSelection = hasSavedSelection();\r\n\r\n    if (hasSelection) {\r\n      // Apply text color to selected text only using our direct method\r\n      directlyApplyStyle(\"color\", textColor.value);\r\n\r\n      // The content will be updated by the TextElement component's mutation observer\r\n      // No need to manually update the element here\r\n    } else {\r\n      // Apply text color to the whole element\r\n      updateElement({ color: textColor.value });\r\n    }\r\n  }, 0);\r\n}\r\n\r\nfunction updateBackgroundColor() {\r\n  // Force a small delay to ensure any selection is properly saved\r\n  setTimeout(() => {\r\n    // Check if there's a text selection\r\n    const hasSelection = hasSavedSelection();\r\n\r\n    if (hasSelection && !blockBackground.value) {\r\n      // Apply background color to selected text only using our direct method\r\n      directlyApplyStyle(\"backgroundColor\", backgroundColor.value);\r\n\r\n      // The content will be updated by the TextElement component's mutation observer\r\n      // No need to manually update the element here\r\n    } else {\r\n      // Apply background color to the whole element\r\n      updateElement({\r\n        backgroundColor: backgroundColor.value,\r\n        // If blockBackground is enabled, make sure it stays enabled\r\n        blockBackground: blockBackground.value,\r\n      });\r\n    }\r\n  }, 0);\r\n}\r\n\r\nfunction selectColor(color: string) {\r\n  textColor.value = color;\r\n  // Force a small delay to ensure any selection is properly saved\r\n  setTimeout(() => {\r\n    updateTextColor();\r\n  }, 0);\r\n}\r\n\r\nfunction toggleBlockBackground() {\r\n  // Update the element with the new blockBackground value\r\n  const updates: Partial<typeof props.element.style> = {\r\n    blockBackground: blockBackground.value,\r\n  };\r\n\r\n  // If block background is enabled, make sure to set the blockBackgroundColor\r\n  if (blockBackground.value) {\r\n    updates.blockBackgroundColor = blockBackgroundColor.value;\r\n  }\r\n\r\n  // Apply the updates\r\n  updateElement(updates);\r\n}\r\n\r\nfunction updateBlockBackgroundColor() {\r\n  // Make sure block background is enabled and update the element with the new blockBackgroundColor value\r\n  updateElement({\r\n    blockBackground: true,\r\n    blockBackgroundColor: blockBackgroundColor.value,\r\n  });\r\n}\r\n\r\nfunction selectBackgroundColor(color: string) {\r\n  backgroundColor.value = color;\r\n  // Force a small delay to ensure any selection is properly saved\r\n  setTimeout(() => {\r\n    updateBackgroundColor();\r\n  }, 0);\r\n}\r\n\r\nfunction selectBlockBackgroundColor(color: string) {\r\n  blockBackgroundColor.value = color;\r\n\r\n  // Make sure block background is enabled and update the element with the new blockBackgroundColor value\r\n  updateElement({\r\n    blockBackground: true,\r\n    blockBackgroundColor: color,\r\n  });\r\n}\r\n\r\nfunction applyAllColors() {\r\n  // Force a small delay to ensure any selection is properly saved\r\n  setTimeout(() => {\r\n    // Check if there's a text selection\r\n    const hasSelection = hasSavedSelection();\r\n\r\n    if (hasSelection) {\r\n      // Apply colors to selected text\r\n      applyColorsToSelection();\r\n    } else {\r\n      // Apply colors to the whole element\r\n      applyColorsToElement();\r\n    }\r\n  }, 0);\r\n}\r\n\r\nfunction applyColorsToSelection() {\r\n  // Apply text color to selection\r\n  applyTextColor(textColor.value);\r\n\r\n  // Apply text background color to selection\r\n  applyBackgroundColor(backgroundColor.value);\r\n\r\n  // If block background is enabled, update the element's block background\r\n  if (blockBackground.value) {\r\n    updateElement({\r\n      blockBackground: true,\r\n      blockBackgroundColor: blockBackgroundColor.value,\r\n    });\r\n  }\r\n}\r\n\r\nfunction applyColorsToElement() {\r\n  // Apply all colors to the whole element\r\n  const updates: Partial<typeof props.element.style> = {\r\n    color: textColor.value,\r\n    backgroundColor: backgroundColor.value,\r\n  };\r\n\r\n  if (blockBackground.value) {\r\n    updates.blockBackground = true;\r\n    updates.blockBackgroundColor = blockBackgroundColor.value;\r\n  } else {\r\n    updates.blockBackground = false;\r\n  }\r\n\r\n  updateElement(updates);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.property-row {\r\n  display: flex;\r\n  gap: 8px;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.property-group-subtitle {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: var(--text-secondary);\r\n}\r\n\r\n.color-row {\r\n  display: flex;\r\n  flex-direction: column; /* Stack items vertically */\r\n  gap: 8px; /* Add spacing between layers */\r\n}\r\n\r\n.color-layer {\r\n  display: flex;\r\n  flex-direction: column; /* Ensure each layer is vertical */\r\n  align-items: flex-start; /* Align labels and inputs to the left */\r\n}\r\n\r\n.color-input-group {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.color-label {\r\n  font-size: 12px;\r\n  color: var(--text-secondary);\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.color-input-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n/* These classes are no longer needed with AdvancedColorPicker */\r\n\r\n.color-presets {\r\n  margin-top: 8px;\r\n}\r\n\r\n.color-preset-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  gap: 8px;\r\n  margin-top: 4px;\r\n}\r\n\r\n.color-preset {\r\n  aspect-ratio: 1;\r\n  border-radius: 4px;\r\n  border: 1px solid var(--border);\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n}\r\n\r\n.apply-all-btn {\r\n  width: 100%;\r\n  margin-top: 4px;\r\n}\r\n\r\n.font-family-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.font-preview {\r\n  margin-top: 8px;\r\n  padding: 8px;\r\n  border: 1px solid var(--border);\r\n  border-radius: 4px;\r\n  background-color: var(--surface);\r\n}\r\n\r\n.font-preview-text {\r\n  font-size: 14px;\r\n  line-height: 1.4;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.font-preview-category {\r\n  font-size: 12px;\r\n  color: var(--text-secondary);\r\n  margin-top: 4px;\r\n  text-transform: capitalize;\r\n}\r\n\r\n.first-line-indent {\r\n  margin-top: 16px;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\composables\\useElement.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":9,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":46,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":46,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":58,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":58,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":72,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":95,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":95,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":102,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":102,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":116,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":116,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":131,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":131,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":160,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":160,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ref, computed, onBeforeUnmount } from \"vue\";\r\nimport type { DocumentElement, Position, Size } from \"../types/document\";\r\nimport type { CSSProperties } from \"vue\";\r\n\r\n/**\r\n * Composable for handling common element functionality\r\n * Provides drag, resize, and selection functionality for document elements\r\n */\r\nexport function useElement(\r\n  props: {\r\n    element: DocumentElement;\r\n    isSelected: boolean;\r\n    isPreview?: boolean;\r\n  },\r\n  emit: {\r\n    (e: \"update:element\", element: DocumentElement): void;\r\n    (e: \"click\", element: DocumentElement): void;\r\n  },\r\n) {\r\n  // Element state\r\n  const isDragging = ref(false);\r\n  const startX = ref(0);\r\n  const startY = ref(0);\r\n  const startLeft = ref(0);\r\n  const startTop = ref(0);\r\n  const contentElement = ref<HTMLElement | null>(null);\r\n\r\n  // Computed styles\r\n  const elementStyle = computed<CSSProperties>(() => {\r\n    const { position, size, zIndex } = props.element;\r\n    const rotation = props.element.style?.rotation || 0;\r\n\r\n    return {\r\n      left: `${position.x}px`,\r\n      top: `${position.y}px`,\r\n      width: `${size.width}px`,\r\n      height: `${size.height}px`,\r\n      position: \"absolute\" as const,\r\n      zIndex: zIndex || 0,\r\n      transform: rotation ? `rotate(${rotation}deg)` : undefined,\r\n      transformOrigin: rotation ? \"center center\" : undefined,\r\n    };\r\n  });\r\n\r\n  // Handle element click\r\n  function handleClick(event: MouseEvent) {\r\n    // Stop propagation to prevent document click from deselecting\r\n    event.stopPropagation();\r\n\r\n    // Don't do anything if we're in preview mode\r\n    if (props.isPreview) return;\r\n\r\n    // Emit click event to select this element\r\n    emit(\"click\", props.element);\r\n  }\r\n\r\n  // Drag functionality\r\n  function startDrag(event: MouseEvent) {\r\n    // Don't start drag if we're in preview mode\r\n    if (props.isPreview) return;\r\n\r\n    isDragging.value = true;\r\n    startX.value = event.clientX;\r\n    startY.value = event.clientY;\r\n    startLeft.value = props.element.position.x;\r\n    startTop.value = props.element.position.y;\r\n\r\n    document.addEventListener(\"mousemove\", onDrag);\r\n    document.addEventListener(\"mouseup\", stopDrag);\r\n  }\r\n\r\n  function onDrag(event: MouseEvent) {\r\n    if (!isDragging.value) return;\r\n\r\n    const dx = event.clientX - startX.value;\r\n    const dy = event.clientY - startY.value;\r\n\r\n    // Calculate new position with grid snapping\r\n    const gridSize = 10;\r\n    const newLeft = Math.round((startLeft.value + dx) / gridSize) * gridSize;\r\n    const newTop = Math.round((startTop.value + dy) / gridSize) * gridSize;\r\n\r\n    // Update element position\r\n    const updatedElement = {\r\n      ...props.element,\r\n      position: {\r\n        x: newLeft,\r\n        y: newTop,\r\n      },\r\n    };\r\n\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n\r\n  function stopDrag() {\r\n    isDragging.value = false;\r\n    document.removeEventListener(\"mousemove\", onDrag);\r\n    document.removeEventListener(\"mouseup\", stopDrag);\r\n  }\r\n\r\n  // Handle resize\r\n  function handleResize(newSize: Size, newPosition: Position) {\r\n    const updatedElement = {\r\n      ...props.element,\r\n      position: newPosition,\r\n      size: newSize,\r\n    };\r\n\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n\r\n  // Rotation functionality\r\n  const isRotating = ref(false);\r\n  const startAngle = ref(0);\r\n\r\n  function startRotate(event: MouseEvent) {\r\n    isRotating.value = true;\r\n    const rect = (event.target as HTMLElement)\r\n      .closest(\".element\")\r\n      ?.getBoundingClientRect();\r\n    if (!rect) return;\r\n\r\n    const centerX = rect.left + rect.width / 2;\r\n    const centerY = rect.top + rect.height / 2;\r\n    startAngle.value = Math.atan2(event.clientY - centerY, event.clientX - centerX);\r\n\r\n    document.addEventListener(\"mousemove\", onRotate);\r\n    document.addEventListener(\"mouseup\", stopRotate);\r\n  }\r\n\r\n  function onRotate(event: MouseEvent) {\r\n    if (!isRotating.value) return;\r\n\r\n    const rect = (event.target as HTMLElement)\r\n      .closest(\".element\")\r\n      ?.getBoundingClientRect();\r\n    if (!rect) return;\r\n\r\n    const centerX = rect.left + rect.width / 2;\r\n    const centerY = rect.top + rect.height / 2;\r\n    const angle = Math.atan2(event.clientY - centerY, event.clientX - centerX);\r\n\r\n    let newRotation =\r\n      ((angle - startAngle.value) * (180 / Math.PI) +\r\n        (props.element.style?.rotation || 0)) %\r\n      360;\r\n    if (newRotation < 0) newRotation += 360;\r\n\r\n    const updatedElement = {\r\n      ...props.element,\r\n      style: {\r\n        ...props.element.style,\r\n        rotation: newRotation,\r\n      },\r\n    };\r\n\r\n    emit(\"update:element\", updatedElement);\r\n  }\r\n\r\n  function stopRotate() {\r\n    isRotating.value = false;\r\n    document.removeEventListener(\"mousemove\", onRotate);\r\n    document.removeEventListener(\"mouseup\", stopRotate);\r\n  }\r\n\r\n  // Clean up event listeners\r\n  onBeforeUnmount(() => {\r\n    stopDrag();\r\n    stopRotate();\r\n  });\r\n\r\n  return {\r\n    elementStyle,\r\n    contentElement,\r\n    handleClick,\r\n    startDrag,\r\n    handleResize,\r\n    startRotate,\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\composables\\useLayerManagement.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":8,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { computed } from \"vue\";\r\nimport type { DocumentElement } from \"../types/document\";\r\n\r\n/**\r\n * Composable for managing element layers (z-index)\r\n * Provides functions for sorting elements by z-index and moving elements up/down in the stack\r\n */\r\nexport function useLayerManagement(\r\n  elements: DocumentElement[] | (() => DocumentElement[]),\r\n) {\r\n  // Get elements array from function or direct array\r\n  const getElements = (): DocumentElement[] => {\r\n    return typeof elements === \"function\" ? elements() : elements;\r\n  };\r\n\r\n  // Sort elements by z-index for proper layering\r\n  const sortedElements = computed(() => {\r\n    const elementsArray = getElements();\r\n    if (!elementsArray || elementsArray.length === 0) return [];\r\n\r\n    // Make a copy of the elements array to avoid modifying the original\r\n    return [...elementsArray].sort((a, b) => {\r\n      // Default zIndex to 0 if not set\r\n      const zIndexA = a.zIndex ?? 0;\r\n      const zIndexB = b.zIndex ?? 0;\r\n      return zIndexA - zIndexB;\r\n    });\r\n  });\r\n\r\n  // Get the index of an element in the sorted array\r\n  const getElementIndex = (element: DocumentElement): number => {\r\n    return sortedElements.value.findIndex((e) => e.id === element.id);\r\n  };\r\n\r\n  // Check if element is at the top of the stack\r\n  const isTopLayer = (element: DocumentElement): boolean => {\r\n    const index = getElementIndex(element);\r\n    return index === sortedElements.value.length - 1;\r\n  };\r\n\r\n  // Check if element is at the bottom of the stack\r\n  const isBottomLayer = (element: DocumentElement): boolean => {\r\n    const index = getElementIndex(element);\r\n    return index === 0;\r\n  };\r\n\r\n  // Move an element up one layer\r\n  const moveElementUp = (element: DocumentElement): DocumentElement => {\r\n    const elementsArray = getElements();\r\n    const index = getElementIndex(element);\r\n    \r\n    // If already at the top, do nothing\r\n    if (index === elementsArray.length - 1) return element;\r\n    \r\n    // Get the element above\r\n    const aboveElement = sortedElements.value[index + 1];\r\n    \r\n    // Swap z-indices\r\n    const updatedElement = {\r\n      ...element,\r\n      zIndex: aboveElement.zIndex ?? 0,\r\n    };\r\n    \r\n    // If the above element has the same z-index, increment this element's z-index\r\n    if (updatedElement.zIndex === (element.zIndex ?? 0)) {\r\n      updatedElement.zIndex += 1;\r\n    }\r\n    \r\n    return updatedElement;\r\n  };\r\n\r\n  // Move an element down one layer\r\n  const moveElementDown = (element: DocumentElement): DocumentElement => {\r\n    const index = getElementIndex(element);\r\n    \r\n    // If already at the bottom, do nothing\r\n    if (index === 0) return element;\r\n    \r\n    // Get the element below\r\n    const belowElement = sortedElements.value[index - 1];\r\n    \r\n    // Swap z-indices\r\n    const updatedElement = {\r\n      ...element,\r\n      zIndex: belowElement.zIndex ?? 0,\r\n    };\r\n    \r\n    // If the below element has the same z-index, decrement this element's z-index\r\n    if (updatedElement.zIndex === (element.zIndex ?? 0)) {\r\n      updatedElement.zIndex -= 1;\r\n    }\r\n    \r\n    return updatedElement;\r\n  };\r\n\r\n  // Move an element to the top of the stack\r\n  const moveElementToTop = (element: DocumentElement): DocumentElement => {\r\n    const elementsArray = getElements();\r\n    \r\n    // Find the highest z-index\r\n    const highestZIndex = elementsArray.reduce(\r\n      (max, el) => Math.max(max, el.zIndex ?? 0),\r\n      0,\r\n    );\r\n    \r\n    // Set this element's z-index to one higher than the highest\r\n    return {\r\n      ...element,\r\n      zIndex: highestZIndex + 1,\r\n    };\r\n  };\r\n\r\n  // Move an element to the bottom of the stack\r\n  const moveElementToBottom = (element: DocumentElement): DocumentElement => {\r\n    const elementsArray = getElements();\r\n    \r\n    // Find the lowest z-index\r\n    const lowestZIndex = elementsArray.reduce(\r\n      (min, el) => Math.min(min, el.zIndex ?? 0),\r\n      0,\r\n    );\r\n    \r\n    // Set this element's z-index to one lower than the lowest\r\n    return {\r\n      ...element,\r\n      zIndex: lowestZIndex - 1,\r\n    };\r\n  };\r\n\r\n  return {\r\n    sortedElements,\r\n    getElementIndex,\r\n    isTopLayer,\r\n    isBottomLayer,\r\n    moveElementUp,\r\n    moveElementDown,\r\n    moveElementToTop,\r\n    moveElementToBottom,\r\n  };\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\router\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\services\\documentService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2549,2552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2549,2552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from \"axios\";\r\nimport type { Document } from \"../types/document\";\r\n\r\n// API base URL - change this to match your server\r\nconst API_URL = \"http://localhost:3000/api\";\r\n\r\n/**\r\n * Document Service\r\n * Handles all API interactions for documents\r\n */\r\nexport const documentService = {\r\n  /**\r\n   * Get all documents (metadata only)\r\n   * @returns Promise with array of document metadata\r\n   */\r\n  async getAllDocuments(): Promise<Document[]> {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/documents`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching documents:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get a document by ID\r\n   * @param id Document ID\r\n   * @returns Promise with the document\r\n   */\r\n  async getDocumentById(id: string): Promise<Document> {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/documents/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching document ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Save a document\r\n   * @param document Document to save\r\n   * @returns Promise with the saved document\r\n   */\r\n  async saveDocument(document: Document): Promise<Document> {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/documents`, document);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error saving document:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Delete a document\r\n   * @param id Document ID\r\n   * @returns Promise with success status\r\n   */\r\n  async deleteDocument(id: string): Promise<boolean> {\r\n    try {\r\n      await axios.delete(`${API_URL}/documents/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Error deleting document ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Create a new document with default values\r\n   * @param title Document title\r\n   * @returns New document object\r\n   */\r\n  createNewDocument(title: string = \"Untitled Document\"): Document {\r\n    return {\r\n      id: `new-doc-${Date.now()}`,\r\n      title,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      paperSize: \"Letter\",\r\n      orientation: \"portrait\",\r\n      sections: [\r\n        {\r\n          id: \"cover\",\r\n          title: \"Cover\",\r\n          elements: [],\r\n        },\r\n      ],\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Clean up orphaned images\r\n   * @returns Promise with cleanup results\r\n   */\r\n  async cleanupOrphanedImages(): Promise<any> {\r\n    try {\r\n      const response = await axios.delete(`${API_URL}/cleanup/images`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error cleaning up orphaned images:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default documentService;\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\services\\optimizedImageProcessor.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeListOf' is not defined.","line":13,"column":39,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":49},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":13,"column":96,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":103,"fix":{"range":[507,514],"text":"\"cover\""}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":48,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":48,"endColumn":5,"fix":{"range":[1644,1648],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":49,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":49,"endColumn":7,"fix":{"range":[1664,1670],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":50,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":50,"endColumn":7,"fix":{"range":[1759,1765],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":51,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":51,"endColumn":7,"fix":{"range":[1798,1804],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":52,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":52,"endColumn":7,"fix":{"range":[1856,1862],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":53,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":53,"endColumn":7,"fix":{"range":[1933,1939],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":54,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":54,"endColumn":7,"fix":{"range":[2013,2019],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":55,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":55,"endColumn":7,"fix":{"range":[2052,2058],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":56,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":56,"endColumn":7,"fix":{"range":[2079,2085],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":57,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":57,"endColumn":7,"fix":{"range":[2109,2115],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":58,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":58,"endColumn":7,"fix":{"range":[2180,2186],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":60,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":60,"endColumn":5,"fix":{"range":[2200,2204],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":61,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":61,"endColumn":7,"fix":{"range":[2218,2224],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":62,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":62,"endColumn":7,"fix":{"range":[2288,2294],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":63,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":63,"endColumn":7,"fix":{"range":[2325,2331],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":64,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":64,"endColumn":7,"fix":{"range":[2357,2363],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":65,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":65,"endColumn":7,"fix":{"range":[2390,2396],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":66,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":66,"endColumn":7,"fix":{"range":[2429,2435],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":67,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":67,"endColumn":7,"fix":{"range":[2456,2462],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":68,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":68,"endColumn":7,"fix":{"range":[2484,2490],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":70,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":70,"endColumn":5,"fix":{"range":[2504,2508],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":71,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":71,"endColumn":7,"fix":{"range":[2521,2527],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":72,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":72,"endColumn":7,"fix":{"range":[2580,2586],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":73,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":73,"endColumn":7,"fix":{"range":[2612,2618],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":74,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":74,"endColumn":7,"fix":{"range":[2645,2651],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":75,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":75,"endColumn":7,"fix":{"range":[2681,2687],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":77,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":77,"endColumn":5,"fix":{"range":[2701,2705],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":78,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":78,"endColumn":7,"fix":{"range":[2718,2724],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":79,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":79,"endColumn":7,"fix":{"range":[2772,2778],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":80,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":80,"endColumn":7,"fix":{"range":[2837,2843],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":81,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":81,"endColumn":7,"fix":{"range":[2914,2920],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":82,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":82,"endColumn":7,"fix":{"range":[2953,2959],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":83,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":83,"endColumn":7,"fix":{"range":[2982,2988],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":84,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":84,"endColumn":7,"fix":{"range":[3012,3018],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":85,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":85,"endColumn":7,"fix":{"range":[3065,3071],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":87,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":87,"endColumn":5,"fix":{"range":[3085,3089],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":88,"column":1,"nodeType":"Line","messageId":"wrongIndentation","endLine":88,"endColumn":7,"fix":{"range":[3108,3114],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":89,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":89,"endColumn":7,"fix":{"range":[3196,3202],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":90,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":90,"endColumn":7,"fix":{"range":[3261,3267],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":91,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":91,"endColumn":7,"fix":{"range":[3338,3344],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":92,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":92,"endColumn":7,"fix":{"range":[3418,3424],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":93,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":93,"endColumn":7,"fix":{"range":[3457,3463],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":94,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":94,"endColumn":7,"fix":{"range":[3486,3492],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":95,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":95,"endColumn":7,"fix":{"range":[3516,3522],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 6.","line":96,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":96,"endColumn":7,"fix":{"range":[3569,3575],"text":"    "}},{"ruleId":"no-undef","severity":2,"message":"'NodeListOf' is not defined.","line":104,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":59},{"ruleId":"no-undef","severity":2,"message":"'NodeListOf' is not defined.","line":144,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":144,"endColumn":55},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":155,"column":7,"nodeType":"CallExpression","messageId":"missing","endLine":156,"endColumn":1,"fix":{"range":[5370,5375],"text":"),\n  )"}}],"suppressedMessages":[],"errorCount":50,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":47,"fixableWarningCount":0,"source":"/**\n * Optimized Image Processor for PDF Export\n * \n * This module handles image processing for PDF export, extracted from pdfExportService.ts\n * to improve maintainability and performance.\n */\n\n/**\n * Process images in a document to ensure they render correctly in the PDF\n * @param images - The collection of image elements to process\n * @param objectFitDefault - Default object-fit value if not specified\n */\nexport function processImages(images: NodeListOf<HTMLImageElement>, objectFitDefault: string = 'cover'): void {\n  images.forEach((img) => {\n    // Set cross-origin attribute for external images\n    img.crossOrigin = \"anonymous\";\n\n    // Get the parent container (for positioning)\n    const container = img.parentElement;\n\n    // Make sure images are visible\n    img.style.display = \"block\";\n    img.style.visibility = \"visible\";\n\n    // Get computed object-fit style\n    const computedStyle = window.getComputedStyle(img);\n    const objectFit = computedStyle.objectFit || img.style.objectFit || objectFitDefault;\n\n    // Apply appropriate styling based on object-fit\n    applyObjectFitStyles(img, objectFit);\n\n    // Ensure parent container has proper positioning\n    if (container && container instanceof HTMLElement) {\n      container.style.position = \"relative\";\n      container.style.overflow = \"hidden\";\n      container.style.boxSizing = \"border-box\";\n    }\n  });\n}\n\n/**\n * Apply appropriate styles based on object-fit value\n * @param img - The image element to style\n * @param objectFit - The object-fit value to apply\n */\nfunction applyObjectFitStyles(img: HTMLImageElement, objectFit: string): void {\n  switch (objectFit) {\n    case \"contain\":\n      // For contain, maintain aspect ratio while ensuring the image fits within the container\n      img.style.objectFit = \"contain\";\n      img.style.height = \"100%\"; // Always fit the height\n      img.style.width = \"auto\"; // Let width adjust to maintain aspect ratio\n      img.style.maxWidth = \"none\"; // Allow width to exceed container if needed\n      img.style.position = \"absolute\";\n      img.style.top = \"0\";\n      img.style.left = \"50%\";\n      img.style.transform = \"translateX(-50%)\"; // Center horizontally\n      break;\n      \n    case \"cover\":\n      // For cover, fill the container while maintaining aspect ratio\n      img.style.objectFit = \"cover\";\n      img.style.width = \"100%\";\n      img.style.height = \"100%\";\n      img.style.position = \"absolute\";\n      img.style.top = \"0\";\n      img.style.left = \"0\";\n      break;\n      \n    case \"fill\":\n      // For fill, stretch the image to fill the container\n      img.style.width = \"100%\";\n      img.style.height = \"100%\";\n      img.style.objectFit = \"fill\";\n      break;\n      \n    case \"none\":\n      // For none, show the image at its natural size\n      img.style.maxHeight = \"100%\"; // Limit height to container\n      img.style.width = \"auto\"; // Let width adjust to maintain aspect ratio\n      img.style.position = \"absolute\";\n      img.style.top = \"50%\";\n      img.style.left = \"50%\";\n      img.style.transform = \"translate(-50%, -50%)\";\n      break;\n      \n    case \"scale-down\":\n      // For scale-down, show the image at its natural size or scaled down if too large\n      img.style.maxHeight = \"100%\"; // Limit height to container\n      img.style.width = \"auto\"; // Let width adjust to maintain aspect ratio\n      img.style.maxWidth = \"none\"; // Allow width to exceed container if needed\n      img.style.position = \"absolute\";\n      img.style.top = \"50%\";\n      img.style.left = \"50%\";\n      img.style.transform = \"translate(-50%, -50%)\";\n      break;\n  }\n}\n\n/**\n * Process SVG elements to ensure they render correctly in the PDF\n * @param svgElements - The collection of SVG elements to process\n */\nexport function processSvgElements(svgElements: NodeListOf<SVGElement>): void {\n  svgElements.forEach((svg) => {\n    // Add XML namespace if missing\n    if (!svg.getAttribute(\"xmlns\")) {\n      svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    }\n\n    // Ensure SVG has explicit dimensions\n    if (svg.style.width === \"\") {\n      svg.style.width = svg.getAttribute(\"width\") + \"px\";\n    }\n    if (svg.style.height === \"\") {\n      svg.style.height = svg.getAttribute(\"height\") + \"px\";\n    }\n\n    // Force SVG to be visible during capture\n    svg.style.display = \"block\";\n    svg.style.visibility = \"visible\";\n\n    // Process polygon elements (triangles)\n    const polygons = svg.querySelectorAll(\"polygon\");\n    polygons.forEach((polygon) => {\n      if (!polygon.getAttribute(\"fill\")) {\n        polygon.setAttribute(\"fill\", \"#E2E8F0\");\n      }\n      if (!polygon.getAttribute(\"stroke\")) {\n        polygon.setAttribute(\"stroke\", \"#CBD5E1\");\n      }\n      if (!polygon.getAttribute(\"stroke-width\")) {\n        polygon.setAttribute(\"stroke-width\", \"1\");\n      }\n    });\n  });\n}\n\n/**\n * Preload all images to ensure they're properly rendered\n * @param images - The collection of image elements to preload\n * @returns Promise that resolves when all images are loaded\n */\nexport async function preloadImages(images: NodeListOf<HTMLImageElement>): Promise<void> {\n  await Promise.all(\n    Array.from(images).map((img) => {\n      return new Promise<void>((resolve) => {\n        if (img.complete) {\n          resolve();\n        } else {\n          img.onload = () => resolve();\n          img.onerror = () => resolve();\n        }\n      });\n    })\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\services\\optimizedTextProcessor.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeListOf' is not defined.","line":12,"column":51,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":61},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":46,"column":18,"nodeType":"Literal","messageId":"missing","endLine":47,"endColumn":1,"fix":{"range":[1495,1512],"text":"\"important\",\n    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":68,"column":22,"nodeType":"Literal","messageId":"missing","endLine":69,"endColumn":1,"fix":{"range":[2265,2286],"text":"\"important\",\n        )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":89,"column":18,"nodeType":"Literal","messageId":"missing","endLine":90,"endColumn":1,"fix":{"range":[2789,2806],"text":"\"important\",\n    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":104,"column":18,"nodeType":"Literal","messageId":"missing","endLine":105,"endColumn":1,"fix":{"range":[3161,3178],"text":"\"important\",\n    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":113,"column":18,"nodeType":"Literal","messageId":"missing","endLine":114,"endColumn":1,"fix":{"range":[3347,3364],"text":"\"important\",\n    )"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":122,"column":18,"nodeType":"Literal","messageId":"missing","endLine":123,"endColumn":1,"fix":{"range":[3541,3558],"text":"\"important\",\n    )"}},{"ruleId":"no-undef","severity":2,"message":"'NodeListOf' is not defined.","line":131,"column":53,"nodeType":"Identifier","messageId":"undef","endLine":131,"endColumn":63},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":154,"column":35,"nodeType":"BinaryExpression","messageId":"missing","endLine":155,"endColumn":1,"fix":{"range":[4584,4618],"text":"\".v-slider, .v-input__control\",\n  )"}}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"/**\n * Optimized Text Processor for PDF Export\n * \n * This module handles text element processing for PDF export, extracted from pdfExportService.ts\n * to improve maintainability and performance.\n */\n\n/**\n * Process text elements to ensure styles are applied correctly in the PDF\n * @param textElements - The collection of text elements to process\n */\nexport function processTextElements(textElements: NodeListOf<Element>): void {\n  textElements.forEach((element) => {\n    if (!(element instanceof HTMLElement)) return;\n    \n    // Process block background\n    processBlockBackground(element);\n    \n    // Process content element\n    const contentElement = element.querySelector(\".element-content\");\n    if (contentElement instanceof HTMLElement) {\n      processContentElement(contentElement, element);\n    }\n  });\n}\n\n/**\n * Process block background for a text element\n * @param element - The text element to process\n */\nfunction processBlockBackground(element: HTMLElement): void {\n  // Force background color to be applied to the text element container\n  // This is critical for block backgrounds\n  const computedStyle = window.getComputedStyle(element);\n  const backgroundColor = computedStyle.backgroundColor;\n\n  if (\n    backgroundColor &&\n    backgroundColor !== \"rgba(0, 0, 0, 0)\" &&\n    backgroundColor !== \"transparent\"\n  ) {\n    // Apply the background color with !important to ensure it's rendered\n    element.style.setProperty(\n      \"background-color\",\n      backgroundColor,\n      \"important\"\n    );\n    // Add padding to ensure the background is visible\n    element.style.setProperty(\"padding\", \"8px\", \"important\");\n  }\n}\n\n/**\n * Process content element within a text element\n * @param contentElement - The content element to process\n * @param parentElement - The parent text element\n */\nfunction processContentElement(contentElement: HTMLElement, parentElement: HTMLElement): void {\n  // Ensure text color is applied\n  if (contentElement.style.color) {\n    // Apply color to all child elements\n    const textNodes = contentElement.querySelectorAll(\"*\");\n    textNodes.forEach((node) => {\n      if (node instanceof HTMLElement && !node.style.color) {\n        node.style.setProperty(\n          \"color\",\n          contentElement.style.color,\n          \"important\"\n        );\n      }\n    });\n  }\n\n  // Ensure font styles are applied\n  applyFontStyles(contentElement);\n\n  // Make the content element transparent if the parent has a background\n  const computedStyle = window.getComputedStyle(parentElement);\n  const backgroundColor = computedStyle.backgroundColor;\n  \n  if (\n    backgroundColor &&\n    backgroundColor !== \"rgba(0, 0, 0, 0)\" &&\n    backgroundColor !== \"transparent\"\n  ) {\n    contentElement.style.setProperty(\n      \"background-color\",\n      \"transparent\",\n      \"important\"\n    );\n  }\n}\n\n/**\n * Apply font styles to a content element\n * @param contentElement - The content element to apply styles to\n */\nfunction applyFontStyles(contentElement: HTMLElement): void {\n  // Apply font family\n  if (contentElement.style.fontFamily) {\n    contentElement.style.setProperty(\n      \"font-family\",\n      contentElement.style.fontFamily,\n      \"important\"\n    );\n  }\n  \n  // Apply font size\n  if (contentElement.style.fontSize) {\n    contentElement.style.setProperty(\n      \"font-size\",\n      contentElement.style.fontSize,\n      \"important\"\n    );\n  }\n  \n  // Apply font weight\n  if (contentElement.style.fontWeight) {\n    contentElement.style.setProperty(\n      \"font-weight\",\n      contentElement.style.fontWeight,\n      \"important\"\n    );\n  }\n}\n\n/**\n * Process shape elements to ensure they render correctly in the PDF\n * @param shapeElements - The collection of shape elements to process\n */\nexport function processShapeElements(shapeElements: NodeListOf<Element>): void {\n  shapeElements.forEach((element) => {\n    if (!(element instanceof HTMLElement)) return;\n    \n    // Check if this is a triangle by looking for polygon elements\n    const polygon = element.querySelector(\"polygon\");\n    if (polygon) {\n      // Make sure the container is transparent\n      element.style.backgroundColor = \"transparent\";\n      element.style.border = \"none\";\n    }\n  });\n}\n\n/**\n * Hide UI controls that shouldn't appear in the PDF\n * @param pageElement - The page element to process\n */\nexport function hideUiControls(pageElement: HTMLElement): void {\n  const uiElements = pageElement.querySelectorAll(\n    \".resize-handle, .scroll-control, .v-navigation-drawer, \" +\n    \".v-overlay, .v-menu, .v-btn--icon, button, \" +\n    \"[role='button'], .control-button, .handle, \" +\n    \".v-slider, .v-input__control\"\n  );\n\n  uiElements.forEach((el) => {\n    if (el instanceof HTMLElement) {\n      el.style.display = \"none\";\n      el.style.visibility = \"hidden\";\n      el.style.opacity = \"0\";\n    }\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\services\\pdfExportService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\stores\\documentStore.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":56,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":56,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":89,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":89,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineStore } from \"pinia\";\r\nimport { ref } from \"vue\";\r\nimport { Document } from \"../types/document\";\r\nimport axios from \"axios\";\r\n\r\n// API base URL - change this to match your server\r\nconst API_URL = \"http://localhost:3000/api\";\r\n\r\nexport const useDocumentStore = defineStore(\"documents\", () => {\r\n  const documents = ref<Document[]>([]);\r\n  const isLoading = ref(false);\r\n  const error = ref<string | null>(null);\r\n\r\n  // Load documents from the server\r\n  async function loadDocuments() {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Get documents from the server\r\n      const response = await axios.get(`${API_URL}/documents`);\r\n      documents.value = response.data;\r\n      console.log(\"Loaded documents from server:\", documents.value.length);\r\n    } catch (err) {\r\n      error.value = \"Failed to load documents from server\";\r\n      console.error(\"Error loading documents:\", err);\r\n\r\n      // Initialize with empty array if server request fails\r\n      documents.value = [];\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  }\r\n\r\n  // Get a specific document by ID\r\n  async function getDocument(id: string): Promise<Document | undefined> {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Get document from the server\r\n      const response = await axios.get(`${API_URL}/documents/${id}`);\r\n      const document = response.data;\r\n      console.log(`Retrieved document ${id} from server`);\r\n      return document;\r\n    } catch (err) {\r\n      error.value = `Failed to get document ${id} from server`;\r\n      console.error(`Error getting document ${id}:`, err);\r\n      return undefined;\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  }\r\n\r\n  // Save a document (create or update)\r\n  async function saveDocument(document: Document) {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Save document to the server\r\n      const response = await axios.post(`${API_URL}/documents`, document);\r\n      const savedDocument = response.data;\r\n\r\n      // Update local cache\r\n      const index = documents.value.findIndex(\r\n        (doc) => doc.id === savedDocument.id,\r\n      );\r\n      if (index >= 0) {\r\n        // Update existing document in cache\r\n        documents.value[index] = savedDocument;\r\n      } else {\r\n        // Add new document to cache\r\n        documents.value.push(savedDocument);\r\n      }\r\n\r\n      console.log(`Document saved to server: ${savedDocument.id}`);\r\n      return savedDocument;\r\n    } catch (err) {\r\n      error.value = \"Failed to save document to server\";\r\n      console.error(\"Error saving document:\", err);\r\n      throw err;\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  }\r\n\r\n  // Delete a document by ID\r\n  async function deleteDocument(id: string) {\r\n    isLoading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Delete document from the server\r\n      await axios.delete(`${API_URL}/documents/${id}`);\r\n\r\n      // Update local cache\r\n      documents.value = documents.value.filter((doc) => doc.id !== id);\r\n\r\n      console.log(`Deleted document ${id} from server`);\r\n      return true;\r\n    } catch (err) {\r\n      error.value = `Failed to delete document ${id} from server`;\r\n      console.error(`Error deleting document ${id}:`, err);\r\n      throw err;\r\n    } finally {\r\n      isLoading.value = false;\r\n    }\r\n  }\r\n\r\n  // Export all documents (for backup)\r\n  async function exportDocuments(): Promise<string> {\r\n    try {\r\n      // Load all documents first to ensure we have the latest data\r\n      await loadDocuments();\r\n      return JSON.stringify(documents.value);\r\n    } catch (err) {\r\n      console.error(\"Error exporting documents:\", err);\r\n      error.value = \"Failed to export documents\";\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  // Import documents from JSON string (for restore)\r\n  async function importDocuments(jsonData: string): Promise<boolean> {\r\n    try {\r\n      const importedDocs = JSON.parse(jsonData) as Document[];\r\n\r\n      // Save each document to the server\r\n      for (const doc of importedDocs) {\r\n        await saveDocument(doc);\r\n      }\r\n\r\n      console.log(`Imported ${importedDocs.length} documents to server`);\r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Error importing documents:\", err);\r\n      error.value = \"Failed to import documents\";\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Clear all documents from storage\r\n  async function clearDocuments(): Promise<boolean> {\r\n    try {\r\n      // Delete each document from the server\r\n      for (const doc of documents.value) {\r\n        await deleteDocument(doc.id);\r\n      }\r\n\r\n      // Clear local cache\r\n      documents.value = [];\r\n\r\n      console.log(\"Cleared all documents from server\");\r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Error clearing documents:\", err);\r\n      error.value = \"Failed to clear documents\";\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return {\r\n    documents,\r\n    isLoading,\r\n    error,\r\n    loadDocuments,\r\n    getDocument,\r\n    saveDocument,\r\n    deleteDocument,\r\n    exportDocuments,\r\n    importDocuments,\r\n    clearDocuments,\r\n  };\r\n});\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\stores\\historyStore.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":70,"column":3,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":70,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineStore } from \"pinia\";\r\nimport { ref } from \"vue\";\r\nimport type { Document } from \"../types/document\";\r\n\r\nexport const useHistoryStore = defineStore(\"history\", () => {\r\n  const undoStack = ref<Document[]>([]);\r\n  const redoStack = ref<Document[]>([]);\r\n  const isUndoing = ref(false);\r\n  const isRedoing = ref(false);\r\n\r\n  function pushState(document: Document) {\r\n    if (isUndoing.value || isRedoing.value) return;\r\n    \r\n    // Add current state to undo stack\r\n    undoStack.value.push(JSON.parse(JSON.stringify(document)));\r\n    \r\n    // Clear redo stack when new changes are made\r\n    redoStack.value = [];\r\n    \r\n    // Limit stack size to prevent memory issues\r\n    if (undoStack.value.length > 50) {\r\n      undoStack.value.shift();\r\n    }\r\n  }\r\n\r\n  function undo(currentDocument: Document): Document | null {\r\n    if (undoStack.value.length === 0) return null;\r\n    \r\n    isUndoing.value = true;\r\n    \r\n    try {\r\n      // Save current state to redo stack\r\n      redoStack.value.push(JSON.parse(JSON.stringify(currentDocument)));\r\n      \r\n      // Get previous state\r\n      const previousState = undoStack.value.pop();\r\n      \r\n      return previousState || null;\r\n    } finally {\r\n      isUndoing.value = false;\r\n    }\r\n  }\r\n\r\n  function redo(currentDocument: Document): Document | null {\r\n    if (redoStack.value.length === 0) return null;\r\n    \r\n    isRedoing.value = true;\r\n    \r\n    try {\r\n      // Save current state to undo stack\r\n      undoStack.value.push(JSON.parse(JSON.stringify(currentDocument)));\r\n      \r\n      // Get next state\r\n      const nextState = redoStack.value.pop();\r\n      \r\n      return nextState || null;\r\n    } finally {\r\n      isRedoing.value = false;\r\n    }\r\n  }\r\n\r\n  function canUndo(): boolean {\r\n    return undoStack.value.length > 0;\r\n  }\r\n\r\n  function canRedo(): boolean {\r\n    return redoStack.value.length > 0;\r\n  }\r\n\r\n  function clear() {\r\n    undoStack.value = [];\r\n    redoStack.value = [];\r\n  }\r\n\r\n  return {\r\n    pushState,\r\n    undo,\r\n    redo,\r\n    canUndo,\r\n    canRedo,\r\n    clear,\r\n  };\r\n});","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\tests\\components\\common\\TipBox.test.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":38,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":46,"fix":{"range":[37,45],"text":"\"vitest\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":2,"column":23,"nodeType":"Literal","messageId":"wrongQuotes","endLine":2,"endColumn":40,"fix":{"range":[69,86],"text":"\"@vue/test-utils\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":3,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":3,"endColumn":52,"fix":{"range":[107,139],"text":"\"@/components/common/TipBox.vue\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":5,"column":10,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":22,"fix":{"range":[151,163],"text":"\"TipBox.vue\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":6,"column":6,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":48,"fix":{"range":[178,220],"text":"\"renders the component with default props\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":9,"column":41,"nodeType":"Literal","messageId":"wrongQuotes","endLine":9,"endColumn":50,"fix":{"range":[346,355],"text":"\"tip-box\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":12,"column":6,"nodeType":"Literal","messageId":"wrongQuotes","endLine":12,"endColumn":39,"fix":{"range":[370,403],"text":"\"renders the title when provided\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":13,"column":19,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":31,"fix":{"range":[431,443],"text":"\"Test Title\""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":15,"column":23,"nodeType":"Property","messageId":"missing","endLine":16,"endColumn":1,"fix":{"range":[502,509],"text":"},\n    }"}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":20,"column":6,"nodeType":"Literal","messageId":"wrongQuotes","endLine":20,"endColumn":40,"fix":{"range":[569,603],"text":"\"renders the default slot content\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":21,"column":25,"nodeType":"Literal","messageId":"wrongQuotes","endLine":21,"endColumn":39,"fix":{"range":[637,651],"text":"\"Test content\""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":24,"column":29,"nodeType":"Property","messageId":"missing","endLine":25,"endColumn":1,"fix":{"range":[721,740],"text":"slotContent,\n      }"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":25,"column":8,"nodeType":"Property","messageId":"missing","endLine":26,"endColumn":1,"fix":{"range":[739,746],"text":"},\n    }"}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":30,"column":6,"nodeType":"Literal","messageId":"wrongQuotes","endLine":30,"endColumn":52,"fix":{"range":[812,858],"text":"\"applies the correct type class based on prop\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":31,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":31,"endColumn":26,"fix":{"range":[887,893],"text":"\"info\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":31,"column":28,"nodeType":"Literal","messageId":"wrongQuotes","endLine":31,"endColumn":37,"fix":{"range":[895,904],"text":"\"warning\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":31,"column":39,"nodeType":"Literal","messageId":"wrongQuotes","endLine":31,"endColumn":46,"fix":{"range":[906,913],"text":"\"error\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":31,"column":48,"nodeType":"Literal","messageId":"wrongQuotes","endLine":31,"endColumn":57,"fix":{"range":[915,924],"text":"\"success\""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":33,"column":19,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":33,"endColumn":23,"fix":{"range":[950,954],"text":"(type)"}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":35,"column":24,"nodeType":"Property","messageId":"missing","endLine":36,"endColumn":1,"fix":{"range":[1020,1029],"text":"},\n      }"}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":41,"column":6,"nodeType":"Literal","messageId":"wrongQuotes","endLine":41,"endColumn":55,"fix":{"range":[1115,1164],"text":"\"applies the dense class when dense prop is true\""}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":43,"column":29,"nodeType":"Property","messageId":"missing","endLine":44,"endColumn":1,"fix":{"range":[1237,1244],"text":"},\n    }"}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":45,"column":41,"nodeType":"Literal","messageId":"wrongQuotes","endLine":45,"endColumn":57,"fix":{"range":[1287,1303],"text":"\"tip-box--dense\""}}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":23,"fixableWarningCount":0,"source":"import { describe, it, expect } from 'vitest';\nimport { mount } from '@vue/test-utils';\nimport TipBox from '@/components/common/TipBox.vue';\n\ndescribe('TipBox.vue', () => {\n  it('renders the component with default props', () => {\n    const wrapper = mount(TipBox);\n    expect(wrapper.exists()).toBe(true);\n    expect(wrapper.classes()).toContain('tip-box');\n  });\n\n  it('renders the title when provided', () => {\n    const title = 'Test Title';\n    const wrapper = mount(TipBox, {\n      props: { title }\n    });\n    expect(wrapper.text()).toContain(title);\n  });\n\n  it('renders the default slot content', () => {\n    const slotContent = 'Test content';\n    const wrapper = mount(TipBox, {\n      slots: {\n        default: slotContent\n      }\n    });\n    expect(wrapper.text()).toContain(slotContent);\n  });\n\n  it('applies the correct type class based on prop', () => {\n    const types = ['info', 'warning', 'error', 'success'];\n    \n    types.forEach(type => {\n      const wrapper = mount(TipBox, {\n        props: { type }\n      });\n      expect(wrapper.classes()).toContain(`tip-box--${type}`);\n    });\n  });\n\n  it('applies the dense class when dense prop is true', () => {\n    const wrapper = mount(TipBox, {\n      props: { dense: true }\n    });\n    expect(wrapper.classes()).toContain('tip-box--dense');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\tests\\services\\optimizedImageProcessor.test.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":7,"column":1,"severity":1,"nodeType":null,"fix":{"range":[404,466],"text":" "}}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[667,670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[667,670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2608,2611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2608,2611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2897,2900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2897,2900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3266,3269],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3266,3269],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3805,3808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3805,3808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4210,4213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4210,4213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4691,4694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4691,4694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5016,5019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5016,5019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5385,5388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5385,5388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6417,6420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6417,6420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { describe, it, expect, beforeEach, vi } from \"vitest\";\nimport { processImages, processSvgElements, preloadImages } from \"@/services/optimizedImageProcessor\";\n\n// Create a mock type for testing that matches the NodeListOf interface\n// This avoids ESLint errors about NodeListOf not being defined\n// We use 'any' here because we're mocking the DOM API and the exact type doesn't matter for testing\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MockElementList<T extends Element> = T[] & {\n  item(index: number): T | null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  forEach(callback: (value: T, key: number, parent: any) => void): void;\n};\n\ndescribe(\"optimizedImageProcessor\", () => {\n  // Mock DOM elements\n  let mockImg: HTMLImageElement;\n  let mockContainer: HTMLDivElement;\n  let mockSvg: SVGElement;\n  let mockPolygon: SVGPolygonElement;\n\n  // Create mock image collection\n  const createMockImageCollection = (): MockElementList<HTMLImageElement> => {\n    const collection = [mockImg] as MockElementList<HTMLImageElement>;\n    collection.item = (index: number) => index === 0 ? mockImg : null;\n    collection.forEach = Array.prototype.forEach;\n    return collection;\n  };\n\n  // Create mock SVG collection\n  const createMockSvgCollection = (): MockElementList<SVGElement> => {\n    const collection = [mockSvg] as MockElementList<SVGElement>;\n    collection.item = (index: number) => index === 0 ? mockSvg : null;\n    collection.forEach = Array.prototype.forEach;\n    return collection;\n  };\n\n  beforeEach(() => {\n    // Reset mocks\n    vi.resetAllMocks();\n\n    // Create mock elements\n    mockImg = document.createElement(\"img\");\n    mockContainer = document.createElement(\"div\");\n    mockContainer.appendChild(mockImg);\n\n    // Mock computed style\n    vi.spyOn(window, \"getComputedStyle\").mockReturnValue({\n      objectFit: \"cover\",\n    } as CSSStyleDeclaration);\n\n    // Create mock SVG elements\n    mockSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    mockPolygon = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\");\n    mockSvg.appendChild(mockPolygon);\n  });\n\n  // Note: We use 'any' type casting in these tests to work around the NodeListOf type issue\n  // This is acceptable in tests since we're just testing the functionality, not the types\n  describe(\"processImages\", () => {\n    it(\"should set cross-origin attribute\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processImages(createMockImageCollection() as any);\n      expect(mockImg.crossOrigin).toBe(\"anonymous\");\n    });\n\n    it(\"should make images visible\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processImages(createMockImageCollection() as any);\n      expect(mockImg.style.display).toBe(\"block\");\n      expect(mockImg.style.visibility).toBe(\"visible\");\n    });\n\n    it(\"should apply correct styles for \\\"cover\\\" object-fit\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processImages(createMockImageCollection() as any);\n      expect(mockImg.style.objectFit).toBe(\"cover\");\n      expect(mockImg.style.width).toBe(\"100%\");\n      expect(mockImg.style.height).toBe(\"100%\");\n    });\n\n    it(\"should apply correct styles for \\\"contain\\\" object-fit\", () => {\n      vi.spyOn(window, \"getComputedStyle\").mockReturnValue({\n        objectFit: \"contain\",\n      } as CSSStyleDeclaration);\n\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processImages(createMockImageCollection() as any);\n      expect(mockImg.style.objectFit).toBe(\"contain\");\n      expect(mockImg.style.height).toBe(\"100%\");\n      expect(mockImg.style.width).toBe(\"auto\");\n    });\n\n    it(\"should style the parent container correctly\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processImages(createMockImageCollection() as any);\n      expect(mockContainer.style.position).toBe(\"relative\");\n      expect(mockContainer.style.overflow).toBe(\"hidden\");\n      expect(mockContainer.style.boxSizing).toBe(\"border-box\");\n    });\n  });\n\n  describe(\"processSvgElements\", () => {\n    it(\"should add xmlns attribute if missing\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processSvgElements(createMockSvgCollection() as any);\n      expect(mockSvg.getAttribute(\"xmlns\")).toBe(\"http://www.w3.org/2000/svg\");\n    });\n\n    it(\"should make SVG elements visible\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processSvgElements(createMockSvgCollection() as any);\n      expect(mockSvg.style.display).toBe(\"block\");\n      expect(mockSvg.style.visibility).toBe(\"visible\");\n    });\n\n    it(\"should add default attributes to polygon elements\", () => {\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      processSvgElements(createMockSvgCollection() as any);\n      expect(mockPolygon.getAttribute(\"fill\")).toBe(\"#E2E8F0\");\n      expect(mockPolygon.getAttribute(\"stroke\")).toBe(\"#CBD5E1\");\n      expect(mockPolygon.getAttribute(\"stroke-width\")).toBe(\"1\");\n    });\n  });\n\n  describe(\"preloadImages\", () => {\n    it(\"should resolve when all images are loaded\", async () => {\n      // Create a mock array with the necessary properties\n      const mockImages = [\n        { complete: true },\n        { complete: false, onload: null, onerror: null },\n      ] as unknown as HTMLImageElement[];\n\n      // Add item and forEach methods to make it compatible with NodeListOf\n      const mockImageList = mockImages as unknown as MockElementList<HTMLImageElement>;\n      mockImageList.item = (index: number) => index < mockImages.length ? mockImages[index] : null;\n      mockImageList.forEach = Array.prototype.forEach;\n\n      // Use our mock collection that mimics NodeListOf\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const promise = preloadImages(mockImageList as any);\n\n      // Simulate the second image loading\n      if (mockImages[1].onload) {\n        // Use a more specific type instead of Function\n        (mockImages[1].onload as () => void)();\n      }\n\n      await expect(promise).resolves.toBeUndefined();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\tests\\setup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":43,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":51,"fix":{"range":[42,50],"text":"\"vitest\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":2,"column":24,"nodeType":"Literal","messageId":"wrongQuotes","endLine":2,"endColumn":41,"fix":{"range":[75,92],"text":"\"@vue/test-utils\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":12,"column":31,"nodeType":"Literal","messageId":"wrongQuotes","endLine":12,"endColumn":43,"fix":{"range":[357,369],"text":"\"matchMedia\""}},{"ruleId":"arrow-parens","severity":2,"message":"Expected parentheses around arrow function argument.","line":14,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"expectedParens","endLine":14,"endColumn":42,"fix":{"range":[427,432],"text":"(query)"}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":36,"column":3,"nodeType":"Literal","messageId":"wrongQuotes","endLine":36,"endColumn":16,"fix":{"range":[898,911],"text":"\"router-link\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":37,"column":3,"nodeType":"Literal","messageId":"wrongQuotes","endLine":37,"endColumn":16,"fix":{"range":[921,934],"text":"\"router-view\""}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":6,"fixableWarningCount":0,"source":"import { afterEach, beforeEach, vi } from 'vitest';\nimport { config } from '@vue/test-utils';\n\n// Mock global objects that might not be available in the test environment\nglobal.ResizeObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(),\n    removeListener: vi.fn(),\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Configure Vue Test Utils\nconfig.global.stubs = {\n  transition: false,\n  'router-link': true,\n  'router-view': true,\n};\n\n// Clean up after each test\nafterEach(() => {\n  vi.clearAllMocks();\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\types\\document.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\elementComponentLoader.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ErrorComponent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Element Component Loader\r\n *\r\n * This utility provides functions for loading element components asynchronously\r\n * with consistent error handling and loading states.\r\n */\r\n\r\nimport { defineAsyncComponent } from \"vue\";\r\nimport type { Component } from \"vue\";\r\n\r\n// Error component for async loading failures\r\nconst ErrorComponent = {\r\n  template: '<div class=\"error-loading\">Error loading component</div>',\r\n  props: [\"error\"],\r\n};\r\n\r\n// Loading component for async loading\r\nconst LoadingComponent = {\r\n  template: '<div class=\"loading-component\">Loading...</div>',\r\n};\r\n\r\n/**\r\n * Create an async component with standard error and loading handling\r\n * @param path Path to the component\r\n * @param errorMessage Custom error message\r\n * @returns Async component\r\n */\r\nexport function createAsyncElementComponent(\r\n  path: string,\r\n  errorMessage: string = \"Error loading component\",\r\n): Component {\r\n  return defineAsyncComponent({\r\n    // @vite-ignore - This dynamic import is handled at runtime\r\n    loader: () => import(/* @vite-ignore */ path),\r\n    timeout: 3000,\r\n    errorComponent: {\r\n      template: `<div class=\"error-loading\">${errorMessage}</div>`,\r\n    },\r\n    loadingComponent: LoadingComponent,\r\n  });\r\n}\r\n\r\n// Define async components with error handling\r\nconst TextElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/TextElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading text element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst ImageElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/ImageElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading image element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst ShapeElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/ShapeElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading shape element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst TableElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/SimpleTableElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading table element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst SignatureElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/SignatureElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template:\r\n      '<div class=\"error-loading\">Error loading signature element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst FormElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/FormElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading form element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst GroupElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/GroupElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading group element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\nconst GridBlockElement = defineAsyncComponent({\r\n  loader: () => import(\"../components/editor/elements/GridBlockElement.vue\"),\r\n  timeout: 3000,\r\n  errorComponent: {\r\n    template: '<div class=\"error-loading\">Error loading grid element</div>',\r\n  },\r\n  loadingComponent: LoadingComponent,\r\n});\r\n\r\n// Element registry for component lookup\r\nexport const elementComponentRegistry: Record<string, Component> = {\r\n  text: TextElement,\r\n  image: ImageElement,\r\n  shape: ShapeElement,\r\n  table: TableElement,\r\n  signature: SignatureElement,\r\n  form: FormElement,\r\n  group: GroupElement,\r\n  grid: GridBlockElement,\r\n};\r\n\r\n/**\r\n * Get the appropriate component for an element type\r\n * @param type Element type\r\n * @returns Vue component for the element type\r\n */\r\nexport function getElementComponent(type: string): Component | null {\r\n  return elementComponentRegistry[type] || null;\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\elementUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\fontFamilies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\paperSizes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\selectionManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":74,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":188,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":188,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isMultiLine' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":254,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":300,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":300,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isMultiLine' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":338,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":363,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":363,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isMultiLine' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":400,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":400,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":429,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":429,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isMultiLine' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":469,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":469,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":498,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":498,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":513,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":513,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":529,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":529,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":669,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":669,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":754,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":754,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21863,21866],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21863,21866],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":801,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":801,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23465,23468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23465,23468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":808,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":808,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23807,23810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23807,23810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":859,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":859,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25556,25559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25556,25559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'processNodesForStyling' is defined but never used. Allowed unused vars must match /^_/u.","line":921,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":921,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":934,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":934,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27837,27840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27837,27840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":958,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":958,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28769,28772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28769,28772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1030,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1030,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31175,31178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31175,31178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1312,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":1312,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Global selection manager to handle text selection and formatting\r\n */\r\n\r\n// Store the current selection\r\nlet savedRange: Range | null = null;\r\nlet savedElement: HTMLElement | null = null;\r\n\r\n/**\r\n * Save the current selection\r\n */\r\nexport function saveSelection(): boolean {\r\n  const selection = window.getSelection();\r\n  if (!selection || selection.rangeCount === 0) {\r\n    return false;\r\n  }\r\n\r\n  const range = selection.getRangeAt(0);\r\n  if (range.collapsed) {\r\n    return false;\r\n  }\r\n\r\n  // Find the contenteditable element containing the selection\r\n  let element = range.commonAncestorContainer as HTMLElement;\r\n  if (element.nodeType !== Node.ELEMENT_NODE) {\r\n    element = element.parentElement as HTMLElement;\r\n  }\r\n\r\n  // Find the closest contenteditable element\r\n  while (element && !element.hasAttribute(\"contenteditable\")) {\r\n    element = element.parentElement as HTMLElement;\r\n  }\r\n\r\n  if (!element) {\r\n    return false;\r\n  }\r\n\r\n  // Make sure the selection is within a text element\r\n  const textElement = element.closest(\".text-element\");\r\n  if (!textElement) {\r\n    return false;\r\n  }\r\n\r\n  // Save the selection\r\n  savedRange = range.cloneRange();\r\n  savedElement = element;\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Restore the saved selection\r\n */\r\nexport function restoreSelection(): boolean {\r\n  if (!savedRange || !savedElement) return false;\r\n\r\n  // Don't interfere with input fields\r\n  if (isInputActive()) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first\r\n    savedElement.focus();\r\n\r\n    // Restore the selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    selection.removeAllRanges();\r\n    selection.addRange(savedRange.cloneRange());\r\n\r\n    return true;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check if there is a saved selection\r\n */\r\nexport function hasSavedSelection(): boolean {\r\n  return savedRange !== null && savedElement !== null;\r\n}\r\n\r\n/**\r\n * Clear the saved selection\r\n */\r\nexport function clearSelection(): void {\r\n  savedRange = null;\r\n  savedElement = null;\r\n}\r\n\r\n/**\r\n * Apply a formatting command to the saved selection\r\n */\r\nexport function applyFormatting(\r\n  command: string,\r\n  value: string | boolean | null = null,\r\n): boolean {\r\n  // Don't interfere with input fields\r\n  if (isInputActive()) {\r\n    return false;\r\n  }\r\n\r\n  if (!savedRange || !savedElement) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      console.error(\"Invalid selection range\");\r\n      return false;\r\n    }\r\n\r\n    // Check if the selection spans multiple blocks/paragraphs\r\n    const currentRange = selection.getRangeAt(0);\r\n    const isMultiLine = isMultiLineSelection(currentRange);\r\n\r\n    // For multi-line selections with certain commands, use our custom approach\r\n    if (\r\n      isMultiLine &&\r\n      (command === \"foreColor\" ||\r\n        command === \"backColor\" ||\r\n        command === \"fontSize\")\r\n    ) {\r\n      // Using custom approach for multi-line formatting\r\n\r\n      // Map command to style property\r\n      let styleProperty: string;\r\n      let styleValue: string;\r\n\r\n      switch (command) {\r\n      case \"foreColor\":\r\n        styleProperty = \"color\";\r\n        styleValue = value as string;\r\n        break;\r\n      case \"backColor\":\r\n        styleProperty = \"backgroundColor\";\r\n        styleValue = value as string;\r\n        break;\r\n      case \"fontSize\":\r\n        styleProperty = \"fontSize\";\r\n        styleValue = `${value}px`;\r\n        break;\r\n      default: {\r\n        // For other commands, try the standard execCommand\r\n        document.execCommand(\"styleWithCSS\", false, \"true\");\r\n        const result = document.execCommand(command, false, value as string);\r\n\r\n        // Save the selection again to preserve it for future operations\r\n        saveSelection();\r\n\r\n        return result;\r\n      }\r\n      }\r\n\r\n      return applyStyleToMultiLineSelection(\r\n        currentRange,\r\n        styleProperty,\r\n        styleValue,\r\n      );\r\n    } else {\r\n      // For single-line selections or other commands, use the standard execCommand\r\n      document.execCommand(\"styleWithCSS\", false, \"true\");\r\n      const result = document.execCommand(command, false, value as string);\r\n\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n\r\n      return result;\r\n    }\r\n  } catch (error) {\r\n    // Error applying formatting\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply bold formatting to the saved selection\r\n */\r\nexport function applyBold(): boolean {\r\n  return applyFormatting(\"bold\");\r\n}\r\n\r\n/**\r\n * Apply italic formatting to the saved selection\r\n */\r\nexport function applyItalic(): boolean {\r\n  return applyFormatting(\"italic\");\r\n}\r\n\r\n/**\r\n * Apply underline formatting to the saved selection\r\n */\r\nexport function applyUnderline(): boolean {\r\n  return applyFormatting(\"underline\");\r\n}\r\n\r\n/**\r\n * Apply font family to the saved selection\r\n */\r\nexport function applyFontFamily(fontFamily: string): boolean {\r\n  return applyFormatting(\"fontName\", fontFamily);\r\n}\r\n\r\n/**\r\n * Apply font size to the saved selection\r\n */\r\nexport function applyFontSize(fontSize: number): boolean {\r\n  if (!savedRange || !savedElement) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      return false;\r\n    }\r\n\r\n    // Get the current range\r\n    const currentRange = selection.getRangeAt(0);\r\n\r\n    // Check if the selection spans multiple blocks/paragraphs\r\n    const isMultiLine = isMultiLineSelection(currentRange);\r\n    // Check if selection spans multiple lines\r\n\r\n    // Use our improved multi-line handler for all selections\r\n    // This will try multiple approaches in order of reliability\r\n    const result = applyStyleToMultiLineSelection(\r\n      currentRange,\r\n      \"fontSize\",\r\n      `${fontSize}px`,\r\n    );\r\n\r\n    if (result) {\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n      return true;\r\n    }\r\n\r\n    // If all else fails, try the most basic approach\r\n    // Try basic execCommand as last resort\r\n    document.execCommand(\"styleWithCSS\", false, \"true\");\r\n    const basicResult = document.execCommand(\"fontSize\", false, \"7\"); // 7 is the largest size\r\n\r\n    if (basicResult) {\r\n      // Find all font elements with size 7 and replace with the actual size\r\n      const fontElements = savedElement.querySelectorAll('font[size=\"7\"]');\r\n      fontElements.forEach((font) => {\r\n        const span = document.createElement(\"span\");\r\n        span.style.fontSize = `${fontSize}px`;\r\n\r\n        // Move all children from the font element to the span\r\n        while (font.firstChild) {\r\n          span.appendChild(font.firstChild);\r\n        }\r\n\r\n        // Replace the font element with the span\r\n        if (font.parentNode) {\r\n          font.parentNode.replaceChild(span, font);\r\n        }\r\n      });\r\n\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply text color to the saved selection\r\n */\r\nexport function applyTextColor(color: string): boolean {\r\n  if (!savedRange || !savedElement) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      console.error(\"Invalid selection range\");\r\n      return false;\r\n    }\r\n\r\n    // Get the current range\r\n    const currentRange = selection.getRangeAt(0);\r\n\r\n    // Check if the selection spans multiple blocks/paragraphs\r\n    const isMultiLine = isMultiLineSelection(currentRange);\r\n    // Check if selection spans multiple lines\r\n\r\n    // Use our improved multi-line handler for all selections\r\n    // This will try multiple approaches in order of reliability\r\n    const result = applyStyleToMultiLineSelection(currentRange, \"color\", color);\r\n\r\n    if (result) {\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n      return true;\r\n    }\r\n\r\n    // If all else fails, try the most basic approach\r\n    // Try basic execCommand as last resort\r\n    document.execCommand(\"styleWithCSS\", false, \"true\");\r\n    const basicResult = document.execCommand(\"foreColor\", false, color);\r\n\r\n    if (basicResult) {\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply background color to the saved selection\r\n */\r\nexport function applyBackgroundColor(color: string): boolean {\r\n  if (!savedRange || !savedElement) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      return false;\r\n    }\r\n\r\n    // Get the current range\r\n    const currentRange = selection.getRangeAt(0);\r\n\r\n    // Check if the selection spans multiple blocks/paragraphs\r\n    const isMultiLine = isMultiLineSelection(currentRange);\r\n    // Check if selection spans multiple lines\r\n\r\n    // Use our improved multi-line handler for all selections\r\n    // This will try multiple approaches in order of reliability\r\n    const result = applyStyleToMultiLineSelection(\r\n      currentRange,\r\n      \"backgroundColor\",\r\n      color,\r\n    );\r\n\r\n    if (result) {\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n      return true;\r\n    }\r\n\r\n    // If all else fails, try the most basic approach\r\n    // Try basic execCommand as last resort\r\n    document.execCommand(\"styleWithCSS\", false, \"true\");\r\n    const basicResult = document.execCommand(\"backColor\", false, color);\r\n\r\n    if (basicResult) {\r\n      // Save the selection again to preserve it for future operations\r\n      saveSelection();\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply both text color and background color to the saved selection at once\r\n */\r\nexport function applyTextAndBackgroundColor(\r\n  textColor: string,\r\n  backgroundColor: string,\r\n): boolean {\r\n  if (!savedRange || !savedElement) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      return false;\r\n    }\r\n\r\n    // Get the current range\r\n    const currentRange = selection.getRangeAt(0);\r\n\r\n    // Check if the selection spans multiple blocks/paragraphs\r\n    const isMultiLine = isMultiLineSelection(currentRange);\r\n    // Check if selection spans multiple lines\r\n\r\n    // Try to apply both styles at once using a single span\r\n    try {\r\n      // Clone the range to avoid modifying the original\r\n      const clonedRange = currentRange.cloneRange();\r\n\r\n      // Create a span with both styles\r\n      const span = document.createElement(\"span\");\r\n      span.style.color = textColor;\r\n      span.style.backgroundColor = backgroundColor;\r\n\r\n      try {\r\n        // Try surroundContents first (works for simple selections)\r\n        clonedRange.surroundContents(span);\r\n\r\n        // Create a new range that selects just the content we modified\r\n        const newRange = document.createRange();\r\n        newRange.selectNodeContents(span);\r\n\r\n        // Update the selection\r\n        selection.removeAllRanges();\r\n        selection.addRange(newRange);\r\n\r\n        // Update our saved range\r\n        savedRange = newRange.cloneRange();\r\n\r\n        return true;\r\n      } catch (error) {\r\n        // surroundContents failed, trying separate applications\r\n\r\n        // If surroundContents fails, apply colors separately\r\n        // First apply text color\r\n        const textColorSuccess = applyTextColor(textColor);\r\n\r\n        if (textColorSuccess) {\r\n          // Then apply background color\r\n          const bgColorSuccess = applyBackgroundColor(backgroundColor);\r\n          return bgColorSuccess;\r\n        }\r\n\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      // Error applying combined colors\r\n\r\n      // If all else fails, try applying colors separately as fallback\r\n\r\n      // First apply text color\r\n      const textColorSuccess = applyTextColor(textColor);\r\n\r\n      if (textColorSuccess) {\r\n        // Then apply background color\r\n        const bgColorSuccess = applyBackgroundColor(backgroundColor);\r\n        return bgColorSuccess;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply text alignment to the saved selection\r\n */\r\nexport function applyTextAlignment(\r\n  alignment: \"left\" | \"center\" | \"right\" | \"justify\",\r\n): boolean {\r\n  const command = `justify${alignment.charAt(0).toUpperCase()}${alignment.slice(\r\n    1,\r\n  )}`;\r\n  return applyFormatting(command);\r\n}\r\n\r\n// Check if the active element is an input or textarea\r\nexport function isInputActive(): boolean {\r\n  const activeElement = document.activeElement;\r\n  if (!activeElement) return false;\r\n\r\n  const tagName = activeElement.tagName.toLowerCase();\r\n  return (\r\n    tagName === \"input\" ||\r\n    tagName === \"textarea\" ||\r\n    tagName === \"select\" ||\r\n    activeElement.hasAttribute(\"contenteditable\")\r\n  );\r\n}\r\n\r\n/**\r\n * Check if a selection spans multiple blocks/paragraphs\r\n */\r\nexport function isMultiLineSelection(range: Range): boolean {\r\n  try {\r\n    // Get the common ancestor container of the selection\r\n    const container = range.commonAncestorContainer;\r\n\r\n    // If the container is a text node, we need to check its parent\r\n    const parentElement =\r\n      container.nodeType === Node.TEXT_NODE\r\n        ? container.parentElement\r\n        : (container as HTMLElement);\r\n\r\n    if (!parentElement) return false;\r\n\r\n    // Get the selected text\r\n    const text = range.toString();\r\n\r\n    // Check if the selection text contains newlines\r\n    const containsNewlines = text.includes(\"\\n\");\r\n\r\n    // Check if the selection contains any block-level elements or line breaks\r\n    // First, clone the range contents to avoid modifying the original\r\n    const fragment = range.cloneContents();\r\n    const tempDiv = document.createElement(\"div\");\r\n    tempDiv.appendChild(fragment);\r\n\r\n    // Check for block elements and line breaks in the selection\r\n    const containsBlockElements =\r\n      tempDiv.querySelector(\r\n        \"div, p, h1, h2, h3, h4, h5, h6, ul, ol, li, blockquote, table, tr, td, th\",\r\n      ) !== null;\r\n    const containsLineBreaks = tempDiv.querySelector(\"br\") !== null;\r\n\r\n    // Check if the selection spans multiple nodes\r\n    const spansMultipleNodes = range.startContainer !== range.endContainer;\r\n\r\n    // Check if the selection spans multiple paragraphs by looking at the DOM structure\r\n    let spansMultipleParagraphs = false;\r\n    if (spansMultipleNodes) {\r\n      // Get all text nodes in the selection\r\n      const textNodes: Node[] = [];\r\n      const walker = document.createTreeWalker(\r\n        parentElement,\r\n        NodeFilter.SHOW_TEXT,\r\n        {\r\n          acceptNode: (node) => {\r\n            // Only accept text nodes that are not empty\r\n            return node.textContent && node.textContent.trim() !== \"\"\r\n              ? NodeFilter.FILTER_ACCEPT\r\n              : NodeFilter.FILTER_REJECT;\r\n          },\r\n        },\r\n      );\r\n\r\n      let node;\r\n      while ((node = walker.nextNode())) {\r\n        textNodes.push(node);\r\n      }\r\n\r\n      // Check if the selection spans multiple paragraphs\r\n      if (textNodes.length > 1) {\r\n        const startNodeIndex = textNodes.indexOf(range.startContainer);\r\n        const endNodeIndex = textNodes.indexOf(range.endContainer);\r\n\r\n        if (\r\n          startNodeIndex !== -1 &&\r\n          endNodeIndex !== -1 &&\r\n          startNodeIndex !== endNodeIndex\r\n        ) {\r\n          // Check if any nodes between start and end are in different paragraphs\r\n          for (let i = startNodeIndex; i <= endNodeIndex; i++) {\r\n            const node = textNodes[i];\r\n            const parentParagraph = node.parentElement?.closest(\r\n              \"p, div, li, td, th, h1, h2, h3, h4, h5, h6\",\r\n            );\r\n\r\n            if (parentParagraph) {\r\n              for (let j = i + 1; j <= endNodeIndex; j++) {\r\n                const otherNode = textNodes[j];\r\n                const otherParentParagraph = otherNode.parentElement?.closest(\r\n                  \"p, div, li, td, th, h1, h2, h3, h4, h5, h6\",\r\n                );\r\n\r\n                if (\r\n                  otherParentParagraph &&\r\n                  parentParagraph !== otherParentParagraph\r\n                ) {\r\n                  spansMultipleParagraphs = true;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              if (spansMultipleParagraphs) break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Selection analysis complete\r\n\r\n    return (\r\n      containsNewlines ||\r\n      containsBlockElements ||\r\n      containsLineBreaks ||\r\n      spansMultipleParagraphs\r\n    );\r\n  } catch (error) {\r\n    // If there's an error, assume it's not a multi-line selection\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a style to a multi-line selection by processing each line separately\r\n */\r\nexport function applyStyleToMultiLineSelection(\r\n  range: Range,\r\n  styleProperty: string,\r\n  value: string,\r\n): boolean {\r\n  try {\r\n    // First, try using the document.execCommand approach (most reliable)\r\n    if (\r\n      styleProperty === \"color\" ||\r\n      styleProperty === \"backgroundColor\" ||\r\n      styleProperty === \"fontSize\"\r\n    ) {\r\n      // Focus the element first to ensure we're working with the right context\r\n      if (savedElement) {\r\n        savedElement.focus();\r\n      }\r\n\r\n      // Map style property to execCommand\r\n      let command: string;\r\n      let commandValue: string = value;\r\n\r\n      if (styleProperty === \"color\") {\r\n        command = \"foreColor\";\r\n      } else if (styleProperty === \"backgroundColor\") {\r\n        command = \"backColor\";\r\n      } else if (styleProperty === \"fontSize\") {\r\n        command = \"fontSize\";\r\n        // For fontSize, we need to use a different approach\r\n        // First apply a standard size (7) and then replace with actual size\r\n        commandValue = \"7\";\r\n      } else {\r\n        command = styleProperty;\r\n      }\r\n\r\n      // Enable CSS styling\r\n      document.execCommand(\"styleWithCSS\", false, \"true\");\r\n\r\n      // Apply the command\r\n      const result = document.execCommand(command, false, commandValue);\r\n\r\n      // For fontSize, we need to replace the font elements with spans\r\n      if (result && styleProperty === \"fontSize\" && savedElement) {\r\n        // Find all font elements with size 7 and replace with the actual size\r\n        const fontElements = savedElement.querySelectorAll('font[size=\"7\"]');\r\n        fontElements.forEach((font) => {\r\n          const span = document.createElement(\"span\");\r\n          span.style.fontSize = value;\r\n\r\n          // Move all children from the font element to the span\r\n          while (font.firstChild) {\r\n            span.appendChild(font.firstChild);\r\n          }\r\n\r\n          // Replace the font element with the span\r\n          if (font.parentNode) {\r\n            font.parentNode.replaceChild(span, font);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (result) {\r\n        // Save the selection again to preserve it for future operations\r\n        saveSelection();\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // If execCommand fails, try the surroundContents approach\r\n    console.log(\r\n      `execCommand failed, trying surroundContents for ${styleProperty}`,\r\n    );\r\n\r\n    try {\r\n      // Create a span with the style\r\n      const span = document.createElement(\"span\");\r\n      span.style[styleProperty as any] = value;\r\n\r\n      // Try to use surroundContents (works for simple selections)\r\n      range.surroundContents(span);\r\n\r\n      // Create a new range that selects just the content we modified\r\n      const newRange = document.createRange();\r\n      newRange.selectNodeContents(span);\r\n\r\n      // Update the selection\r\n      const selection = window.getSelection();\r\n      if (selection) {\r\n        selection.removeAllRanges();\r\n        selection.addRange(newRange);\r\n\r\n        // Update our saved range\r\n        savedRange = newRange.cloneRange();\r\n      }\r\n\r\n      console.log(\r\n        `Applied ${styleProperty}: ${value} to selection using surroundContents`,\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\r\n        \"surroundContents failed, trying iterative approach:\",\r\n        error,\r\n      );\r\n\r\n      // If surroundContents fails, use a more complex approach for multi-line selections\r\n      // Clone the range to avoid modifying the original\r\n      const clonedRange = range.cloneRange();\r\n\r\n      // Get the selected content as HTML\r\n      const fragment = clonedRange.cloneContents();\r\n      const tempDiv = document.createElement(\"div\");\r\n      tempDiv.appendChild(fragment);\r\n\r\n      // Store the original content for backup\r\n      const originalContent = tempDiv.innerHTML;\r\n\r\n      try {\r\n        // Apply the style to all text nodes in the selection\r\n        const textNodes = getAllTextNodes(tempDiv);\r\n\r\n        // If there are no text nodes, apply the style to the container\r\n        if (textNodes.length === 0) {\r\n          tempDiv.style[styleProperty as any] = value;\r\n        } else {\r\n          // Apply the style to each text node\r\n          textNodes.forEach((node) => {\r\n            if (node.textContent && node.textContent.trim() !== \"\") {\r\n              // Create a span with the style\r\n              const span = document.createElement(\"span\");\r\n              span.style[styleProperty as any] = value;\r\n              span.textContent = node.textContent;\r\n\r\n              // Replace the text node with the span\r\n              if (node.parentNode) {\r\n                node.parentNode.replaceChild(span, node);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        // Replace the original content with the styled content\r\n        range.deleteContents();\r\n\r\n        // Create a document fragment from the styled content\r\n        const styledFragment = document.createDocumentFragment();\r\n        while (tempDiv.firstChild) {\r\n          styledFragment.appendChild(tempDiv.firstChild);\r\n        }\r\n\r\n        // Insert the styled content\r\n        range.insertNode(styledFragment);\r\n\r\n        // Create a new range that encompasses all the modified content\r\n        const newRange = document.createRange();\r\n        newRange.selectNodeContents(range.commonAncestorContainer);\r\n\r\n        // Update the selection\r\n        const selection = window.getSelection();\r\n        if (selection) {\r\n          selection.removeAllRanges();\r\n          selection.addRange(newRange);\r\n\r\n          // Update our saved range\r\n          savedRange = newRange.cloneRange();\r\n        }\r\n\r\n        console.log(\r\n          `Applied ${styleProperty}: ${value} to multi-line selection using iterative approach`,\r\n        );\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Error applying style to multi-line selection:\", error);\r\n\r\n        // If all else fails, try a simpler approach as a last resort\r\n        try {\r\n          // Delete the original content\r\n          range.deleteContents();\r\n\r\n          // Create a span with the style\r\n          const span = document.createElement(\"span\");\r\n          span.style[styleProperty as any] = value;\r\n          span.innerHTML = originalContent;\r\n\r\n          // Insert the span\r\n          range.insertNode(span);\r\n\r\n          // Create a new range that selects just the content we modified\r\n          const newRange = document.createRange();\r\n          newRange.selectNodeContents(span);\r\n\r\n          // Update the selection\r\n          const selection = window.getSelection();\r\n          if (selection) {\r\n            selection.removeAllRanges();\r\n            selection.addRange(newRange);\r\n\r\n            // Update our saved range\r\n            savedRange = newRange.cloneRange();\r\n          }\r\n\r\n          console.log(\r\n            `Applied ${styleProperty}: ${value} to selection using fallback approach`,\r\n          );\r\n          return true;\r\n        } catch (finalError) {\r\n          console.error(\"All approaches failed:\", finalError);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error applying style to multi-line selection:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get all text nodes in a container\r\n */\r\nfunction getAllTextNodes(container: Node): Node[] {\r\n  const textNodes: Node[] = [];\r\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_TEXT, {\r\n    acceptNode: (node) => {\r\n      // Only accept text nodes that are not empty\r\n      return node.textContent && node.textContent.trim() !== \"\"\r\n        ? NodeFilter.FILTER_ACCEPT\r\n        : NodeFilter.FILTER_REJECT;\r\n    },\r\n  });\r\n\r\n  let node;\r\n  while ((node = walker.nextNode())) {\r\n    textNodes.push(node);\r\n  }\r\n\r\n  return textNodes;\r\n}\r\n\r\n/**\r\n * Process all nodes in a container to apply a style\r\n * This is a more careful implementation that preserves the original DOM structure\r\n */\r\nfunction processNodesForStyling(\r\n  container: Node,\r\n  styleProperty: string,\r\n  value: string,\r\n): void {\r\n  try {\r\n    // Use a different approach based on the node type\r\n    if (container.nodeType === Node.TEXT_NODE) {\r\n      // For text nodes, wrap them in a span with the style only if they have content\r\n      if (container.textContent && container.textContent.trim() !== \"\") {\r\n        try {\r\n          // Create a span with the style\r\n          const span = document.createElement(\"span\");\r\n          span.style[styleProperty as any] = value;\r\n          span.textContent = container.textContent;\r\n\r\n          // Replace the text node with the span\r\n          if (container.parentNode) {\r\n            container.parentNode.replaceChild(span, container);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error processing text node:\", error);\r\n          // If there's an error, leave the node as is\r\n        }\r\n      }\r\n    } else if (container.nodeType === Node.ELEMENT_NODE) {\r\n      // For element nodes\r\n      const element = container as HTMLElement;\r\n\r\n      try {\r\n        // Check if this is a span or other inline element that we can apply style to directly\r\n        const isInlineElement =\r\n          getComputedStyle(element).display === \"inline\" ||\r\n          element.tagName.toLowerCase() === \"span\";\r\n\r\n        if (isInlineElement) {\r\n          // Apply the style directly to inline elements\r\n          element.style[styleProperty as any] = value;\r\n        }\r\n\r\n        // Process all child nodes\r\n        // We need to create a copy of childNodes because it's a live collection\r\n        // and will change as we modify the DOM\r\n        const childNodes = Array.from(element.childNodes);\r\n\r\n        for (const childNode of childNodes) {\r\n          processNodesForStyling(childNode, styleProperty, value);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing element node:\", error);\r\n\r\n        // If there's an error with the element, try to process its children anyway\r\n        try {\r\n          const childNodes = Array.from(element.childNodes);\r\n          for (const childNode of childNodes) {\r\n            processNodesForStyling(childNode, styleProperty, value);\r\n          }\r\n        } catch (childError) {\r\n          console.error(\"Error processing element children:\", childError);\r\n        }\r\n      }\r\n    } else if (container.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      // For document fragments, process all child nodes\r\n      const childNodes = Array.from(container.childNodes);\r\n      for (const childNode of childNodes) {\r\n        processNodesForStyling(childNode, styleProperty, value);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in processNodesForStyling:\", error);\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a style directly to the selected text using a simpler approach\r\n * This is a fallback method when other approaches fail\r\n */\r\nexport function applyStyleDirectly(\r\n  styleProperty: string,\r\n  value: string,\r\n): boolean {\r\n  if (!savedRange || !savedElement) {\r\n    console.error(\"Cannot apply style: No saved selection\");\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      console.error(\"Invalid selection range\");\r\n      return false;\r\n    }\r\n\r\n    // Create a simple span with the style\r\n    const span = document.createElement(\"span\");\r\n    span.style[styleProperty as any] = value;\r\n\r\n    // Use surroundContents which is more reliable than extractContents/insertNode\r\n    try {\r\n      // This might fail if the selection crosses multiple block elements\r\n      range.surroundContents(span);\r\n\r\n      // Create a new range that selects just the content we modified\r\n      const newRange = document.createRange();\r\n      newRange.selectNodeContents(span);\r\n\r\n      // Update the selection\r\n      selection.removeAllRanges();\r\n      selection.addRange(newRange);\r\n\r\n      // Update our saved range\r\n      savedRange = newRange.cloneRange();\r\n\r\n      console.log(\r\n        `Applied ${styleProperty}: ${value} to selection using direct method`,\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error with surroundContents, falling back to execCommand:\",\r\n        error,\r\n      );\r\n\r\n      // Try execCommand as a last resort\r\n      if (styleProperty === \"color\") {\r\n        document.execCommand(\"foreColor\", false, value);\r\n        return true;\r\n      } else if (styleProperty === \"backgroundColor\") {\r\n        document.execCommand(\"backColor\", false, value);\r\n        return true;\r\n      } else if (styleProperty === \"fontSize\") {\r\n        // For fontSize, we need to use a different approach\r\n        document.execCommand(\"fontSize\", false, \"7\");\r\n\r\n        // Find all font elements with size 7 and replace with the actual size\r\n        const fontElements = savedElement.querySelectorAll('font[size=\"7\"]');\r\n        fontElements.forEach((font) => {\r\n          font.removeAttribute(\"size\");\r\n          if (font instanceof HTMLElement) {\r\n            font.style.fontSize = value;\r\n          }\r\n        });\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error applying style directly:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply a style to a text selection using the most direct and reliable approach\r\n * This is a simplified version that focuses on stability\r\n */\r\nexport function directlyApplyStyle(\r\n  styleProperty: string,\r\n  value: string,\r\n): boolean {\r\n  if (!savedRange || !savedElement) {\r\n    console.error(`Cannot apply ${styleProperty}: No saved selection`);\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Focus the element first to ensure we're working with the right context\r\n    savedElement.focus();\r\n\r\n    // Get the current selection\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Clear any existing selection\r\n    selection.removeAllRanges();\r\n\r\n    // Add our saved range\r\n    const range = savedRange.cloneRange();\r\n    selection.addRange(range);\r\n\r\n    // Make sure we have a valid selection\r\n    if (selection.rangeCount === 0 || selection.getRangeAt(0).collapsed) {\r\n      console.error(\"Invalid selection range\");\r\n      return false;\r\n    }\r\n\r\n    // Use the most direct and reliable approach: document.execCommand\r\n    // This is the browser's built-in way to format text and works in most cases\r\n    document.execCommand(\"styleWithCSS\", false, \"true\");\r\n\r\n    // Handle font size differently from other properties\r\n    if (styleProperty === \"fontSize\") {\r\n      // For font size, we'll use a direct span approach instead of execCommand\r\n      console.log(`Applying fontSize: ${value} using direct span approach`);\r\n\r\n      try {\r\n        // Get the current selection\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) return false;\r\n\r\n        // Get the current range\r\n        const range = selection.getRangeAt(0);\r\n\r\n        // Check if this is a multi-line selection\r\n        const isMultiLine = isMultiLineSelection(range);\r\n        console.log(\"Is multi-line selection for font size:\", isMultiLine);\r\n\r\n        if (isMultiLine) {\r\n          // For multi-line selections, we need a different approach\r\n          return applyFontSizeToMultiLineSelection(range, value);\r\n        }\r\n\r\n        // For single-line selections, use the direct span approach\r\n        // Create a document fragment from the selection\r\n        const fragment = range.extractContents();\r\n\r\n        // Create a span with the specified font size\r\n        const span = document.createElement(\"span\");\r\n        span.style.fontSize = value;\r\n\r\n        // Add the fragment to the span\r\n        span.appendChild(fragment);\r\n\r\n        // Insert the span at the current position\r\n        range.insertNode(span);\r\n\r\n        // Create a new range that selects the span content\r\n        const newRange = document.createRange();\r\n        newRange.selectNodeContents(span);\r\n\r\n        // Update the selection\r\n        selection.removeAllRanges();\r\n        selection.addRange(newRange);\r\n\r\n        // Update our saved range\r\n        savedRange = newRange.cloneRange();\r\n\r\n        console.log(`Applied fontSize: ${value} using direct span approach`);\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\r\n          \"Error applying font size with direct span approach:\",\r\n          error,\r\n        );\r\n\r\n        // Fall back to execCommand as a last resort\r\n        try {\r\n          document.execCommand(\"styleWithCSS\", false, \"true\");\r\n          document.execCommand(\"fontSize\", false, \"7\");\r\n\r\n          // Find all font elements with size 7 and replace with the actual size\r\n          const fontElements = savedElement.querySelectorAll('font[size=\"7\"]');\r\n          console.log(`Found ${fontElements.length} font elements to update`);\r\n\r\n          fontElements.forEach((font) => {\r\n            // Create a span with the specified font size\r\n            const span = document.createElement(\"span\");\r\n            span.style.fontSize = value;\r\n\r\n            // Move all children from the font element to the span\r\n            while (font.firstChild) {\r\n              span.appendChild(font.firstChild);\r\n            }\r\n\r\n            // Replace the font element with the span\r\n            if (font.parentNode) {\r\n              font.parentNode.replaceChild(span, font);\r\n            }\r\n          });\r\n\r\n          return true;\r\n        } catch (fallbackError) {\r\n          console.error(\r\n            \"Error applying font size with fallback approach:\",\r\n            fallbackError,\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Handle heading style\r\n    if (styleProperty === \"heading\") {\r\n      console.log(`Applying heading level ${value} using direct approach`);\r\n\r\n      try {\r\n        // Get the current selection\r\n        const selection = window.getSelection();\r\n        if (!selection || selection.rangeCount === 0) return false;\r\n\r\n        // Get the current range\r\n        const range = selection.getRangeAt(0);\r\n\r\n        // Extract the selected content\r\n        const fragment = range.extractContents();\r\n\r\n        // Create the appropriate heading element (h1, h2, etc.)\r\n        const headingLevel = parseInt(value);\r\n        if (isNaN(headingLevel) || headingLevel < 1 || headingLevel > 6) {\r\n          console.error(\"Invalid heading level:\", value);\r\n          return false;\r\n        }\r\n\r\n        // Create the heading element\r\n        const headingTag = `h${headingLevel}`;\r\n        const headingElement = document.createElement(headingTag);\r\n\r\n        // Set appropriate styles based on heading level\r\n        switch (headingLevel) {\r\n        case 1: // H1\r\n          headingElement.style.fontSize = \"32px\";\r\n          headingElement.style.fontWeight = \"bold\";\r\n          headingElement.style.marginBottom = \"16px\";\r\n          headingElement.style.color = \"#333\";\r\n          break;\r\n        case 2: // H2\r\n          headingElement.style.fontSize = \"28px\";\r\n          headingElement.style.fontWeight = \"bold\";\r\n          headingElement.style.marginBottom = \"14px\";\r\n          headingElement.style.color = \"#444\";\r\n          break;\r\n        case 3: // H3\r\n          headingElement.style.fontSize = \"24px\";\r\n          headingElement.style.fontWeight = \"bold\";\r\n          headingElement.style.marginBottom = \"12px\";\r\n          headingElement.style.color = \"#555\";\r\n          break;\r\n        default: // H4-H6\r\n          headingElement.style.fontSize = 28 - headingLevel * 2 + \"px\";\r\n          headingElement.style.fontWeight = \"bold\";\r\n          headingElement.style.marginBottom = \"10px\";\r\n          break;\r\n        }\r\n\r\n        // Add the fragment to the heading element\r\n        headingElement.appendChild(fragment);\r\n\r\n        // Insert the heading element at the current position\r\n        range.insertNode(headingElement);\r\n\r\n        // Create a new range that selects the heading content\r\n        const newRange = document.createRange();\r\n        newRange.selectNodeContents(headingElement);\r\n\r\n        // Update the selection\r\n        selection.removeAllRanges();\r\n        selection.addRange(newRange);\r\n\r\n        // Update our saved range\r\n        savedRange = newRange.cloneRange();\r\n\r\n        console.log(`Applied heading level ${value} using direct approach`);\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Error applying heading with direct approach:\", error);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // For other properties, use execCommand\r\n    let command = \"\";\r\n    const commandValue = value;\r\n\r\n    if (styleProperty === \"color\") {\r\n      command = \"foreColor\";\r\n    } else if (styleProperty === \"backgroundColor\") {\r\n      command = \"backColor\";\r\n    } else {\r\n      // For other properties, try to use the property name directly\r\n      command = styleProperty;\r\n    }\r\n\r\n    console.log(\r\n      `Applying ${styleProperty} with value ${value} using execCommand ${command}`,\r\n    );\r\n    const result = document.execCommand(command, false, commandValue);\r\n\r\n    // Save the selection again to preserve it for future operations\r\n    saveSelection();\r\n\r\n    console.log(`Applied ${styleProperty}: ${value} to selection`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(`Error applying ${styleProperty}:`, error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Apply font size to a multi-line selection\r\n * This function handles the special case of multi-line selections for font size\r\n */\r\nfunction applyFontSizeToMultiLineSelection(\r\n  range: Range,\r\n  fontSize: string,\r\n): boolean {\r\n  try {\r\n    console.log(\"Applying font size to multi-line selection:\", fontSize);\r\n\r\n    // Clone the range to avoid modifying the original\r\n    const clonedRange = range.cloneRange();\r\n\r\n    // Get the selected content as HTML\r\n    const fragment = clonedRange.cloneContents();\r\n\r\n    // Create a temporary div to hold the content\r\n    const tempDiv = document.createElement(\"div\");\r\n    tempDiv.appendChild(fragment);\r\n\r\n    // Find all text nodes in the selection\r\n    const textNodes = getAllTextNodesInElement(tempDiv);\r\n    console.log(`Found ${textNodes.length} text nodes in multi-line selection`);\r\n\r\n    // Apply font size to each text node\r\n    textNodes.forEach((node) => {\r\n      if (node.textContent && node.textContent.trim() !== \"\") {\r\n        // Create a span with the specified font size\r\n        const span = document.createElement(\"span\");\r\n        span.style.fontSize = fontSize;\r\n        span.textContent = node.textContent;\r\n\r\n        // Replace the text node with the span\r\n        if (node.parentNode) {\r\n          node.parentNode.replaceChild(span, node);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Replace the original content with the styled content\r\n    range.deleteContents();\r\n\r\n    // Insert the styled content\r\n    while (tempDiv.firstChild) {\r\n      range.insertNode(tempDiv.firstChild);\r\n      range.collapse(false); // Move to the end of the inserted node\r\n    }\r\n\r\n    // Create a new range that encompasses all the modified content\r\n    const newRange = document.createRange();\r\n    newRange.setStart(range.startContainer, range.startOffset);\r\n    newRange.setEnd(range.endContainer, range.endOffset);\r\n\r\n    // Update the selection\r\n    const selection = window.getSelection();\r\n    if (selection) {\r\n      selection.removeAllRanges();\r\n      selection.addRange(newRange);\r\n\r\n      // Update our saved range\r\n      savedRange = newRange.cloneRange();\r\n    }\r\n\r\n    console.log(\"Successfully applied font size to multi-line selection\");\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error applying font size to multi-line selection:\", error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get all text nodes in an element\r\n */\r\nfunction getAllTextNodesInElement(element: Node): Node[] {\r\n  const textNodes: Node[] = [];\r\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, {\r\n    acceptNode: (node) => {\r\n      // Only accept text nodes that are not empty\r\n      return node.textContent && node.textContent.trim() !== \"\"\r\n        ? NodeFilter.FILTER_ACCEPT\r\n        : NodeFilter.FILTER_REJECT;\r\n    },\r\n  });\r\n\r\n  let node;\r\n  while ((node = walker.nextNode())) {\r\n    textNodes.push(node);\r\n  }\r\n\r\n  return textNodes;\r\n}\r\n\r\n// Set up global event listeners to track selection\r\nexport function initSelectionTracking(): void {\r\n  document.addEventListener(\"selectionchange\", () => {\r\n    // Don't interfere with input fields\r\n    if (isInputActive()) return;\r\n\r\n    const selection = window.getSelection();\r\n    if (!selection || selection.rangeCount === 0 || selection.isCollapsed) {\r\n      return;\r\n    }\r\n\r\n    // Save the selection when it changes\r\n    saveSelection();\r\n  });\r\n\r\n  document.addEventListener(\"mouseup\", () => {\r\n    // Don't interfere with input fields\r\n    if (isInputActive()) return;\r\n\r\n    const selection = window.getSelection();\r\n    if (!selection || selection.rangeCount === 0 || selection.isCollapsed) {\r\n      return;\r\n    }\r\n\r\n    // Save the selection after mouse up (when user finishes selecting)\r\n    saveSelection();\r\n  });\r\n\r\n  document.addEventListener(\"keyup\", (event) => {\r\n    // Don't interfere with input fields\r\n    if (isInputActive()) return;\r\n\r\n    // Only track selection changes for navigation keys\r\n    if (\r\n      event.key.includes(\"Arrow\") ||\r\n      event.key === \"Home\" ||\r\n      event.key === \"End\" ||\r\n      event.key === \"PageUp\" ||\r\n      event.key === \"PageDown\" ||\r\n      event.key === \"Shift\"\r\n    ) {\r\n      const selection = window.getSelection();\r\n      if (!selection || selection.rangeCount === 0 || selection.isCollapsed) {\r\n        return;\r\n      }\r\n\r\n      // Save the selection after key navigation\r\n      saveSelection();\r\n    }\r\n  });\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\textFormatting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\utils\\textSelection.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":139,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":139,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":139,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":139,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Utility functions for working with text selection\r\n */\r\n\r\n/**\r\n * Check if there is text currently selected in the document\r\n */\r\nexport function hasSelectedText(): boolean {\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount) return false;\r\n\r\n  const range = selection.getRangeAt(0);\r\n  return !range.collapsed;\r\n}\r\n\r\n/**\r\n * Apply a style to the currently selected text\r\n * @param styleProperty The style property to apply (e.g., 'bold', 'italic', 'foreColor')\r\n * @param value The value to apply (e.g., true, '#ff0000')\r\n * @returns true if the style was applied, false otherwise\r\n */\r\nexport function applyStyleToSelectedText(\r\n  styleProperty: string,\r\n  value: string | boolean,\r\n): boolean {\r\n  console.log(`Applying style: ${styleProperty} = ${value} to selected text`);\r\n\r\n  // Save the current selection state before applying styles\r\n  const selectionState = saveSelectionState();\r\n  if (!selectionState) {\r\n    console.error(\"No selection found or could not save selection state\");\r\n    return false;\r\n  }\r\n\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount) {\r\n    console.error(\"No selection found\");\r\n    return false;\r\n  }\r\n\r\n  const range = selection.getRangeAt(0);\r\n  console.log(\"Selection range:\", range.toString());\r\n\r\n  // If no text is selected, return false\r\n  if (range.collapsed) {\r\n    console.error(\"Range is collapsed (no text selected)\");\r\n    return false;\r\n  }\r\n\r\n  // Apply the style to the selected text\r\n  let command = \"\";\r\n  let commandValue: string | null = null;\r\n\r\n  switch (styleProperty) {\r\n  case \"bold\":\r\n    command = \"bold\";\r\n    break;\r\n  case \"italic\":\r\n    command = \"italic\";\r\n    break;\r\n  case \"underline\":\r\n    command = \"underline\";\r\n    break;\r\n  case \"fontName\":\r\n    command = \"fontName\";\r\n    commandValue = value as string;\r\n    break;\r\n  case \"fontSize\":\r\n    command = \"fontSize\";\r\n    commandValue = value + \"px\";\r\n    break;\r\n  case \"foreColor\":\r\n    command = \"foreColor\";\r\n    commandValue = value as string;\r\n    break;\r\n  case \"backColor\":\r\n    command = \"backColor\";\r\n    commandValue = value as string;\r\n    break;\r\n  case \"justifyLeft\":\r\n  case \"justifyCenter\":\r\n  case \"justifyRight\":\r\n  case \"justifyFull\":\r\n    command = styleProperty;\r\n    break;\r\n  default:\r\n    console.log(`Using custom span for style: ${styleProperty}`);\r\n    try {\r\n      // For unsupported commands, wrap in a span with inline style\r\n      const span = document.createElement(\"span\");\r\n      span.style.setProperty(styleProperty, value as string);\r\n\r\n      // Extract the selected content\r\n      const fragment = range.extractContents();\r\n      span.appendChild(fragment);\r\n\r\n      // Insert the styled span\r\n      range.insertNode(span);\r\n\r\n      // Update selection to include the new span\r\n      selection.removeAllRanges();\r\n      const newRange = document.createRange();\r\n      newRange.selectNodeContents(span);\r\n      selection.addRange(newRange);\r\n\r\n      console.log(\"Style applied successfully with span\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error applying custom style:\", error);\r\n      // Try to restore the original selection\r\n      restoreSelectionState(selectionState);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // For supported commands, use execCommand\r\n  if (command) {\r\n    try {\r\n      console.log(`Using execCommand: ${command} with value: ${commandValue}`);\r\n      document.execCommand(command, false, commandValue || undefined);\r\n      console.log(\"Style applied successfully with execCommand\");\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error applying style with execCommand:\", error);\r\n      // Try to restore the original selection\r\n      restoreSelectionState(selectionState);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  console.error(\"Failed to apply style\");\r\n  return false;\r\n}\r\n\r\n/**\r\n * Save the current selection state\r\n * @returns A selection state object that can be restored later\r\n */\r\nexport function saveSelectionState() {\r\n  const selection = window.getSelection();\r\n  if (!selection || !selection.rangeCount) return null;\r\n\r\n  const range = selection.getRangeAt(0);\r\n\r\n  // Store more information about the selection to help with restoration\r\n  return {\r\n    range: range.cloneRange(),\r\n    text: selection.toString(),\r\n    startContainer: range.startContainer,\r\n    startOffset: range.startOffset,\r\n    endContainer: range.endContainer,\r\n    endOffset: range.endOffset,\r\n  };\r\n}\r\n\r\n/**\r\n * Restore a previously saved selection state\r\n * @param state The selection state to restore\r\n * @returns true if the selection was restored, false otherwise\r\n */\r\nexport function restoreSelectionState(\r\n  state: {\r\n    range: Range;\r\n    text: string;\r\n    startContainer: Node;\r\n    startOffset: number;\r\n    endContainer: Node;\r\n    endOffset: number;\r\n  } | null,\r\n): boolean {\r\n  if (!state || !state.range) return false;\r\n\r\n  try {\r\n    const selection = window.getSelection();\r\n    if (!selection) return false;\r\n\r\n    // Try to create a new range based on the saved start and end points\r\n    try {\r\n      const newRange = document.createRange();\r\n      newRange.setStart(state.startContainer, state.startOffset);\r\n      newRange.setEnd(state.endContainer, state.endOffset);\r\n\r\n      selection.removeAllRanges();\r\n      selection.addRange(newRange);\r\n      return true;\r\n    } catch (e) {\r\n      console.warn(\r\n        \"Failed to restore selection using containers, falling back to range clone\",\r\n        e,\r\n      );\r\n      // Fall back to the cloned range if the containers are no longer valid\r\n      selection.removeAllRanges();\r\n      selection.addRange(state.range.cloneRange());\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error restoring selection:\", error);\r\n    return false;\r\n  }\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\views\\DashboardView.vue","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":178,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":178,"endColumn":41},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":212,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":212,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7705,7708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7705,7708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":279,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8581,8584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8581,8584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":297,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":297,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":301,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":301,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":305,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":305,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":310,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":310,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":315,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":315,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<template>\r\n  <div class=\"dashboard\">\r\n    <v-container fluid>\r\n      <v-row>\r\n        <v-col cols=\"12\">\r\n          <v-card class=\"mb-6\">\r\n            <v-card-text>\r\n              <div class=\"d-flex justify-space-between align-center\">\r\n                <div>\r\n                  <h1 class=\"text-h4 mb-4\">Your Documents</h1>\r\n                  <p class=\"text-subtitle-1\">\r\n                    Create or edit your proposals and documents\r\n                  </p>\r\n                </div>\r\n                <v-btn\r\n                  icon\r\n                  color=\"primary\"\r\n                  :loading=\"isLoading\"\r\n                  :disabled=\"isLoading\"\r\n                  title=\"Refresh documents\"\r\n                  @click=\"refreshDocuments\"\r\n                >\r\n                  <v-icon>mdi-refresh</v-icon>\r\n                </v-btn>\r\n              </div>\r\n            </v-card-text>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n\r\n      <v-row>\r\n        <v-col cols=\"12\"\r\n               sm=\"6\"\r\n               md=\"4\"\r\n               lg=\"3\"\r\n        >\r\n          <v-card\r\n            class=\"new-document-card\"\r\n            height=\"200\"\r\n            hover\r\n            @click=\"createNewDocument\"\r\n          >\r\n            <v-card-text\r\n              class=\"d-flex flex-column align-center justify-center h-100\"\r\n            >\r\n              <v-icon size=\"48\" color=\"primary\">mdi-plus</v-icon>\r\n              <span class=\"text-h6 mt-2\">New Document</span>\r\n            </v-card-text>\r\n          </v-card>\r\n        </v-col>\r\n\r\n        <v-col\r\n          v-for=\"doc in recentDocuments\"\r\n          :key=\"doc.id\"\r\n          cols=\"12\"\r\n          sm=\"6\"\r\n          md=\"4\"\r\n          lg=\"3\"\r\n        >\r\n          <v-card\r\n            height=\"200\"\r\n            hover\r\n            class=\"document-card\"\r\n            @click=\"openDocument(doc.id)\"\r\n          >\r\n            <v-card-text class=\"pa-0 position-relative h-100\">\r\n              <div class=\"document-preview\">\r\n                <img :src=\"doc.thumbnail\" alt=\"Document preview\" />\r\n              </div>\r\n              <div class=\"document-overlay pa-4\">\r\n                <h3 class=\"text-h6\">{{ doc.title }}</h3>\r\n                <p class=\"text-caption\">Last edited: {{ doc.lastEdited }}</p>\r\n              </div>\r\n            </v-card-text>\r\n            <v-card-actions>\r\n              <v-btn\r\n                icon\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                @click.stop=\"openDocument(doc.id)\"\r\n              >\r\n                <v-icon>mdi-pencil</v-icon>\r\n              </v-btn>\r\n              <v-btn icon size=\"small\" @click.stop=\"duplicateDocument(doc.id)\">\r\n                <v-icon>mdi-content-duplicate</v-icon>\r\n              </v-btn>\r\n              <v-spacer></v-spacer>\r\n              <v-btn\r\n                icon\r\n                size=\"small\"\r\n                color=\"error\"\r\n                @click.stop=\"confirmDelete(doc.id)\"\r\n              >\r\n                <v-icon>mdi-delete</v-icon>\r\n              </v-btn>\r\n            </v-card-actions>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n\r\n    <!-- Delete confirmation dialog -->\r\n    <v-dialog v-model=\"deleteDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>Delete Document</v-card-title>\r\n        <v-card-text>\r\n          Are you sure you want to delete this document? This action cannot be\r\n          undone.\r\n          <div v-if=\"documentToDelete\" class=\"mt-2\">\r\n            <strong>Document:</strong> {{ getDocumentTitle(documentToDelete) }}\r\n          </div>\r\n          <div v-if=\"isDeleting\" class=\"mt-4\">\r\n            <v-progress-linear\r\n              indeterminate\r\n              color=\"primary\"\r\n            ></v-progress-linear>\r\n            <div class=\"text-center mt-2\">\r\n              Deleting document and associated resources...\r\n            </div>\r\n          </div>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text\r\n                 :disabled=\"isDeleting\"\r\n                 @click=\"deleteDialog = false\"\r\n          >Cancel</v-btn>\r\n          <v-btn\r\n            color=\"error\"\r\n            :loading=\"isDeleting\"\r\n            :disabled=\"isDeleting\"\r\n            @click=\"deleteDocument\"\r\n          >\r\n            Delete\r\n          </v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- Snackbar for notifications -->\r\n    <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" :timeout=\"3000\">\r\n      {{ snackbar.text }}\r\n      <template v-slot:actions>\r\n        <v-btn variant=\"text\" @click=\"snackbar.show = false\">Close</v-btn>\r\n      </template>\r\n    </v-snackbar>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { useDocumentStore } from \"../stores/documentStore\";\r\n\r\ninterface DocumentDisplay {\r\n  id: string;\r\n  title: string;\r\n  lastEdited: string;\r\n  thumbnail: string;\r\n}\r\n\r\nconst router = useRouter();\r\nconst documentStore = useDocumentStore();\r\nconst recentDocuments = ref<DocumentDisplay[]>([]);\r\nconst isLoading = ref(true);\r\nconst isDeleting = ref(false);\r\nconst deleteDialog = ref(false);\r\nconst documentToDelete = ref<string | null>(null);\r\n\r\n// Snackbar for notifications\r\nconst snackbar = ref({\r\n  show: false,\r\n  text: \"\",\r\n  color: \"success\",\r\n});\r\n\r\n// Function to load and transform documents\r\nasync function loadAndTransformDocuments() {\r\n  isLoading.value = true;\r\n\r\n  try {\r\n    await documentStore.loadDocuments();\r\n\r\n    // Transform documents for display\r\n    recentDocuments.value = documentStore.documents.map((doc) => ({\r\n      id: doc.id,\r\n      title: doc.title,\r\n      lastEdited: formatDate(doc.updatedAt),\r\n      thumbnail: getDocumentThumbnail(doc),\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"Error loading documents:\", error);\r\n\r\n    // Show error notification\r\n    snackbar.value = {\r\n      show: true,\r\n      text: \"Failed to load documents. Please refresh the page.\",\r\n      color: \"error\",\r\n    };\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n}\r\n\r\n// Function to get document title by ID\r\nfunction getDocumentTitle(id: string): string {\r\n  const doc = recentDocuments.value.find((doc) => doc.id === id);\r\n  return doc ? doc.title : \"Unknown Document\";\r\n}\r\n\r\n// Function to refresh documents\r\nasync function refreshDocuments() {\r\n  try {\r\n    await loadAndTransformDocuments();\r\n\r\n    // Show success notification\r\n    snackbar.value = {\r\n      show: true,\r\n      text: \"Documents refreshed successfully\",\r\n      color: \"success\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error refreshing documents:\", error);\r\n  }\r\n}\r\n\r\n// Load documents when component mounts\r\nonMounted(loadAndTransformDocuments);\r\n\r\n// Format date for display\r\nfunction formatDate(dateString: string | undefined): string {\r\n  if (!dateString) return \"Unknown date\";\r\n\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const yesterday = new Date(now);\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n\r\n  // Check if date is today\r\n  if (date.toDateString() === now.toDateString()) {\r\n    return `Today, ${date.toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    })}`;\r\n  }\r\n\r\n  // Check if date is yesterday\r\n  if (date.toDateString() === yesterday.toDateString()) {\r\n    return `Yesterday, ${date.toLocaleTimeString([], {\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n    })}`;\r\n  }\r\n\r\n  // Otherwise return formatted date\r\n  return date.toLocaleDateString([], {\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n  });\r\n}\r\n\r\n// Get a thumbnail for the document (placeholder for now)\r\nfunction getDocumentThumbnail(doc: any): string {\r\n  // In a real app, you might generate thumbnails from the document content\r\n  // For now, use placeholder images\r\n  const placeholders = [\r\n    \"https://images.pexels.com/photos/3760514/pexels-photo-3760514.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\",\r\n    \"https://images.pexels.com/photos/3182812/pexels-photo-3182812.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\",\r\n    \"https://images.pexels.com/photos/1779487/pexels-photo-1779487.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\",\r\n  ];\r\n\r\n  // Check if the document has a thumbnail image in its sections\r\n  if (doc.sections && doc.sections.length > 0) {\r\n    for (const section of doc.sections) {\r\n      if (section.elements && section.elements.length > 0) {\r\n        // Look for the first image element to use as thumbnail\r\n        const imageElement = section.elements.find(\r\n          (el: any) => el.type === \"image\" && el.content,\r\n        );\r\n        if (imageElement && imageElement.content) {\r\n          // If the image path is from our server, prepend the API URL\r\n          if (imageElement.content.startsWith(\"/images/\")) {\r\n            return `http://localhost:3000${imageElement.content}`;\r\n          }\r\n          return imageElement.content;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If no image found, use a placeholder based on document ID\r\n  const index = parseInt(doc.id.replace(/\\D/g, \"\"), 10) % placeholders.length;\r\n  return placeholders[index] || placeholders[0];\r\n}\r\n\r\nfunction createNewDocument() {\r\n  router.push(\"/editor\");\r\n}\r\n\r\nfunction openDocument(id: string) {\r\n  router.push(`/editor/${id}`);\r\n}\r\n\r\nfunction duplicateDocument(id: string) {\r\n  // Clone document logic would go here\r\n  console.log(\"Duplicate document:\", id);\r\n}\r\n\r\nfunction confirmDelete(id: string) {\r\n  documentToDelete.value = id;\r\n  deleteDialog.value = true;\r\n}\r\n\r\nasync function deleteDocument() {\r\n  if (!documentToDelete.value) {\r\n    return;\r\n  }\r\n\r\n  isDeleting.value = true;\r\n\r\n  try {\r\n    // Get the document title for the notification\r\n    const docTitle = getDocumentTitle(documentToDelete.value);\r\n\r\n    // Delete the document\r\n    await documentStore.deleteDocument(documentToDelete.value);\r\n\r\n    // Reload documents to ensure the list is up-to-date\r\n    await loadAndTransformDocuments();\r\n\r\n    // Show success notification\r\n    snackbar.value = {\r\n      show: true,\r\n      text: `\"${docTitle}\" has been deleted successfully.`,\r\n      color: \"success\",\r\n    };\r\n\r\n    // Close the dialog\r\n    deleteDialog.value = false;\r\n    documentToDelete.value = null;\r\n\r\n    // Navigate to the dashboard (first page)\r\n    // Since we're already on the dashboard, we'll just ensure we're at the root path\r\n    if (router.currentRoute.value.path !== \"/\") {\r\n      router.push(\"/\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error deleting document:\", error);\r\n\r\n    // Show error notification\r\n    snackbar.value = {\r\n      show: true,\r\n      text: \"Failed to delete document. Please try again.\",\r\n      color: \"error\",\r\n    };\r\n  } finally {\r\n    isDeleting.value = false;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.dashboard {\r\n  padding: 24px;\r\n  background-color: var(--surface);\r\n  min-height: 100vh;\r\n}\r\n\r\n.new-document-card {\r\n  border: 2px dashed var(--border);\r\n  background-color: rgba(12, 132, 254, 0.03);\r\n  transition: all 0.2s ease;\r\n\r\n  &:hover {\r\n    border-color: var(--primary);\r\n    background-color: rgba(12, 132, 254, 0.08);\r\n    transform: translateY(-4px);\r\n  }\r\n}\r\n\r\n.document-card {\r\n  transition: all 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n  }\r\n\r\n  .document-preview {\r\n    height: 140px;\r\n    overflow: hidden;\r\n\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n\r\n  .document-overlay {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background: linear-gradient(\r\n      to top,\r\n      rgba(0, 0, 0, 0.7) 0%,\r\n      rgba(0, 0, 0, 0.2) 70%,\r\n      rgba(0, 0, 0, 0) 100%\r\n    );\r\n    color: white;\r\n  }\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\views\\EditorView.vue","messages":[{"ruleId":"vue/attributes-order","severity":1,"message":"Attribute \"ref\" should go before \":isDrawing\".","line":50,"column":13,"nodeType":"VAttribute","messageId":"expectedOrder","endLine":50,"endColumn":35,"fix":{"range":[1594,1680],"text":"ref=\"documentPageRefs\"\r\n            :isDrawing=\"isDrawing && currentSection === index\""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7337,7340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7337,7340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":332,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":332,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":339,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":339,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":346,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":346,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":351,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":351,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":356,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":356,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":360,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":360,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":369,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":369,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":378,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":378,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":393,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":393,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":408,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":408,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":426,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":426,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":449,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":449,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":467,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":467,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":572,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":572,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":581,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":581,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":620,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":620,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":620,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":620,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19016,19019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19016,19019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":719,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":719,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":769,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":769,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":796,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":796,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":822,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":822,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":847,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":847,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":877,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":877,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":901,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":901,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":928,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":928,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":958,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":958,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":998,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":998,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1038,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1038,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1061,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1061,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1085,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1085,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1090,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1090,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1096,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1096,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1159,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1159,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1163,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1163,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1179,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1179,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1277,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1277,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1292,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1292,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1340,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1340,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1355,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1355,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1361,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1361,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1366,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1366,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":1371,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":1371,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":1,"source":"<template>\r\n  <div class=\"document-editor\">\r\n    <EditorToolbar\r\n      :activeTools=\"activeTools\"\r\n      :showGrid=\"showGrid\"\r\n      :isSaving=\"isSaving\"\r\n      :saveSuccess=\"saveSuccess\"\r\n      :saveError=\"saveError\"\r\n      :saveMessage=\"saveMessage\"\r\n      :documentTitle=\"document.title\"\r\n      :documentId=\"document.id\"\r\n      :paperSize=\"document.paperSize\"\r\n      :orientation=\"document.orientation\"\r\n      :isExportingPdf=\"isExportingPdf\"\r\n      @tool-clicked=\"handleToolClick\"\r\n      @save=\"saveDocument\"\r\n      @navigate-to-dashboard=\"navigateToDashboard\"\r\n      @delete-document=\"showDeleteConfirmation\"\r\n    />\r\n\r\n    <div class=\"editor-container\">\r\n      <SidebarNavigation\r\n        :sections=\"document.sections\"\r\n        :currentSection=\"currentSection\"\r\n        @section-selected=\"selectSection\"\r\n        @section-added=\"addSection\"\r\n        @section-updated=\"updateSection\"\r\n        @section-deleted=\"deleteSection\"\r\n      />\r\n\r\n      <div ref=\"editorContainer\" class=\"main-editor\">\r\n        <div\r\n          class=\"editor-content\"\r\n          :style=\"editorContentStyle\"\r\n          @mousedown=\"startDrawing\"\r\n          @mousemove=\"updateDrawing\"\r\n          @mouseup=\"finishDrawing\"\r\n          @mouseleave=\"cancelDrawing\"\r\n        >\r\n          <DocumentPage\r\n            v-for=\"(section, index) in document?.sections &&\r\n              document?.sections.length > 0\r\n              ? document.sections\r\n              : []\"\r\n            :key=\"section.id\"\r\n            :section=\"section\"\r\n            :isActive=\"currentSection === index\"\r\n            :showGrid=\"showGrid\"\r\n            :isDrawing=\"isDrawing && currentSection === index\"\r\n            ref=\"documentPageRefs\"\r\n            :drawingRectStyle=\"drawingRectangleStyle\"\r\n            :paperSize=\"document.paperSize\"\r\n            :orientation=\"document.orientation\"\r\n            @element-selected=\"selectElement\"\r\n            @element-updated=\"updateElement\"\r\n            @move-element-up=\"moveElementUp\"\r\n            @move-element-down=\"moveElementDown\"\r\n            @move-element-to-top=\"moveElementToTop\"\r\n            @move-element-to-bottom=\"moveElementToBottom\"\r\n            @toggle-grid=\"toggleGrid\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"selectedElement || showLayerPanel\" class=\"right-panel\">\r\n        <v-tabs v-model=\"activeTab\">\r\n          <v-tab value=\"properties\">Properties</v-tab>\r\n          <v-tab value=\"layers\">Layers</v-tab>\r\n        </v-tabs>\r\n\r\n        <div class=\"tab-content\">\r\n          <PropertiesPanel\r\n            v-if=\"selectedElement && activeTab === 'properties'\"\r\n            :selectedElement=\"selectedElement\"\r\n            @update:element=\"updateElement\"\r\n            @delete-element=\"deleteElement\"\r\n            @duplicate-element=\"duplicateElement\"\r\n            @close=\"selectedElement = null\"\r\n          />\r\n\r\n          <LayerControlPanel\r\n            v-if=\"activeTab === 'layers'\"\r\n            :elements=\"currentSectionElements\"\r\n            :selectedElement=\"selectedElement\"\r\n            @element-selected=\"selectElement\"\r\n            @move-up=\"moveElementUp\"\r\n            @move-down=\"moveElementDown\"\r\n            @move-to-top=\"moveElementToTop\"\r\n            @move-to-bottom=\"moveElementToBottom\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <PreviewDialog v-model=\"showPreview\" :document=\"document\" />\r\n\r\n    <!-- Document Size Dialog -->\r\n    <DocumentSizeDialog\r\n      v-model=\"showDocumentSizeDialog\"\r\n      :paperSize=\"document.paperSize\"\r\n      :orientation=\"document.orientation\"\r\n      @update:paperSize=\"updatePaperSize\"\r\n      @update:orientation=\"updateOrientation\"\r\n    />\r\n\r\n    <!-- Add title dialog -->\r\n    <v-dialog v-model=\"showTitleDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>Document Title</v-card-title>\r\n        <v-card-text>\r\n          <v-text-field\r\n            v-model=\"documentTitle\"\r\n            label=\"Enter document title\"\r\n            :error-messages=\"titleError\"\r\n            @keyup.enter=\"confirmSaveWithTitle\"\r\n          ></v-text-field>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text @click=\"cancelSave\">Cancel</v-btn>\r\n          <v-btn color=\"primary\" @click=\"confirmSaveWithTitle\">Save</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- Delete confirmation dialog -->\r\n    <v-dialog v-model=\"showDeleteDialog\" max-width=\"400\">\r\n      <v-card>\r\n        <v-card-title>Delete Document</v-card-title>\r\n        <v-card-text>\r\n          Are you sure you want to delete this document? This action cannot be\r\n          undone.\r\n          <div v-if=\"isDeleting\" class=\"mt-4\">\r\n            <v-progress-linear\r\n              indeterminate\r\n              color=\"primary\"\r\n            ></v-progress-linear>\r\n            <div class=\"text-center mt-2\">\r\n              Deleting document and associated resources...\r\n            </div>\r\n          </div>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-spacer></v-spacer>\r\n          <v-btn text\n                 :disabled=\"isDeleting\"\n                 @click=\"cancelDelete\"\n          >Cancel</v-btn>\r\n          <v-btn\r\n            color=\"error\"\r\n            :loading=\"isDeleting\"\r\n            :disabled=\"isDeleting\"\r\n            @click=\"confirmDelete\"\r\n          >\r\n            Delete\r\n          </v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n\r\n    <!-- Snackbar for notifications -->\r\n    <v-snackbar v-model=\"snackbar.show\" :color=\"snackbar.color\" :timeout=\"3000\">\r\n      {{ snackbar.text }}\r\n      <template v-slot:actions>\r\n        <v-btn variant=\"text\" @click=\"snackbar.show = false\">Close</v-btn>\r\n      </template>\r\n    </v-snackbar>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport {\r\n  ref,\r\n  computed,\r\n  onMounted,\r\n  reactive,\r\n  watch,\r\n  onBeforeUnmount,\r\n} from \"vue\";\r\nimport { useRoute, useRouter } from \"vue-router\";\r\nimport EditorToolbar from \"../components/editor/EditorToolbar.vue\";\r\nimport SidebarNavigation from \"../components/editor/SidebarNavigation.vue\";\r\nimport DocumentPage from \"../components/editor/DocumentPage.vue\";\r\nimport PropertiesPanel from \"../components/editor/PropertiesPanel.vue\";\r\nimport LayerControlPanel from \"../components/editor/LayerControlPanel.vue\";\r\nimport PreviewDialog from \"../components/editor/PreviewDialog.vue\";\r\nimport DocumentSizeDialog from \"../components/editor/DocumentSizeDialog.vue\";\r\nimport { directExportToPdf } from \"../services/pdfExportService\";\r\nimport { useDocumentStore } from \"../stores/documentStore\";\r\nimport { useHistoryStore } from \"../stores/historyStore\";\r\nimport { Section, DocumentElement, Document } from \"../types/document\";\r\n\r\nconst route = useRoute();\r\nconst documentStore = useDocumentStore();\r\nconst historyStore = useHistoryStore();\r\nconst documentId = route.params.id as string | undefined;\r\nconst router = useRouter();\r\n\r\nconst document = reactive<Document>({\r\n  id: documentId || \"new-doc-\" + Date.now(),\r\n  title: \"Untitled Document\",\r\n  sections: [],\r\n  paperSize: \"Letter\", // Default paper size\r\n  orientation: \"portrait\", // Default orientation\r\n});\r\n\r\nconst currentSection = ref(0);\r\nconst selectedElement = ref<DocumentElement | null>(null);\r\nconst activeTools = ref<string[]>([]);\r\nconst editorContainer = ref<HTMLElement | null>(null);\r\nconst documentPageRefs = ref<any[]>([]);\r\nconst showGrid = ref(true); // Show grid by default\r\nconst zoom = ref(1);\r\nconst showPreview = ref(false);\r\nconst showDocumentSizeDialog = ref(false);\r\nconst isExportingPdf = ref(false);\r\nconst showLayerPanel = ref(true); // Always show layer panel\r\nconst activeTab = ref(\"properties\"); // Default to properties tab\r\n// isLoadingDocument is already defined below\r\n\r\n// Delete dialog state\r\nconst showDeleteDialog = ref(false);\r\nconst isDeleting = ref(false);\r\n\r\n// Snackbar for notifications\r\nconst snackbar = ref({\r\n  show: false,\r\n  text: \"\",\r\n  color: \"success\",\r\n});\r\n\r\n// Drawing state for creating elements by drawing an area\r\nconst isDrawing = ref(false);\r\nconst drawingTool = ref<string | null>(null);\r\nconst drawStartX = ref(0);\r\nconst drawStartY = ref(0);\r\nconst drawEndX = ref(0);\r\nconst drawEndY = ref(0);\r\nconst currentShapeType = ref<string>(\"rectangle\");\r\n\r\nconst editorContentStyle = computed(() => ({\r\n  transform: `scale(${zoom.value})`,\r\n  transformOrigin: \"0 0\",\r\n}));\r\n\r\n// Computed style for the drawing rectangle\r\nconst drawingRectangleStyle = computed(() => {\r\n  if (!isDrawing.value) {\r\n    return {\r\n      left: \"0px\",\r\n      top: \"0px\",\r\n      width: \"0px\",\r\n      height: \"0px\",\r\n    };\r\n  }\r\n\r\n  // Calculate the rectangle dimensions\r\n  const left = Math.min(drawStartX.value, drawEndX.value);\r\n  const top = Math.min(drawStartY.value, drawEndY.value);\r\n  const width = Math.abs(drawEndX.value - drawStartX.value);\r\n  const height = Math.abs(drawEndY.value - drawStartY.value);\r\n\r\n  return {\r\n    left: `${left}px`,\r\n    top: `${top}px`,\r\n    width: `${width}px`,\r\n    height: `${height}px`,\r\n  };\r\n});\r\n\r\n// Get elements from the current section for the layer panel\r\nconst currentSectionElements = computed(() => {\r\n  if (!document.sections || !document.sections[currentSection.value]) {\r\n    return [];\r\n  }\r\n  return document.sections[currentSection.value].elements;\r\n});\r\n\r\nwatch(\r\n  () => JSON.stringify(document),\r\n  () => {\r\n    historyStore.pushState(document);\r\n  },\r\n  { deep: true },\r\n);\r\n\r\nonMounted(async () => {\r\n  isLoadingDocument.value = true;\r\n\r\n  if (documentId) {\r\n    const loadedDoc = await documentStore.getDocument(documentId);\r\n    if (loadedDoc) {\r\n      console.log(\"Loaded document:\", {\r\n        id: loadedDoc.id,\r\n        title: loadedDoc.title,\r\n        paperSize: loadedDoc.paperSize,\r\n        orientation: loadedDoc.orientation,\r\n      });\r\n\r\n      Object.assign(document, loadedDoc);\r\n      historyStore.pushState(document);\r\n\r\n      console.log(\"Document after loading:\", {\r\n        id: document.id,\r\n        title: document.title,\r\n        paperSize: document.paperSize,\r\n        orientation: document.orientation,\r\n      });\r\n    }\r\n  } else {\r\n    document.sections = [\r\n      {\r\n        id: \"cover\",\r\n        title: \"Cover\",\r\n        elements: [],\r\n      },\r\n    ];\r\n    historyStore.pushState(document);\r\n\r\n    console.log(\"New document created:\", {\r\n      id: document.id,\r\n      title: document.title,\r\n      paperSize: document.paperSize,\r\n      orientation: document.orientation,\r\n    });\r\n  }\r\n\r\n  // Reset loading flag\r\n  isLoadingDocument.value = false;\r\n});\r\n\r\nfunction handleUndo() {\r\n  const previousState = historyStore.undo(document);\r\n  if (previousState) {\r\n    Object.assign(document, previousState);\r\n  }\r\n}\r\n\r\nfunction handleRedo() {\r\n  const nextState = historyStore.redo(document);\r\n  if (nextState) {\r\n    Object.assign(document, nextState);\r\n  }\r\n}\r\n\r\nfunction selectSection(index: number) {\r\n  currentSection.value = index;\r\n  selectedElement.value = null;\r\n}\r\n\r\nfunction addSection(section: Section) {\r\n  document.sections.push(section);\r\n  currentSection.value = document.sections.length - 1;\r\n}\r\n\r\nfunction updateSection(index: number, section: Section) {\r\n  document.sections[index] = section;\r\n}\r\n\r\nfunction deleteSection(index: number) {\r\n  if (document.sections.length > 1) {\r\n    document.sections.splice(index, 1);\r\n    if (currentSection.value >= document.sections.length) {\r\n      currentSection.value = document.sections.length - 1;\r\n    }\r\n  }\r\n}\r\n\r\nfunction selectElement(element: DocumentElement | null) {\r\n  selectedElement.value = element;\r\n  if (element) {\r\n    activeTools.value = [element.type];\r\n  } else {\r\n    activeTools.value = [];\r\n  }\r\n}\r\n\r\nfunction updateElement(element: DocumentElement) {\r\n  const sectionIndex = document.sections.findIndex((s) =>\r\n    s.elements.some((e) => e.id === element.id),\r\n  );\r\n\r\n  if (sectionIndex >= 0) {\r\n    const elementIndex = document.sections[sectionIndex].elements.findIndex(\r\n      (e) => e.id === element.id,\r\n    );\r\n    if (elementIndex >= 0) {\r\n      document.sections[sectionIndex].elements[elementIndex] = element;\r\n    }\r\n  }\r\n}\r\n\r\nfunction deleteElement(element: DocumentElement) {\r\n  const sectionIndex = document.sections.findIndex((s) =>\r\n    s.elements.some((e) => e.id === element.id),\r\n  );\r\n\r\n  if (sectionIndex >= 0) {\r\n    document.sections[sectionIndex].elements = document.sections[\r\n      sectionIndex\r\n    ].elements.filter((e) => e.id !== element.id);\r\n    selectedElement.value = null;\r\n  }\r\n}\r\n\r\n// Using the getHighestZIndex function defined below\r\n\r\nfunction duplicateElement(element: DocumentElement) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement = {\r\n    ...element,\r\n    id: `${element.type}-${Date.now()}`,\r\n    position: {\r\n      x: element.position.x + 20,\r\n      y: element.position.y + 20,\r\n    },\r\n    zIndex: highestZIndex + 1, // Place the duplicate on top\r\n  };\r\n\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectedElement.value = newElement;\r\n}\r\n\r\n// Drawing functions for creating elements\r\nfunction startDrawing(event: MouseEvent) {\r\n  // Only start drawing if a drawing tool is selected\r\n  if (!drawingTool.value) return;\r\n\r\n  // Find the active document page\r\n  const activePage = findActiveDocumentPage(event);\r\n  if (!activePage) return;\r\n\r\n  // Get the position relative to the active document page content\r\n  const pageRect = activePage.getBoundingClientRect();\r\n  const x = (event.clientX - pageRect.left) / zoom.value;\r\n  const y = (event.clientY - pageRect.top) / zoom.value;\r\n\r\n  // Set the starting position\r\n  drawStartX.value = x;\r\n  drawStartY.value = y;\r\n  drawEndX.value = x;\r\n  drawEndY.value = y;\r\n\r\n  // Start drawing\r\n  isDrawing.value = true;\r\n}\r\n\r\nfunction updateDrawing(event: MouseEvent) {\r\n  // Only update if we're drawing\r\n  if (!isDrawing.value) return;\r\n\r\n  // Find the active document page\r\n  const activePage = findActiveDocumentPage(event);\r\n  if (!activePage) return;\r\n\r\n  // Get the position relative to the active document page content\r\n  const pageRect = activePage.getBoundingClientRect();\r\n  const x = (event.clientX - pageRect.left) / zoom.value;\r\n  const y = (event.clientY - pageRect.top) / zoom.value;\r\n\r\n  // Update the end position\r\n  drawEndX.value = x;\r\n  drawEndY.value = y;\r\n}\r\n\r\nfunction finishDrawing(event: MouseEvent) {\r\n  // Only finish if we're drawing\r\n  if (!isDrawing.value) return;\r\n\r\n  // Find the active document page\r\n  const activePage = findActiveDocumentPage(event);\r\n  if (!activePage) {\r\n    // Reset drawing state if no active page found\r\n    isDrawing.value = false;\r\n    drawingTool.value = null;\r\n    return;\r\n  }\r\n\r\n  // Get the position relative to the active document page content\r\n  const pageRect = activePage.getBoundingClientRect();\r\n  const x = (event.clientX - pageRect.left) / zoom.value;\r\n  const y = (event.clientY - pageRect.top) / zoom.value;\r\n\r\n  // Update the end position\r\n  drawEndX.value = x;\r\n  drawEndY.value = y;\r\n\r\n  // Calculate the rectangle dimensions\r\n  const left = Math.min(drawStartX.value, drawEndX.value);\r\n  const top = Math.min(drawStartY.value, drawEndY.value);\r\n  const width = Math.abs(drawEndX.value - drawStartX.value);\r\n  const height = Math.abs(drawEndY.value - drawStartY.value);\r\n\r\n  // Get the page content element to account for its padding\r\n  const pageContent = activePage.querySelector(\".page-content\");\r\n  let adjustedLeft = left;\r\n  let adjustedTop = top;\r\n\r\n  if (pageContent) {\r\n    // Get the computed style to account for padding\r\n    const style = window.getComputedStyle(pageContent);\r\n    const paddingLeft = parseFloat(style.paddingLeft) || 0;\r\n    const paddingTop = parseFloat(style.paddingTop) || 0;\r\n\r\n    // Adjust the position to account for the page content padding\r\n    adjustedLeft = Math.max(0, left - paddingLeft);\r\n    adjustedTop = Math.max(0, top - paddingTop);\r\n  }\r\n\r\n  // Only create an element if the area is large enough\r\n  if (width > 10 && height > 10) {\r\n    // Create the element based on the drawing tool\r\n    switch (drawingTool.value) {\r\n    case \"text\":\r\n      addTextElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"image\":\r\n      addImageElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"shape\":\r\n      addShapeElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"line\":\r\n      addLineElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"table\":\r\n      addTableElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"signature\":\r\n      addSignatureElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"form\":\r\n      addFormElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    case \"grid-element\":\r\n      addGridElement(adjustedLeft, adjustedTop, width, height);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Reset drawing state\r\n  isDrawing.value = false;\r\n  drawingTool.value = null;\r\n}\r\n\r\n// Helper function to find the active document page\r\nfunction findActiveDocumentPage(event: MouseEvent): HTMLElement | null {\r\n  // Try to find the document page that contains the event target\r\n  let element = event.target as HTMLElement;\r\n  while (element && !element.classList.contains(\"document-page\")) {\r\n    element = element.parentElement as HTMLElement;\r\n  }\r\n\r\n  // If we found a document page, return it\r\n  if (element && element.classList.contains(\"document-page\")) {\r\n    return element;\r\n  }\r\n\r\n  // If we couldn't find a document page from the event target,\r\n  // try to find the active document page from the refs\r\n  if (documentPageRefs.value && documentPageRefs.value.length > 0) {\r\n    const activePageRef = documentPageRefs.value[currentSection.value];\r\n    if (activePageRef && activePageRef.$el) {\r\n      return activePageRef.$el;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction cancelDrawing() {\r\n  // Reset drawing state\r\n  isDrawing.value = false;\r\n  drawingTool.value = null;\r\n}\r\n\r\n// Text selection is now handled by the global selection manager\r\n\r\n// Function to export the document to PDF\r\nasync function exportToPdf() {\r\n  try {\r\n    isExportingPdf.value = true;\r\n\r\n    // Generate a default filename based on the document title\r\n    const filename = `${document.title || \"document\"}.pdf`;\r\n\r\n    // Export options\r\n    const options = {\r\n      filename: filename,\r\n      includeBackground: true,\r\n      quality: 2, // Normal quality\r\n      paperSize: document.paperSize,\r\n      orientation: document.orientation,\r\n    };\r\n\r\n    // Export the document to PDF\r\n    await directExportToPdf(document, options);\r\n\r\n    // Show success message\r\n    snackbar.value = {\r\n      show: true,\r\n      text: \"PDF exported successfully\",\r\n      color: \"success\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error exporting PDF:\", error);\r\n\r\n    // Show error message\r\n    snackbar.value = {\r\n      show: true,\r\n      text: \"Failed to export PDF. Please try again.\",\r\n      color: \"error\",\r\n    };\r\n  } finally {\r\n    isExportingPdf.value = false;\r\n  }\r\n}\r\n\r\nfunction handleToolClick(tool: string, value?: any) {\r\n  switch (tool) {\r\n  case \"undo\":\r\n    handleUndo();\r\n    break;\r\n\r\n  case \"redo\":\r\n    handleRedo();\r\n    break;\r\n\r\n  case \"add-page\":\r\n    addSection({\r\n      id: \"section-\" + Date.now(),\r\n      title: \"New Section\",\r\n      elements: [],\r\n    });\r\n    break;\r\n\r\n  case \"grid\":\r\n    toggleGrid(value);\r\n    break;\r\n\r\n  case \"zoom-in\":\r\n    zoom.value = Math.min(2, zoom.value + 0.1);\r\n    break;\r\n\r\n  case \"zoom-out\":\r\n    zoom.value = Math.max(0.5, zoom.value - 0.1);\r\n    break;\r\n\r\n  case \"paper-size\":\r\n    // Update the document's paper size\r\n    document.paperSize = value;\r\n    console.log(\"Document paper size changed to:\", value);\r\n    break;\r\n\r\n  case \"orientation\":\r\n    // Update the document's orientation\r\n    document.orientation = value as \"portrait\" | \"landscape\";\r\n    console.log(\"Document orientation changed to:\", value);\r\n    break;\r\n\r\n  case \"document-size\":\r\n    // Open the document size dialog\r\n    showDocumentSizeDialog.value = true;\r\n    break;\r\n\r\n  case \"text\":\r\n    // Set the drawing tool to text and wait for user to draw\r\n    drawingTool.value = \"text\";\r\n    break;\r\n\r\n  case \"image\":\r\n    // Set the drawing tool to image and wait for user to draw\r\n    drawingTool.value = \"image\";\r\n    break;\r\n\r\n  case \"shape\":\r\n    // Set the drawing tool to shape and wait for user to draw\r\n    drawingTool.value = \"shape\";\r\n    // Set the current shape type\r\n    currentShapeType.value = value || \"rectangle\";\r\n    break;\r\n\r\n  case \"line\":\r\n    // Set the drawing tool to line and wait for user to draw\r\n    drawingTool.value = \"line\";\r\n    break;\r\n\r\n  case \"table\":\r\n    // Set the drawing tool to table and wait for user to draw\r\n    drawingTool.value = \"table\";\r\n    break;\r\n\r\n  case \"signature\":\r\n    // Set the drawing tool to signature and wait for user to draw\r\n    drawingTool.value = \"signature\";\r\n    break;\r\n\r\n  case \"form\":\r\n    // Set the drawing tool to form and wait for user to draw\r\n    drawingTool.value = \"form\";\r\n    break;\r\n\r\n  case \"grid-element\":\r\n    // Set the drawing tool to grid and wait for user to draw\r\n    drawingTool.value = \"grid-element\";\r\n    break;\r\n\r\n  case \"preview\":\r\n    showPreview.value = true;\r\n    break;\r\n\r\n  case \"export-pdf\":\r\n    exportToPdf();\r\n    break;\r\n  }\r\n}\r\n\r\nfunction addTextElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  // Get highest zIndex in current section to place new element on top\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"text-\" + Date.now(),\r\n    type: \"text\",\r\n    content: \"New text block\",\r\n    position: { x: x ?? 100, y: y ?? 100 },\r\n    size: { width: width ?? 300, height: height ?? 100 },\r\n    style: {\r\n      fontFamily: \"Roboto\",\r\n      fontSize: 16,\r\n      fontWeight: \"normal\",\r\n      color: \"#000000\",\r\n      backgroundColor: \"transparent\",\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\n// Helper function to get the highest zIndex in the current section\r\nfunction getHighestZIndex(): number {\r\n  if (!document.sections || !document.sections[currentSection.value]) {\r\n    return 0;\r\n  }\r\n\r\n  const elements = document.sections[currentSection.value].elements;\r\n  if (!elements || elements.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  let highestZIndex = 0;\r\n  elements.forEach((element) => {\r\n    const zIndex = element.zIndex ?? 0;\r\n    if (zIndex > highestZIndex) {\r\n      highestZIndex = zIndex;\r\n    }\r\n  });\r\n\r\n  return highestZIndex;\r\n}\r\n\r\nfunction addImageElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"image-\" + Date.now(),\r\n    type: \"image\",\r\n    content:\r\n      \"https://images.pexels.com/photos/3760514/pexels-photo-3760514.jpeg\",\r\n    position: { x: x ?? 100, y: y ?? 100 },\r\n    size: { width: width ?? 300, height: height ?? 200 },\r\n    style: {\r\n      borderRadius: 0,\r\n      borderWidth: 0,\r\n      borderColor: \"transparent\",\r\n      opacity: 1,\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\nfunction addShapeElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"shape-\" + Date.now(),\r\n    type: \"shape\",\r\n    content: currentShapeType.value, // Use the current shape type\r\n    position: { x: x ?? 100, y: y ?? 100 },\r\n    size: { width: width ?? 200, height: height ?? 100 },\r\n    style: {\r\n      fill: \"#E2E8F0\",\r\n      stroke: \"#CBD5E1\",\r\n      strokeWidth: 1,\r\n      opacity: 1,\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\nfunction addLineElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"line-\" + Date.now(),\r\n    type: \"shape\",\r\n    content: \"line\",\r\n    position: { x: x ?? 100, y: y ?? 100 },\r\n    size: { width: width ?? 200, height: height ?? 2 },\r\n    style: {\r\n      stroke: \"#000000\",\r\n      strokeWidth: 2,\r\n      opacity: 1,\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\nfunction addTableElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"table-\" + Date.now(),\r\n    type: \"table\",\r\n    content: {\r\n      headers: [\"Item\", \"Description\", \"Price\"],\r\n      rows: [[\"\", \"\", \"\"]],\r\n    },\r\n    position: { x: x ?? 50, y: y ?? 100 },\r\n    size: { width: width ?? 600, height: height ?? 200 },\r\n    style: {\r\n      headerBackgroundColor: \"#F8F9FA\",\r\n      headerTextColor: \"#000000\",\r\n      cellBackgroundColor: \"#FFFFFF\",\r\n      cellTextColor: \"#000000\",\r\n      borderColor: \"#E2E8F0\",\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\nfunction addSignatureElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"signature-\" + Date.now(),\r\n    type: \"signature\",\r\n    content: \"\",\r\n    position: { x: x ?? 100, y: y ?? 400 },\r\n    size: { width: width ?? 300, height: height ?? 100 },\r\n    style: {\r\n      borderBottom: \"1px solid #000000\",\r\n      label: \"Signature\",\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\nfunction addFormElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"form-\" + Date.now(),\r\n    type: \"form\",\r\n    content: {\r\n      type: \"textfield\",\r\n      label: \"Input Label\",\r\n      inputType: \"text\",\r\n    },\r\n    position: { x: x ?? 100, y: y ?? 100 },\r\n    size: { width: width ?? 300, height: height ?? 80 },\r\n    style: {\r\n      backgroundColor: \"white\",\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\nfunction addGridElement(\r\n  x?: number,\r\n  y?: number,\r\n  width?: number,\r\n  height?: number,\r\n) {\r\n  const highestZIndex = getHighestZIndex();\r\n\r\n  const newElement: DocumentElement = {\r\n    id: \"grid-\" + Date.now(),\r\n    type: \"grid\",\r\n    content: {\r\n      cells: [\r\n        { type: \"text\", content: \"Text content\", size: 1 },\r\n        { type: \"image\", content: \"\", size: 1 },\r\n      ],\r\n    },\r\n    position: { x: x ?? 100, y: y ?? 100 },\r\n    size: { width: width ?? 600, height: height ?? 300 },\r\n    style: {\r\n      backgroundColor: \"white\",\r\n      borderColor: \"#E2E8F0\",\r\n    },\r\n    zIndex: highestZIndex + 1, // Place on top\r\n  };\r\n  document.sections[currentSection.value].elements.push(newElement);\r\n  selectElement(newElement);\r\n}\r\n\r\n// Layer management functions\r\nfunction moveElementUp(element: DocumentElement) {\r\n  const sectionIndex = document.sections.findIndex((s) =>\r\n    s.elements.some((e) => e.id === element.id),\r\n  );\r\n\r\n  if (sectionIndex >= 0) {\r\n    const elements = document.sections[sectionIndex].elements;\r\n    const elementIndex = elements.findIndex((e) => e.id === element.id);\r\n\r\n    if (elementIndex >= 0) {\r\n      // Get current zIndex or default to 0\r\n      const currentZIndex = element.zIndex ?? 0;\r\n\r\n      // Find the element with the next higher zIndex\r\n      const higherElements = elements.filter(\r\n        (e) => (e.zIndex ?? 0) > currentZIndex,\r\n      );\r\n\r\n      if (higherElements.length > 0) {\r\n        // Sort by zIndex to find the element immediately above\r\n        higherElements.sort((a, b) => (a.zIndex ?? 0) - (b.zIndex ?? 0));\r\n        const nextElement = higherElements[0];\r\n        const nextZIndex = nextElement.zIndex ?? 0;\r\n\r\n        // Swap zIndex values\r\n        const updatedElement = { ...element, zIndex: nextZIndex };\r\n        const updatedNextElement = { ...nextElement, zIndex: currentZIndex };\r\n\r\n        // Update both elements\r\n        updateElement(updatedElement);\r\n        updateElement(updatedNextElement);\r\n      } else {\r\n        // If this is already the top element, increment its zIndex\r\n        const updatedElement = { ...element, zIndex: currentZIndex + 1 };\r\n        updateElement(updatedElement);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveElementDown(element: DocumentElement) {\r\n  const sectionIndex = document.sections.findIndex((s) =>\r\n    s.elements.some((e) => e.id === element.id),\r\n  );\r\n\r\n  if (sectionIndex >= 0) {\r\n    const elements = document.sections[sectionIndex].elements;\r\n    const elementIndex = elements.findIndex((e) => e.id === element.id);\r\n\r\n    if (elementIndex >= 0) {\r\n      // Get current zIndex or default to 0\r\n      const currentZIndex = element.zIndex ?? 0;\r\n\r\n      // Find the element with the next lower zIndex\r\n      const lowerElements = elements.filter(\r\n        (e) => (e.zIndex ?? 0) < currentZIndex,\r\n      );\r\n\r\n      if (lowerElements.length > 0) {\r\n        // Sort by zIndex to find the element immediately below\r\n        lowerElements.sort((a, b) => (b.zIndex ?? 0) - (a.zIndex ?? 0));\r\n        const prevElement = lowerElements[0];\r\n        const prevZIndex = prevElement.zIndex ?? 0;\r\n\r\n        // Swap zIndex values\r\n        const updatedElement = { ...element, zIndex: prevZIndex };\r\n        const updatedPrevElement = { ...prevElement, zIndex: currentZIndex };\r\n\r\n        // Update both elements\r\n        updateElement(updatedElement);\r\n        updateElement(updatedPrevElement);\r\n      } else {\r\n        // If this is already the bottom element, decrement its zIndex\r\n        const updatedElement = { ...element, zIndex: currentZIndex - 1 };\r\n        updateElement(updatedElement);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveElementToTop(element: DocumentElement) {\r\n  const sectionIndex = document.sections.findIndex((s) =>\r\n    s.elements.some((e) => e.id === element.id),\r\n  );\r\n\r\n  if (sectionIndex >= 0) {\r\n    const elements = document.sections[sectionIndex].elements;\r\n\r\n    // Find the highest zIndex\r\n    let highestZIndex = 0;\r\n    elements.forEach((e) => {\r\n      const zIndex = e.zIndex ?? 0;\r\n      if (zIndex > highestZIndex) {\r\n        highestZIndex = zIndex;\r\n      }\r\n    });\r\n\r\n    // Set this element's zIndex to be higher than the highest\r\n    const updatedElement = { ...element, zIndex: highestZIndex + 1 };\r\n    updateElement(updatedElement);\r\n  }\r\n}\r\n\r\nfunction moveElementToBottom(element: DocumentElement) {\r\n  const sectionIndex = document.sections.findIndex((s) =>\r\n    s.elements.some((e) => e.id === element.id),\r\n  );\r\n\r\n  if (sectionIndex >= 0) {\r\n    const elements = document.sections[sectionIndex].elements;\r\n\r\n    // Find the lowest zIndex\r\n    let lowestZIndex = 0;\r\n    elements.forEach((e) => {\r\n      const zIndex = e.zIndex ?? 0;\r\n      if (zIndex < lowestZIndex) {\r\n        lowestZIndex = zIndex;\r\n      }\r\n    });\r\n\r\n    // Set this element's zIndex to be lower than the lowest\r\n    const updatedElement = { ...element, zIndex: lowestZIndex - 1 };\r\n    updateElement(updatedElement);\r\n  }\r\n}\r\n\r\n// Document size functions\r\nfunction updatePaperSize(size: string) {\r\n  document.paperSize = size;\r\n  console.log(\"Document paper size updated to:\", size);\r\n}\r\n\r\nfunction updateOrientation(orientation: \"portrait\" | \"landscape\") {\r\n  document.orientation = orientation;\r\n  console.log(\"Document orientation updated to:\", orientation);\r\n}\r\n\r\n// Grid functions\r\nfunction toggleGrid(visible?: boolean) {\r\n  // If visible is provided, use it; otherwise toggle the current value\r\n  showGrid.value = visible !== undefined ? visible : !showGrid.value;\r\n\r\n  console.log(\"Grid visibility toggled:\", showGrid.value);\r\n\r\n  // Update all elements to snap to grid if grid is enabled\r\n  if (showGrid.value) {\r\n    document.sections.forEach((section) => {\r\n      section.elements.forEach((element) => {\r\n        // Snap element position to grid\r\n        const snappedPosition = {\r\n          x: Math.round(element.position.x / 10) * 10,\r\n          y: Math.round(element.position.y / 10) * 10,\r\n        };\r\n\r\n        // Only update if position actually changed\r\n        if (\r\n          snappedPosition.x !== element.position.x ||\r\n          snappedPosition.y !== element.position.y\r\n        ) {\r\n          const updatedElement = {\r\n            ...element,\r\n            position: snappedPosition,\r\n          };\r\n          updateElement(updatedElement);\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n// Add these refs for save status\r\nconst isSaving = ref(false);\r\nconst saveSuccess = ref(false);\r\nconst saveError = ref(false);\r\nconst saveMessage = ref(\"\");\r\nconst hasUnsavedChanges = ref(false);\r\n\r\n// Add these refs for the title dialog\r\nconst showTitleDialog = ref(false);\r\nconst documentTitle = ref(\"\");\r\nconst titleError = ref(\"\");\r\nconst pendingSave = ref(false);\r\n\r\n// Add a flag to track if we're currently loading a document\r\nconst isLoadingDocument = ref(false);\r\nconst lastEdit = ref(Date.now());\r\n\r\n// Track changes to document\r\nwatch(\r\n  () => JSON.stringify(document),\r\n  () => {\r\n    // Only mark as unsaved if we're not loading a document\r\n    if (!isLoadingDocument.value) {\r\n      hasUnsavedChanges.value = true;\r\n      lastEdit.value = Date.now();\r\n    }\r\n  },\r\n  { deep: true },\r\n);\r\n\r\n// Reset unsaved changes flag\r\nfunction resetUnsavedChanges() {\r\n  hasUnsavedChanges.value = false;\r\n}\r\n\r\nfunction saveDocument() {\r\n  // Reset any previous errors\r\n  titleError.value = \"\";\r\n\r\n  // Set the initial title value to the current document title\r\n  documentTitle.value = document.title || \"\";\r\n\r\n  // Show the title dialog\r\n  showTitleDialog.value = true;\r\n  pendingSave.value = true;\r\n}\r\n\r\n// Add a ref to store the navigation timeout\r\nconst navigationTimeout = ref<number | null>(null);\r\n\r\n// Function to handle the actual save after title is confirmed\r\nasync function performSave() {\r\n  if (isSaving.value) return; // Prevent multiple simultaneous saves\r\n\r\n  // Clear any existing navigation timeout\r\n  if (navigationTimeout.value) {\r\n    clearTimeout(navigationTimeout.value);\r\n    navigationTimeout.value = null;\r\n  }\r\n\r\n  isSaving.value = true;\r\n  saveSuccess.value = false;\r\n  saveError.value = false;\r\n  saveMessage.value = \"Saving document...\";\r\n\r\n  try {\r\n    // Update the document title with the user input\r\n    document.title = documentTitle.value.trim() || \"Untitled Document\";\r\n\r\n    // Make sure we have at least one section\r\n    if (!document.sections || document.sections.length === 0) {\r\n      document.sections = [\r\n        {\r\n          id: \"section-\" + Date.now(),\r\n          title: \"Section 1\",\r\n          elements: [],\r\n        },\r\n      ];\r\n    }\r\n\r\n    // Prepare document for saving\r\n    const documentToSave = {\r\n      id: document.id,\r\n      title: document.title,\r\n      createdAt: document.createdAt || new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n      sections: document.sections,\r\n      paperSize: document.paperSize,\r\n      orientation: document.orientation,\r\n    };\r\n\r\n    console.log(\"Saving document:\", {\r\n      id: documentToSave.id,\r\n      title: documentToSave.title,\r\n      paperSize: documentToSave.paperSize,\r\n      orientation: documentToSave.orientation,\r\n    });\r\n\r\n    // Save the document\r\n    const savedDocument = await documentStore.saveDocument(documentToSave);\r\n\r\n    console.log(\"Document saved successfully:\", {\r\n      id: savedDocument.id,\r\n      title: savedDocument.title,\r\n      paperSize: savedDocument.paperSize,\r\n      orientation: savedDocument.orientation,\r\n    });\r\n\r\n    // Update the document with the saved version\r\n    Object.assign(document, savedDocument);\r\n\r\n    // Reset unsaved changes flag BEFORE navigation\r\n    resetUnsavedChanges();\r\n\r\n    // Show success message\r\n    saveSuccess.value = true;\r\n    saveMessage.value = \"Document saved successfully!\";\r\n\r\n    // Wait a moment to show the success message before redirecting\r\n    navigationTimeout.value = setTimeout(() => {\r\n      // Navigate to the Dashboard page\r\n      console.log(\"Redirecting to Dashboard after successful save\");\r\n      router.push(\"/\");\r\n      navigationTimeout.value = null;\r\n    }, 1000); // Short delay to show the success message\r\n\r\n    console.log(\"Document saved successfully:\", savedDocument.id);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error saving document:\", error);\r\n\r\n    // Show error message\r\n    saveError.value = true;\r\n    saveMessage.value = \"Failed to save document. Please try again.\";\r\n\r\n    // Reset error message after 5 seconds\r\n    setTimeout(() => {\r\n      saveError.value = false;\r\n      saveMessage.value = \"\";\r\n    }, 5000);\r\n\r\n    return false;\r\n  } finally {\r\n    isSaving.value = false;\r\n    pendingSave.value = false;\r\n  }\r\n}\r\n\r\n// Function to confirm save with the entered title\r\nfunction confirmSaveWithTitle() {\r\n  // Validate the title\r\n  if (!documentTitle.value.trim()) {\r\n    titleError.value = \"Please enter a document title\";\r\n    return;\r\n  }\r\n\r\n  // Close the dialog\r\n  showTitleDialog.value = false;\r\n\r\n  // Perform the save\r\n  performSave();\r\n}\r\n\r\n// Function to cancel the save operation\r\nfunction cancelSave() {\r\n  showTitleDialog.value = false;\r\n  pendingSave.value = false;\r\n}\r\n\r\n// Add autosave functionality\r\n// const lastEdit = ref(Date.now());\r\n// Autosave is disabled for now\r\nconst autoSaveTimer: number | null = null;\r\n\r\n// Watch for document changes and mark for autosave\r\nwatch(\r\n  () => JSON.stringify(document),\r\n  () => {\r\n    lastEdit.value = Date.now();\r\n  },\r\n  { deep: true },\r\n);\r\n\r\n// Set up autosave timer\r\nonMounted(() => {\r\n  // Other onMounted code...\r\n\r\n  // Set up autosave\r\n  // autoSaveTimer = window.setInterval(() => {\r\n  //   const timeSinceLastEdit = Date.now() - lastEdit.value;\r\n\r\n  //   // Only autosave if there have been changes and no save is in progress\r\n  //   if (timeSinceLastEdit < autoSaveInterval && !isSaving.value) {\r\n  //     console.log(\"Auto-saving document...\");\r\n  //     saveDocument();\r\n  //   }\r\n  // }, autoSaveInterval);\r\n\r\n  // Add keyboard shortcut for save\r\n  window.addEventListener(\"keydown\", handleKeyDown);\r\n});\r\n\r\n// Clean up timers and event listeners\r\nonBeforeUnmount(() => {\r\n  if (autoSaveTimer !== null) {\r\n    clearInterval(autoSaveTimer);\r\n  }\r\n\r\n  window.removeEventListener(\"keydown\", handleKeyDown);\r\n});\r\n\r\n// Handle keyboard shortcuts\r\nfunction handleKeyDown(event: KeyboardEvent) {\r\n  // Check for Ctrl+S or Cmd+S\r\n  if ((event.ctrlKey || event.metaKey) && event.key === \"s\") {\r\n    event.preventDefault(); // Prevent browser's save dialog\r\n    saveDocument();\r\n  }\r\n}\r\n\r\n// Unsaved changes dialog actions removed\r\n\r\n// Navigation guard removed - allow direct navigation without confirmation\r\n\r\n// Beforeunload event handler removed - allow closing without confirmation\r\n\r\n// Update navigation function to go directly to dashboard\r\nfunction navigateToDashboard() {\r\n  // Always navigate directly to the dashboard without confirmation\r\n  router.push(\"/\");\r\n}\r\n\r\n// Show delete confirmation dialog\r\nfunction showDeleteConfirmation() {\r\n  showDeleteDialog.value = true;\r\n}\r\n\r\n// Cancel delete operation\r\nfunction cancelDelete() {\r\n  showDeleteDialog.value = false;\r\n}\r\n\r\n// Confirm delete operation\r\nasync function confirmDelete() {\r\n  if (!document.id || document.id.startsWith(\"new-doc\")) {\r\n    // Don't try to delete new documents that haven't been saved\r\n    showDeleteDialog.value = false;\r\n    return;\r\n  }\r\n\r\n  isDeleting.value = true;\r\n\r\n  try {\r\n    // Call the document store to delete the document\r\n    await documentStore.deleteDocument(document.id);\r\n\r\n    // Show success notification\r\n    snackbar.value = {\r\n      show: true,\r\n      text: `\"${document.title}\" has been deleted successfully.`,\r\n      color: \"success\",\r\n    };\r\n\r\n    // Close the dialog\r\n    showDeleteDialog.value = false;\r\n\r\n    // Navigate to the dashboard\r\n    router.push(\"/\");\r\n  } catch (error) {\r\n    console.error(\"Error deleting document:\", error);\r\n\r\n    // Show error notification\r\n    snackbar.value = {\r\n      show: true,\r\n      text: \"Failed to delete document. Please try again.\",\r\n      color: \"error\",\r\n    };\r\n  } finally {\r\n    isDeleting.value = false;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.document-editor {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.editor-container {\r\n  display: flex;\r\n  flex: 1;\r\n  overflow: hidden;\r\n}\r\n\r\n.main-editor {\r\n  flex: 1;\r\n  overflow: auto;\r\n  padding: 24px;\r\n  background-color: var(--surface);\r\n  position: relative;\r\n}\r\n\r\n.editor-content {\r\n  min-height: 100%;\r\n  transition: transform 0.2s ease;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.right-panel {\r\n  width: 320px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-left: 1px solid var(--border);\r\n  background-color: var(--surface);\r\n\r\n  .tab-content {\r\n    flex: 1;\r\n    overflow: auto;\r\n  }\r\n}\r\n\r\n/* Add styles for the title dialog */\r\n:deep(.v-text-field) {\r\n  margin-top: 16px;\r\n}\r\n\r\n:deep(.v-card-title) {\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.v-card-text) {\r\n  padding-top: 0;\r\n}\r\n</style>\r\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]},{"filePath":"D:\\work\\Proposal\\Proposal_Builder\\vitest.config.ts","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":1,"column":30,"nodeType":"Literal","messageId":"wrongQuotes","endLine":1,"endColumn":45,"fix":{"range":[29,44],"text":"\"vitest/config\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":2,"column":17,"nodeType":"Literal","messageId":"wrongQuotes","endLine":2,"endColumn":37,"fix":{"range":[62,82],"text":"\"@vitejs/plugin-vue\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":3,"column":31,"nodeType":"Literal","messageId":"wrongQuotes","endLine":3,"endColumn":41,"fix":{"range":[114,124],"text":"\"node:url\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":9,"column":18,"nodeType":"Literal","messageId":"wrongQuotes","endLine":9,"endColumn":25,"fix":{"range":[223,230],"text":"\"jsdom\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":11,"column":17,"nodeType":"Literal","messageId":"wrongQuotes","endLine":11,"endColumn":21,"fix":{"range":[264,268],"text":"\"v8\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":12,"column":18,"nodeType":"Literal","messageId":"wrongQuotes","endLine":12,"endColumn":24,"fix":{"range":[287,293],"text":"\"text\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":12,"column":26,"nodeType":"Literal","messageId":"wrongQuotes","endLine":12,"endColumn":32,"fix":{"range":[295,301],"text":"\"json\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":12,"column":34,"nodeType":"Literal","messageId":"wrongQuotes","endLine":12,"endColumn":40,"fix":{"range":[303,309],"text":"\"html\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":13,"column":17,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":32,"fix":{"range":[328,343],"text":"\"node_modules/\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":13,"column":34,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":41,"fix":{"range":[345,352],"text":"\"dist/\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":13,"column":43,"nodeType":"Literal","messageId":"wrongQuotes","endLine":13,"endColumn":52,"fix":{"range":[354,363],"text":"\"server/\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":18,"column":7,"nodeType":"Literal","messageId":"wrongQuotes","endLine":18,"endColumn":10,"fix":{"range":[410,413],"text":"\"@\""}},{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":18,"column":34,"nodeType":"Literal","messageId":"wrongQuotes","endLine":18,"endColumn":41,"fix":{"range":[437,444],"text":"\"./src\""}}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"import { defineConfig } from 'vitest/config';\nimport vue from '@vitejs/plugin-vue';\nimport { fileURLToPath } from 'node:url';\n\nexport default defineConfig({\n  plugins: [vue()],\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      exclude: ['node_modules/', 'dist/', 'server/'],\n    },\n  },\n  resolve: {\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url)),\n    },\n  },\n});\n","usedDeprecatedRules":[{"ruleId":"quotes","replacedBy":["@stylistic/js/quotes"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"quotes","url":"https://eslint.style/rules/js/quotes"}}]}},{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}},{"ruleId":"indent","replacedBy":["@stylistic/js/indent"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"indent","url":"https://eslint.style/rules/js/indent"}}]}},{"ruleId":"comma-dangle","replacedBy":["@stylistic/js/comma-dangle"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"comma-dangle","url":"https://eslint.style/rules/js/comma-dangle"}}]}},{"ruleId":"arrow-parens","replacedBy":["@stylistic/js/arrow-parens"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"arrow-parens","url":"https://eslint.style/rules/js/arrow-parens"}}]}},{"ruleId":"object-curly-spacing","replacedBy":["@stylistic/js/object-curly-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"object-curly-spacing","url":"https://eslint.style/rules/js/object-curly-spacing"}}]}},{"ruleId":"array-bracket-spacing","replacedBy":["@stylistic/js/array-bracket-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"array-bracket-spacing","url":"https://eslint.style/rules/js/array-bracket-spacing"}}]}},{"ruleId":"space-before-function-paren","replacedBy":["@stylistic/js/space-before-function-paren"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-function-paren","url":"https://eslint.style/rules/js/space-before-function-paren"}}]}},{"ruleId":"space-before-blocks","replacedBy":["@stylistic/js/space-before-blocks"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"space-before-blocks","url":"https://eslint.style/rules/js/space-before-blocks"}}]}},{"ruleId":"keyword-spacing","replacedBy":["@stylistic/js/keyword-spacing"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"keyword-spacing","url":"https://eslint.style/rules/js/keyword-spacing"}}]}},{"ruleId":"no-multiple-empty-lines","replacedBy":["@stylistic/js/no-multiple-empty-lines"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"no-multiple-empty-lines","url":"https://eslint.style/rules/js/no-multiple-empty-lines"}}]}}]}]
